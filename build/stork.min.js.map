{"version":3,"sources":["header.js","functions.js","Stork.js","Promise.js","FastMap.js","extending.js","aggregation.js","query.js","chrome-storage-local.js","local-storage.js","memory.js","webkit-sqlite.js","window-name.js","footer.js"],"names":["global","undefined","isFunc","x","constructor","call","apply","isObject","isNumber","isNaN","isArray","Array","isString","undef","def","coalesce","a","b","c","d","swap","arr","i","j","temp","copy","from","to","prop","S4","Math","random","toString","substring","uuid","compareAdapters","priority","$promise","methodName","func","promise","Promise","this","success","failure","handlePending","arguments","args","prototype","slice","pop","push","getAdapter","adapterName","chosen","Stork","adapters","length","adapt","name","definition","valid","sort","options","JSON","key","lazy","cache","FastMap","pending","initialized","loaded","adapter","plugins","initializing","init","context","root","next","nextFromSuccess","state","PENDING","successes","failures","errors","$queue","map","reset","putMap","toJson","stringify","fromJson","parse","decode","encode","method","handled","finishInitialization","$success","newPromise","$bindTo","finishReload","$pending","values","okeys","reload","then","callback","getMany","keys","gotten","addValue","value","onFailure","e","$failure","get","rawKey","has","_get","destroy","_destroy","save","record","keyName","onSuccess","error","put","batch","records","saves","onSaved","setFailure","rawValue","_put","remove","_remove","removeMany","removed","each","stork","iterate","size","_size","all","returnAll","FAILURE","SUCCESS","CHAINED","$handleSuccesses","$handleFailures","replacementArguments","succs","s","result","$handleNext","returned","fails","errorArgument","indices","originalKey","index","removeAt","lastValue","lastKey","lastOkey","indexOf","hasOverlap","reverse","max","half","ceil","rebuildIndex","comparator","partition","left","right","pivot","floor","qsort","plugin","aggregate","property","accumulate","getResult","v","count","total","sum","summing","avg","min","minValue","Number","MAX_VALUE","maxValue","METHODS","where","condition","matchedKeys","matchedValues","k","select","columns","results","resultKeys","resultObject","resultColumns","desc","isError","chrome","runtime","lastError","store","window","storage","local","prefix","set","_finishInitialization","items","removeByKeys","obj","previousValue","localStorage","setItem","removeItem","getItem","streplace","str","replace","match","parseInt","DATABASE_NAME","SQL_CREATE","SQL_SELECT","SQL_SELECT_ALL","SQL_SELECT_MANY","SQL_INSERT","SQL_DELETE","SQL_COUNT","SQL_DESTROY","SQL_DELETE_MANY","openDatabase","databaseName","database","databaseSize","databaseVersion","version","tx","onTransactionForCreate","executeSql","onCreate","db","transaction","onTransactionForSelect","onResults","rows","id","readTransaction","onTransaction","onResult","first","onCount","successful","converted","rawKeys","binder","query","join","keyToValueIndex","r","loadData","top","saveData","data"],"mappings":"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","file":"stork.min.js","sourcesContent":["'use strict';\n\n(function(global, undefined) \n{\n\n\n","var toJson = JSON.stringify;\n\nvar fromJson = JSON.parse;\n\nfunction isFunc(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isObject(x)\n{\n  return typeof x === 'object' && x !== null;\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction undef(x)\n{\n  return typeof x === 'undefined';\n}\n\nfunction def(x)\n{\n  return typeof x !== 'undefined';\n}\n\nfunction coalesce(a, b, c, d)\n{\n  if (def(a)) return a;\n  if (def(b)) return b;\n  if (def(c)) return c;\n  return d;\n}\n\nfunction swap(arr, i, j)\n{\n  var temp = arr[i]; \n  arr[i] = arr[j]; \n  arr[j] = temp;\n}\n\nfunction noop()\n{\n}\n\nfunction fn(func)\n{\n  return isFunc( func ) ? func : noop;\n}\n\nfunction fncoalesce(a, b)\n{\n  return isFunc( a ) ? a : (isFunc(b) ? b : noop);\n}\n\nfunction copy(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction compareAdapters(a, b)\n{\n  var d = b.priority - a.priority;\n\n  return d === 0 ? 0 : (d < 0 ? -1 : 1);\n}\n\nfunction $promise(methodName, func)\n{\n  return function()\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this[ methodName ], arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var args = Array.prototype.slice.call( arguments );\n    args.pop(); // remove failure\n    args.pop(); // remove success\n    args.push( promise ); // add promise\n\n    // Call the wrapped function\n    func.apply( this, args );\n\n    return promise;\n  };\n}\n\nfunction getAdapter(adapterName)\n{\n  if ( !getAdapter.chosen ) \n  {\n    if ( adapterName )\n    {\n      for (var i = 0; i < Stork.adapters.length; i++) \n      {\n        var adapt = Stork.adapters[i];\n\n        if ( adapt.name === adapterName && adapt.definition.valid() )\n        {\n          return adapt;\n        }\n      }\n    }\n\n    Stork.adapters.sort( compareAdapters );\n\n    for (var i = 0; i < Stork.adapters.length; i++) \n    {\n      var adapt = Stork.adapters[i];\n\n      if ( adapt.definition.valid() )\n      {\n        return getAdapter.chosen = adapt;\n      }\n    }\n  }\n\n  return getAdapter.chosen;\n}","\n\n/**\n * Creates a Stork instance.\n *\n * ```javascript\n * new Stork(); // global key-values/records\n * new Stork({name: 'todos'}); // grouped key-values/records\n * new Stork({name: 'rooms', key: 'ID'}); // records have 'ID' property which is used as key for saving records\n * new Stork({name: 'you are', lazy: true}); // records aren't all loaded on start, they are loaded as needed\n * new Stork({name: 'users', database: 'myapp', size: 65536}); // some storage engines support a custom database name and a desired size for the database\n *\n * new Stork(options, function(stork) {\n *   // stork = initialized stork instance\n * });\n * ```\n *\n * @constructor\n * @class\n * @param {Object} [options]\n *        An object of options, see the following properties for more details:\n *        {@link Stork#key}, {@link Stork#name}, {@link Stork#lazy}.\n * @param {Stork~initSuccess} [success]\n *        The function to invoke when the instance successfully initializes.\n * @param {Stork~initFailure} [failure]\n *        The function to invoke if this instance failes to initialize.\n */\nfunction Stork(options, success, failure)\n{\n  // If this wasn't called as a constructor, return an instance!\n  if (!(this instanceof Stork)) return new Stork( options, success, failure );\n\n  // JSON is required for StorkJS\n  if (!JSON) throw 'JSON unavailable! Include http://www.json.org/json2.js to fix.';\n\n  /**\n   * The options passed to the constructor and subsequently to the \n   * {@link Stork#init} function.\n   * \n   * @type {Object}\n   * @default  {}\n   */\n  this.options = options = (options || {});\n\n  /**\n   * The name of the property to use as the key for the \n   * {@link Stork#save} and {@link Stork#batch} functions. This should \n   * be specified in the `options` object.\n   * \n   * @type {String}\n   * @default 'id'\n   */\n  this.key = coalesce( options.key, 'id' );\n\n  /**\n   * The name used to group the key-value pairs. This is essentially\n   * a table name. This should be specified in the `options` object.\n   *           \n   * @type {String}\n   * @default ''\n   */\n  this.name = coalesce( options.name, '' );\n\n  /**\n   * If true, key-value pairs will be lazily loaded instead of loaded\n   * all at once on initialization. This should be specified in the \n   * `options` object.\n   *           \n   * @type {Boolean}\n   * @default false\n   */\n  this.lazy = coalesce( options.lazy, false );\n\n  /**\n   * The cache of key-value pairs currently loaded. If \n   * {@link Stork#loaded} is true then all key-value pairs exist in\n   * the cache.\n   *           \n   * @type {FastMap}\n   */\n  this.cache = new FastMap();\n\n  /**\n   * An array of functions called by the user before this instances\n   * was finished initializing. Once this instance successfully finishes \n   * initialization all pending functions are invoked in the order\n   * in which they were originally made and this property is set to\n   * `null`.\n   *           \n   * @type {Object[]}\n   */\n  this.pending = [];\n\n  /**\n   * True if this instance has successfully initialized, otherwise\n   * false if it failed to initialize or has not finished initializing.\n   *           \n   * @type {Boolean}\n   */\n  this.initialized = false;\n\n  /**\n   * True if the entire instance has been loaded into the \n   * {@link Stork#cache}, otherwise false. If lazy is specifed as true\n   * loaded will be false until any of the following methods are\n   * invoked: {@link Stork#each}, {@link Stork#all}, or\n   * {@link Stork#reload}.\n   *           \n   * @type {Boolean}\n   */\n  this.loaded = false;\n\n  /**\n   * The adapter `Object` with `String` name, `Number` priority, and\n   * `Object` definition properties. The adapter can be chosen based\n   * on the `options.adapter` and falls back to the next supported\n   * adapter based on priority.\n   *           \n   * @type {Object}\n   */\n  this.adapter = getAdapter( options.adapter );\n\n  // Copy the chosen adapter methods into this instance.\n  copy( this.adapter.definition, this );\n  \n  // Call each plugin on this instance before initialization starts.\n  for (var i = 0; i < Stork.plugins.length; i++)\n  {\n    Stork.plugins[ i ]( this );\n  }\n\n  // Start initializaing this instance.\n  this.initializing = this.init( this.options, success, failure );\n}\n\nStork.prototype = \n{\n\n  /**\n   * Decodes a key from a string.\n   *\n   * @method decode\n   * @param {String} rawKey\n   *        The string to decode into a key.\n   * @return {Any}\n   */\n  decode: fromJson,\n\n  /**\n   * Encodes a key into a string.\n   *\n   * @method encode\n   * @param {Any} key\n   *        The key to encode to a string.\n   * @return {String}\n   */\n  encode: toJson,\n  \n  /**\n   * Returns true if this Stork is not ready for storage calls and queues\n   * the method and arguments to be called after this Stork is initialized.\n   *\n   * @private\n   * @param  {function} method \n   *         The reference to the calling function\n   * @param  {Arguments} args \n   *         The arguments of the calling function\n   * @param  {Stork.Promise} promise \n   *         The promise to notify when the function is finally called.\n   * @return {Boolean} -\n   *         Returns true if the calling function should return this\n   *         immediately because the implementation isn't initialized yet.\n   */\n  handlePending: function(method, args, promise) \n  {\n    var handled = !this.initialized;\n\n    if (handled) \n    {\n      this.pending.push(\n      {\n        method: method,\n        arguments: Array.prototype.slice.call( args ),\n        promise: promise\n\n      });\n    }\n\n    return handled;\n  },\n\n  /**\n   * Marks the Stork as initialized and executes any pending functions.\n   *\n   * @private\n   * @param  {Stork.Promise} promise\n   *         The promise for {@link Stork#init} or {@link Stork#reload}.\n   * @return {Stork} -\n   *         A reference to this.\n   */\n  finishInitialization: function(promise, args) \n  {\n    if (!this.initialized) \n    {\n      this.initialized = true;\n\n      promise.$success( args );\n\n      for (var i = 0; i < this.pending.length; i++) \n      {\n        var pending = this.pending[ i ];\n        var newPromise = pending.method.apply( this, pending.arguments );\n\n        if ( pending.promise )\n        {\n          pending.promise.$bindTo( newPromise );\n        }\n      }\n\n      this.pending = null;\n    }\n\n    return this;\n  },\n\n  /**\n   * Finishes the reload function passing the now cached values and keys\n   * to the success callbacks.\n   *\n   * @private\n   * @param  {Stock.Promise} promise\n   *         The promise for the {@link Stork#reload} invocation.\n   */\n  finishReload: function(promise)\n  {\n    if ( promise.$pending() )\n    {\n      var cache = this.cache;\n\n      if ( this.initialized )\n      {\n        promise.$success( [cache.values, cache.okeys] );\n      }\n      else\n      {\n        this.finishInitialization( promise, [cache.values, cache.okeys] );\n      }\n    }\n  },\n\n  /**\n   * Determines whether this Stork implementation is available.\n   * \n   * @return {Boolean} True if this Stork is usable, otherwise false.\n   */\n  valid: function() \n  {\n    throw 'Stork.valid is not implemented';\n  },\n  \n  /**\n   * The format of success callback for {@link Stork#init}.\n   * \n   * @callback Stork~initSuccess\n   * @param {Stork} stork\n   *        The reference to this Stork instance.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#init}.\n   * \n   * @callback Stork~initFailure\n   * @param {Any} error\n   *        The error that was thrown.\n   */\n\n  /**\n   * Initializes this Stork instance. If `options.lazy` is passed in as true,\n   * key-value pairs will not be loaded here, otherwise all key-value\n   * pairs will be loaded. This function is automatically called at the end\n   * of the Stork constructor with the options passed to the constructor.\n   * \n   * @param  {Object} options\n   *         The initialization options.\n   * @param  {Stork~initSuccess} [success]\n   *         The function to invoke when the Stork instance successfully \n   *         initializes and is usable.\n   * @param  {Stork~initFailure} [failure]\n   *         The function to invoke if there's a problem initializing.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  init: function(options, success, failure) \n  {\n    throw 'Stork.init is not implemented';\n  },\n  \n  /**\n   * The format of success callback for {@link Stork#reload}.\n   * \n   * @callback Stork~reloadSuccess\n   * @param {Array} values\n   *        An array of all values loaded. This should not be modified.\n   * @param {Array} keys\n   *        An array of all keys loaded. This should not be modified.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#reload}.\n   * \n   * @callback Stork~reloadFailure\n   * @param {Any} error\n   *        The error that was thrown.\n   */\n\n  /**\n   * Loads all key-value pairs into the cache which will increase performance \n   * for fetching operations ({@link Stork#get}, {@link Stork#getMany}, \n   * {@link Stork#each}, {@link Stork#all}).\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(values, keys) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(error) {\n   *   // uh oh!\n   * };\n   * db.reload(); // I don't care about whether it succeeds or fails\n   * db.reload( onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.reload().then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Stork~reloadSuccess} [success]\n   *         The function to invoke when all key-value pairs are loaded.\n   * @param  {Stork~reloadFailure} [failure]\n   *         The function to invoke if there was a problem loading all key-value\n   *         pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  reload: function(success, failure)\n  {\n    throw 'Stork.reload is not implemented';\n  },\n\n  /**\n   * A helper method for creating a consistent look when chaining promised\n   * functions.\n   *\n   * *Usage*\n   * ```javascript\n   * db.then(function() { // <--\n   *     // this === db, how big is it?\n   *     return this.size();\n   *   })\n   *   .then(function(size) {\n   *     // size has been determined, destroy!\n   *     return this.destroy();\n   *   })\n   *   .then(function(){\n   *     // You sunk my battleship! (destroyed db)\n   *   })\n   * ;\n   * ```\n   * \n   * @param  {function} callback\n   *         The callback to invoke with this Stork instance as `this`.\n   * @return {Stork.Promise} -\n   *         The callback should return a Promise to chain additional functions.\n   */\n  then: function(callback)\n  {\n    return callback.apply( this );\n  },\n\n  /**\n   * The format of success callback for {@link Stork#getMany}.\n   * \n   * @callback Stork~getManySuccess\n   * @param {Array} values\n   *        The array of values associated to the given keys. If a key wasn't \n   *        found then the value in the array will be `undefined`.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#getMany}.\n   * \n   * @callback Stork~getManyFailure\n   * @param {Array} keys\n   *        The keys given that resulted in an error.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Gets an array of values given an array of keys and returns it to the\n   * callback. If the key doesn't exist then the corresponding value in the\n   * returned array will be `undefined`.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(values, keys) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(keys, error) {\n   *   // uh oh!\n   * };\n   * db.getMany( arrayOfKeys, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.getMany( arrayOfKeys ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Array} keys\n   *         The keys of the key-value pairs to get.\n   * @param  {Stork~getManySuccess} [success]\n   *         THe function to invoke with the values found.\n   * @param  {Stork~getManyFailure} [failure]\n   *         The function to invoke if there was a problem getting values.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  getMany: function(keys, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.getMany, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var gotten = 0;\n    var values = [];\n\n    var addValue = function(i)\n    {\n      return function(value)\n      {\n        values[ i ] = value;\n\n        if ( ++gotten === keys.length )\n        {\n          promise.$success( [values, keys] );\n        }\n      };\n    };\n    var onFailure = function(e)\n    {\n      promise.$failure( [keys, e] );\n    };\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.get( keys[ i ], addValue( i ), onFailure );\n    }\n\n    return promise;\n  },\n\n  /**\n   * The format of success callback for {@link Stork#get}.\n   * \n   * @callback Stork~getSuccess\n   * @param {Any} value\n   *        The value associated to the given key or `undefined` if one was not\n   *        found.\n   * @param {Any} key\n   *        The key of the key-value pair that was successfully found.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#get}.\n   * \n   * @callback Stork~getFailure\n   * @param {Any} key\n   *        The key of the key-value pair that was unsuccessfully gotten.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Gets the value for the given key and returns it to the callback. If the\n   * key doesn't exist then `undefined` is given to the callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(value, key) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(key, error) {\n   *   // uh oh!\n   * };\n   * db.get( key, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.get( key ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Any} key\n   *         The key of the key-value pair to get.\n   * @param  {Stork~getSuccess} [success]\n   *         The function to invoke if a value is successfully found or not found.\n   * @param  {Stork~getFailure} [failure]\n   *         The function to invoke if there was a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  get: function (key, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.get, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var rawKey;\n\n    try\n    {\n      rawKey = this.encode( key );\n    }\n    catch (e)\n    {\n      promise.$failure( [key, e] );\n    }\n\n    if ( promise.$pending() )\n    {\n      if ( this.cache.has( rawKey ) )\n      {\n        promise.$success( [this.cache.get( rawKey ), key] );\n      }\n      else if ( this.loaded )\n      {\n        promise.$success( [undefined, key] );\n      }\n      else\n      {\n        this._get( key, rawKey, promise );\n      }\n    }\n\n    return promise;\n  },\n\n  _get: function(key, rawKey, promise)\n  {\n    throw 'Stork._get is not implemented';\n  },\n\n  /**\n   * The format of success callback for {@link Stork#destroy}.\n   * \n   * @callback Stork~destroySuccess\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#destroy}.\n   * \n   * @callback Stork~destroyFailure\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Removes all key-value pairs and invokes the callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function() {\n   *   // DESTROYED!\n   * };\n   * var onFailureFunc = function(error) {\n   *   // uh oh!\n   * };\n   * db.destroy(); // I don't care about whether it succeeds or fails\n   * db.destroy( onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.destroy().then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Stork~destroySuccess} [success]\n   *         The function invoked when all key-value pairs are removed.\n   * @param  {Stork~destroyFailure} [failure]\n   *         The function invoked if there was a problem removing all key-value\n   *         pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  destroy: function(success, failure) \n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.destroy, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    this._destroy( promise );\n\n    return promise;\n  },\n\n  _destroy: function(promise)\n  {\n    throw 'Stork._destroy is not implemented';\n  },\n\n  /**\n   * The format of success callback for {@link Stork#save}.\n   * \n   * @callback Stork~saveSuccess\n   * @param {Object} record\n   *        The record that successfully saved.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#save}.\n   * \n   * @callback Stork~saveFailure\n   * @param {Object} record\n   *        The record that failed to save.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Saves an `Object` record and returns the saved record to the callback. The \n   * record is the value in the key-value pair and the key is pulled from the \n   * record based on the options passed into the {@link Stork#init} function. \n   * The property used as the key is `this.key` and by default is `id`. If a key \n   * isn't specified in a record then a UUID is used and placed in the object.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(record) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(record, error) {\n   *   // uh oh!\n   * };\n   * db.save( record ); // I don't care about whether it succeeds or fails\n   * db.save( record, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.save( record ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Object} record\n   *         The record to save.\n   * @param  {Stork~saveSuccess} [success]\n   *         The function to invoke when the record is successfully saved.\n   * @param  {Stork~saveFailure} [failure]\n   *         The function to invoke if the record fails to save.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  save: function(record, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.save, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var keyName = this.key;\n    var key = record[ keyName ];\n\n    if ( undef( key ) ) \n    {\n      key = record[ keyName ] = uuid();\n    }\n\n    var onSuccess = function(key, value)\n    {\n      promise.$success( [value] );\n    };\n    var onFailure = function(key, value, error)\n    {\n      promise.$failure( [value, error] );\n    };\n\n    this.put( key, record, onSuccess, onFailure );\n\n    return promise;\n  },\n\n  /**\n   * The format of success callback for {@link Stork#batch}.\n   * \n   * @callback Stork~batchSuccess\n   * @param {Array} records\n   *        The records successfully saved.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#batch}.\n   * \n   * @callback Stork~batchFailure\n   * @param {Array} records\n   *        The records unsuccessfully saved.\n   * @param {Number} recordsSaved\n   *        The number of records that successfully saved.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Saves an array of `Object` records and returns the records saved to the \n   * callback. The record is the value in the key-value pair and the key is \n   * pulled from the record based on the options passed into the \n   * {@link Stork#init} function. The property used as the key is `this.key` and\n   * by default is `id`. If a key isn't specified in a record then a UUID is \n   * used and placed in the object.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(records) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(records, recordsSaved, error) {\n   *   // uh oh!\n   * };\n   * db.batch( records ); // I don't care about whether it succeeds or fails\n   * db.batch( records, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.batch( records ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Array} records\n   *         The array of objects to save.\n   * @param  {Stork~batchSuccess} [success]\n   *         The function to invoke when all records are successfully saved.\n   * @param  {Stork~batchFailure} [failure]\n   *         The function to invoke if any of the records failed to save.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  batch: function(records, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.batch, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var saves = 0;\n\n    var onSaved = function() \n    {\n      if ( ++saves === records.length ) \n      {\n        promise.$success( [records] );\n      }\n    }\n    var setFailure = function(e) \n    {\n      promise.$failure( [records, saves, e] );\n    };\n\n    for (var i = 0; i < records.length && !promise.state; i++)\n    {\n      this.save( records[ i ], onSaved, setFailure );\n    }\n\n    return promise;\n  },\n\n  /**\n   * The format of success callback for {@link Stork#put}.\n   * \n   * @callback Stork~putSuccess\n   * @param {Any} key\n   *        The key to add or update.\n   * @param {Any} value\n   *        The value to add or update.\n   * @param {Any} previousValue\n   *        The previous value for the key if it exists in the cache.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#put}.\n   * \n   * @callback Stork~putFailure\n   * @param {Any} key\n   *        The key that failed to be added or updated.\n   * @param {Any} value\n   *        The value that failed to be added or updated.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Adds or updates the value mapped by the given key and returns the key\n   * and value placed to the callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(key, value, previousValue) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(key, value, error) {\n   *   // uh oh!\n   * };\n   * db.put( key, value ); // I don't care about whether it succeeds or fails\n   * db.put( key, value, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.put( key, value ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Any} key\n   *         The key to add or update.\n   * @param  {Any} value\n   *         The value to add or update.\n   * @param  {Stork~putSuccess} [success]\n   *         The function to invoke when the key-value pair is successfully \n   *         added or updated.\n   * @param  {Stork~putFailure} [failure]\n   *         The function to invoke if there was a problem putting the key-value\n   *         pair.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  put: function(key, value, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.put, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var rawKey, rawValue;\n\n    try\n    {\n      rawKey = this.encode( key );\n      rawValue = toJson( value );   \n    }\n    catch (e)\n    {\n      promise.$failure( [key, value, e] );\n    }\n\n    if ( promise.$pending() )\n    {\n      this._put( key, value, rawKey, rawValue, promise );\n    }\n\n    return promise;\n  },\n\n  _put: function(key, value, rawKey, rawValue, promise)\n  {\n    throw 'Stork._put is not implemented';\n  },\n\n  /**\n   * The format of success callback for {@link Stork#remove}.\n   * \n   * @callback Stork~removeSuccess\n   * @param {Any} value\n   *        The value removed or `undefined` if the key didn't exist.\n   * @param {Any} key\n   *        The key of the key-value pair that was removed.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#remove}.\n   * \n   * @callback Stork~removeFailure\n   * @param {Any} key\n   *        The key of the key-value pair that failed to be removed.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Removes the key-value pair for the given key and returns the removed value\n   * to the callback if on existed.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(value, key) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(key, error) {\n   *   // uh oh!\n   * };\n   * db.remove( key ); // I don't care about whether it succeeds or fails\n   * db.remove( key, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.remove( key ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Any} key\n   *         The key of the key-value pair to remove.\n   * @param  {Stork~removeSuccess} [success]\n   *         The function to invoke then the key is removed or doesn't exist.\n   * @param  {Stork~removeFailure} [failure]\n   *         The function to invoke if there was a problem removing the key.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  remove: function(key, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.remove, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var rawKey;\n\n    try\n    {\n      rawKey = this.encode( key );\n    }\n    catch (e)\n    {\n      promise.$failure( [key, e] );\n    }\n\n    if ( promise.$pending() )\n    {\n      if ( this.loaded && !this.cache.has( rawKey ) )\n      {\n        promise.$success( [undefined, key] );\n      }\n      else\n      {\n        var value = this.cache.get( rawKey );\n\n        this._remove( key, rawKey, value, promise );      \n      }\n    }\n\n    return promise;\n  },\n\n  _remove: function(key, rawKey, value, promise)\n  {\n    throw 'Stork._remove is not implemented';\n  },\n\n  /**\n   * The format of success callback for {@link Stork#removeMany}.\n   * \n   * @callback Stork~removeManySuccess\n   * @param {Array} values\n   *        The values removed in the same order of the keys. If a key didn't\n   *        exist then the corresponding value in the array will be `undefined`.\n   * @param {Array} keys\n   *        The corresponding removed keys.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#removeMany}.\n   * \n   * @callback Stork~removeManyFailure\n   * @param {Array} values\n   *        The values removed in the same order of the given keys.\n   * @param {Number} removed\n   *        The number of records removed before the error occurred.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Removes multiple key-value pairs and returns the values removed to the \n   * given callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(values, keys) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(values, removed, error) {\n   *   // uh oh!\n   * };\n   * db.removeMany( keys ); // I don't care about whether it succeeds or fails\n   * db.removeMany( keys, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.removeMany( keys ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Array} keys\n   *         The array of keys to remove.\n   * @param  {Stork~removeManySuccess} [success]\n   *         The function to invoke once all matching key-value pairs are \n   *         removed, with the values removed.\n   * @param  {Stork~removeManyFailure} [failure]\n   *         The function to invoke if there was a problem removing any of the\n   *         key-value pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  removeMany: function(keys, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.removeMany, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var values = [];\n    var removed = 0;\n\n    var addValue = function(i)\n    {\n      return function(value) \n      {\n        values[ i ] = value;\n\n        if ( ++removed === keys.length ) \n        {\n          promise.$success( [values, keys] );\n        }\n      }\n    };\n    var setFailure = function(e) \n    {\n      promise.$failure( [values, removed, e] );\n    };\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.remove( keys[ i ], addValue( i ), setFailure )\n    }\n\n    return promise;\n  },\n\n  /**\n   * The format of success callback for {@link Stork#each}.\n   * \n   * @callback Stork~eachSuccess\n   * @param {Any} value\n   *        The value of the current key-value pair.\n   * @param {Any} key\n   *        The key of the current key-value pair.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#each}.\n   * \n   * @callback Stork~eachFailure\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Returns every key-value pair individually to the given callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onPairFunc = function(value, key) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(error) {\n   *   // uh oh!\n   * };\n   * db.each( onPairFunc ); // I don't care about whether it fails\n   * db.each( onPairFunc, onFailureFunc ); // listen for success & failure\n   * ```\n   * \n   * @param  {Stork~eachSuccess} callback\n   *         The function to invoke for each key-value pair.\n   * @param  {Stork~eachFailure} [failure]\n   *         The function to invoke if there was a problem iterating the \n   *         key-value pairs.\n   * @return {Stork} -\n   *         The reference to this Stork instance.\n   */\n  each: function(callback, failure)\n  {\n    if ( !isFunc( callback ) || this.handlePending( this.each, arguments ) ) \n    {\n      return this;\n    }\n\n    var stork = this;\n    var iterate = function(values, keys)\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        callback.call( stork, values[ i ], keys[ i ] );\n      }\n    };\n\n    if ( this.loaded )\n    {\n      var keys = this.cache.okeys;\n      var values = this.cache.values;\n\n      iterate( values, keys );\n    }\n    else\n    {\n      this.reload( iterate, failure );\n    }\n\n    return this;\n  },\n\n  /**\n   * The format of success callback for {@link Stork#size}.\n   * \n   * @callback Stork~sizeSuccess\n   * @param {Number} count\n   *        The total number of key-value pairs.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#size}.\n   * \n   * @callback Stork~sizeFailure\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Returns the number of key-value pairs to the success callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(count) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(error) {\n   *   // uh oh!\n   * };\n   * db.size( onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.size().then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Stork~sizeSuccess} [success]\n   *         The function to invoke with the number of key-value pairs.\n   * @param  {Stork~sizeFailure} [failure]\n   *         The function to invoke if there was a problem determining the\n   *         number of key-value pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  size: function(success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.size, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    if ( this.loaded )\n    {\n      promise.$success( [this.cache.size()] );\n    }\n    else\n    {\n      this._size( promise );\n    }\n\n    return promise;\n  },\n\n  _size: function(promise)\n  {\n    throw 'Stork._size is not implemented';\n  },\n  \n  /**\n   * The format of success callback for {@link Stork#all}.\n   * \n   * @callback Stork~allSuccess\n   * @param {Array} values\n   *        An array of all values stored. This should not be modified.\n   * @param {Array} keys\n   *        An array of all keys stored. This should not be modified.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#all}.\n   * \n   * @callback Stork~allFailure\n   * @param {Any} error\n   *        The error that was thrown.\n   */\n\n  /**\n   * Returns all key-value pairs to the success callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(values, keys) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(error) {\n   *   // uh oh!\n   * };\n   * db.all( onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.all().then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Stork~allSuccess} [success]\n   *         The function to invoke with all the key-value pairs.\n   * @param  {Stork~allFailure} [failure]\n   *         The function to invoke if this Stork was unable to return all of the key-value pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  all: function(success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.all, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var returnAll = function(values, keys)\n    {\n      promise.$success( [values, keys] );\n    };\n    var onFailure = function(error)\n    {\n      promise.$failure( [error] );\n    };\n\n    if ( this.loaded )\n    {\n      var keys = this.cache.okeys;\n      var values = this.cache.values;\n\n      returnAll( values, keys );\n    }\n    else\n    {\n      this.reload( returnAll, onFailure );\n    }\n\n    return promise;\n  }\n\n};\n\n","\n/**\n * Instantiates a new Promise. \n *\n * @constructor\n * @memberOf Stork\n * @param {Object} context\n *        The `this` to apply to the success, failure, and error callbacks.\n * @param {function} [success]\n *        A success callback to add to be invoked.\n * @param {function} [failure]\n *        A failure callback to add to be invoked.\n * @param {Stork.Promise} [root]\n *        The root promise, if one exists.\n */\nfunction Promise(context, success, failure, root)\n{\n  /**\n   * The `this` to apply to the callbacks.\n   * \n   * @type {Object}\n   */\n  this.context = context;\n\n  /**\n   * The root promise in the chain of promises.\n   * \n   * @type {Promise}\n   */\n  this.root = root || this;\n\n  /**\n   * The next promise in the chain of promises.\n   * \n   * @type {Promise}\n   */\n  this.next = null;\n\n  /**\n   * The first valid promise returned from a success callback.\n   * @private\n   * \n   * @type {Promise}\n   */\n  this.nextFromSuccess = null;\n\n  /**\n   * The current state of this promise.\n   * \n   * @type {Number}\n   * @default Promise.PENDING\n   */\n  this.state = Promise.PENDING;\n\n  /**\n   * An array of success callbacks to invoke when the promise is marked as\n   * successful.\n   * \n   * @type {function[]}\n   */\n  this.successes = [];\n\n  /**\n   * An array of failure callbacks to invoke when the promise is marked as\n   * failed.\n   * \n   * @type {function[]}\n   */\n  this.failures = [];\n\n  /**\n   * An array of error callbacks stored at the root promise.\n   * \n   * @type {function[]}\n   */\n  this.errors = [];\n\n  /**\n   * An array of arguments that are to be passed to the success or failure \n   * callbacks.\n   * \n   * @type {Array}\n   */\n  this.args = null;\n\n  // Queue the passed in success & failure callbacks.\n  this.$queue( success, failure );\n}\n\n/**\n * Promise is awaiting for a success or failure notification.\n * @type {Number}\n */\nPromise.PENDING = 0;\n\n/**\n * Promise has been marked as a failure.\n * @type {Number}\n */\nPromise.FAILURE = 1;\n\n/**\n * Promise has been marked as a success.\n * @type {Number}\n */\nPromise.SUCCESS = 2;\n\n/**\n * Promise has been marked as a success and the next promise has been notified.\n * @type {Number}\n */\nPromise.CHAINED = 3;\n\nPromise.prototype = \n{\n  /**\n   * Adds success and optionally a failure callback to be invoked when the \n   * promised operation completes. The success callback can return a promise \n   * to chain promises.\n   * \n   * @param  {function} success\n   *         The function to invoke with the success arguments.\n   * @param  {function} [failure]\n   *         The function to invoke with the failure arguments.\n   * @return {Stork.Promise} -\n   *         The next promise to invoke when the returned promise from the \n   *         success callback finishes.\n   */\n  then: function(success, failure)\n  {\n    this.$queue( success, failure );  \n\n    if ( !this.next )\n    {\n      this.next = new Promise( this.context, undefined, undefined, this );\n    }\n   \n    if ( this.state & Promise.SUCCESS ) \n    {\n      this.$handleSuccesses();\n    } \n    else if ( this.state === Promise.FAILURE ) \n    {\n      this.$handleFailures();\n    }\n\n    return this.next;\n  },\n\n  /**\n   * Adds a generic error to be called if any of the promises in the chain have\n   * failed.\n   * \n   * @param  {function} error\n   *         A function to invoke if any of the promises fail.\n   * @return {Stork.Promise} -\n   *         A reference to this promise.\n   */\n  error: function(error)\n  {\n    if ( isFunc( error ) )\n    {\n      this.root.errors.push( error );\n\n      if ( this.state === Promise.FAILURE )\n      {\n        this.$handleFailures();\n      }  \n    }\n\n    return this;\n  },\n\n  // When the given promise finishes it will finish this promise as well.\n  $bindTo: function(to, replacementArguments)\n  {\n    var from = this;\n\n    to.then(\n      function() {\n        from.context = to.context;\n        from.$success( coalesce( replacementArguments, to.args ) );\n      },\n      function() {\n        from.context = to.context;\n        from.$failure( coalesce( replacementArguments, to.args ) );\n      })\n    ;\n  },\n\n  // Returns true if the promise has yet to finish.\n  $pending: function()\n  {\n    return this.state === Promise.PENDING;\n  },\n\n  // Adds a success and/or failure callback to this promise.\n  $queue: function(success, failure)\n  {\n    if ( isFunc( success ) ) this.successes.push( success );\n    if ( isFunc( failure ) ) this.failures.push( failure );\n  },\n\n  // Executes all successes currently on the promise.\n  $handleSuccesses: function()\n  {\n    var succs = this.successes;\n    for (var i = 0; i < succs.length; i++) \n    {\n      var s = succs[ i ];\n      var result = s.apply( this.context, this.args );\n\n      if ( result instanceof Promise && !this.nextFromSuccess ) \n      {\n        this.nextFromSuccess = result;\n      }\n    }\n\n    succs.length = 0;\n\n    this.$handleNext();\n  },\n\n  // If a next promise is given and one of the success callbacks return a \n  // promise, this promise is bound to the returned promise to complete the \n  // link in the chain.\n  $handleNext: function()\n  {\n    var next = this.next;\n    var returned = this.nextFromSuccess;\n\n    if (next && returned && this.state === Promise.SUCCESS)\n    {\n      next.$bindTo( returned );\n      this.state = Promise.CHAINED;\n    }\n  },\n\n  // Marks this promise as a success if the promise hasn't finished yet.\n  $success: function(args)\n  {\n    if ( this.state === Promise.PENDING ) \n    {\n      this.args = args || [];\n      this.state = Promise.SUCCESS;\n      this.$handleSuccesses();\n    }\n  },\n\n  // Executes all failures currently on the promise.\n  $handleFailures: function()\n  {\n    var fails = this.failures;\n    for (var i = 0; i < fails.length; i++) \n    {\n      fails[ i ].apply( this.context, this.args );\n    }\n    fails.length = 0;\n\n    var errors = this.root.errors;\n    var errorArgument = [ this.args[ this.args.length - 1 ] ];\n    for (var i = 0; i < errors.length; i++)\n    {\n      errors[ i ].apply( this.context, errorArgument );\n    }\n    errors.length = 0;\n  },\n\n  // Marks this promise as a failure if the promise hasn't finished yet.\n  $failure: function(args)\n  {\n    if ( this.state === Promise.PENDING ) \n    {\n      this.args = args || [];\n      this.state = Promise.FAILURE;\n      this.$handleFailures();\n    }\n  }\n\n};","\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Stork\n * @param {Stork.FastMap|object} [map]\n */\nfunction FastMap(map)\n{\n  this.reset();\n  this.putMap( map );\n}\n\nFastMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {Stork.FastMap}\n   */\n  reset: function()\n  {\n    /**\n     * An array of the values in this map.\n     * @member {Array}\n     */\n    this.values = [];\n\n    /**\n     * An array of the keys in this map.\n     * @type {Array}\n     */\n    this.keys = [];\n\n    /**\n     * An array of the original keys in this map.\n     * @type {Array}\n     */\n    this.okeys = [];\n\n    /**\n     * An object of key to index mappings.\n     * @type {Object}\n     */\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @param {K} originalKey\n   * @return {Stork.FastMap}\n   */\n  put: function(key, value, originalKey)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n      this.okeys.push( originalKey );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   *\n   * @param {FastMap|Object} map\n   * @return {Stork.FastMap}\n   */\n  putMap: function(map)\n  {\n    if (map instanceof FastMap)\n    {\n      var keys = map.keys;\n      var values = map.values;\n      var okeys = map.okeys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        this.put( keys[ i ], values[ i ], okeys[ i ] );\n      }\n    }\n    else if ( isObject( map ) )\n    {\n      for (var key in map)\n      {\n        this.put( key, map[ key ], key );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Stork.FastMap}\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Stork.FastMap}\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n    var lastOkey = this.okeys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.okeys[ index ] = lastOkey; \n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   *\n   * @param {String} key\n   * @return {Number}\n   */\n  indexOf: function(key)\n  {\n    return coalesce( this.indices[ key ], -1 );\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns whether the given input has overlap with keys in this map.\n   *\n   * @param {FastMap|Object} map\n   * @return {Boolean}\n   */\n  hasOverlap: function(map)\n  {\n    var keys = this.keys;\n    var indices = map.indices;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      if ( keys[i] in indices )\n      {\n        return true;\n      }\n    }\n   \n    return false;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {Stork.FastMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n      swap( this.okeys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Stork.FastMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          swap( map.okeys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {Stork.FastMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0; i <= right; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\n/**\n * An array of all plugin `function`s invoked on a Stork instance when it's created.\n * \n * @type {Array}\n * @see {@link Stork.plugin}\n */\nStork.plugins = [];\n\n/**\n * Adds a plugin function to be invoked on every Stork instance that's created.\n * Each plugin function is invoked after an adapter is chosen and integrated,\n * but before the {@link Stork#init} function is called.\n *\n * *Example*\n * ```javascript\n * Stork.plugin(function(stork) {\n *   var oldPut = stork.put;\n *   stork.put = function(key, value, success, failure) {\n *     // before put\n *     var promise = oldPut.apply( this, arguments );\n *     // after put, listen to promise?\n *     return promise;\n *   };\n * });\n * ```\n * \n * @param  {Stork~plugin} definition \n *         The function invoked on every Stork instance.\n * @return {Stork} -\n *         The Stork namespace.\n */\nStork.plugin = function(definition)\n{\n  if ( isFunc( definition ) ) \n  {\n    Stork.plugins.push( definition ); \n  }\n\n  return Stork;\n};\n\n/**\n * @callback Stork~plugin\n * @param {Stork} stork The Stork instance to run the plugin on.\n */\n\n/**\n * An array of adapters available for implementing a Stork instance. Each item\n * in the array is an object with three properties: `String` name, `Number` \n * priority, and `Object` definition.\n * \n * @type {Array}\n * @see {@link Stork.adapter}\n */\nStork.adapters = [];\n\n/**\n * Adds an adapter available for Stork to use if it's supported.\n *\n * *Example*\n * ```javascript\n * Stork.adapter('myadapter', 7, {\n *   valid: function() { ... },\n *   init: function(options, success, failure) { ... },\n *   reload: function(success, failure) { ... },\n *   _get: function(key, rawKey, promise) { ... },\n *   _destroy: function(promise) { ... },\n *   _put: function(key, value, rawKey, rawValue, promise) { ... },\n *   _remove: function(key, rawKey, value, promise) { ... },\n *   _size: function(promise) { ... }\n * });\n * ```\n * \n * @param  {String} name       \n *         The name of the adapter. Must be unique.\n * @param  {Number} priority\n *         The priority of this adapter. The higher the value the earlier\n *         it's checked for support and is used by Stork instances.\n * @param  {function|Object} definition \n *         The definition of the adapter which is either an object of methods \n *         to overwrite for the Stork instance, or a function which returns a \n *         similar object.\n * @return {Stork} - \n *         The Stork namespace.\n */\nStork.adapter = function(name, priority, definition)\n{\n  Stork.adapters.push(\n  {\n    name: name,\n    priority: priority,\n    definition: isFunc( definition ) ? definition() : definition\n  });\n\n  return Stork;\n};","Stork.plugin((function()\n{\n\n  /**\n   * The format of success callback for aggregation functions.\n   * \n   * @callback Stork~aggregateSuccess\n   * @param {Number} aggregatedValue\n   *        The result of the aggregation function.\n   */\n\n  /**\n   * The format of failure callback for aggregation functions.\n   * \n   * @callback Stork~aggregateFailure\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n  \n  /**\n   * The format of an accumulation callback for aggregation functions.\n   *\n   * @callback Stork~aggregateAccumulate\n   * @param {Any} value\n   *        The value to process for accumulation.\n   */\n  \n  /**\n   * The format of an accumulation callback for aggregation functions.\n   *\n   * @callback Stork~aggregateResult\n   * @return {Any}\n   *         The result of the accumulated values.\n   */\n\n  /**\n   * Performs an aggregation on key-value pairs where the value is an `Object` \n   * which may have a specific property to aggregate. The result of the \n   * aggregation is returned to the callback.\n   *\n   * This is part of the aggregation plugin.\n   * \n   * @memberOf Stork#\n   * @param  {String} property\n   *         The property on the object to pass to the accumulation function.\n   * @param  {Stork~aggregateAccumulate} accumulate\n   *         The function to invoke with the value of the property.\n   * @param  {Stork~aggregateResult} getResult\n   *         The function to call at the end to returned the aggregated value.\n   * @param  {Stork~aggregateSuccess} [success]\n   *         The function to invoke when a value is successfully aggregated.\n   * @param  {Stork~aggregateSuccess} [failure]\n   *         The function to invoke if there's a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function aggregate(property, accumulate, getResult, promise)\n  {\n    var onSuccess = function(values, keys)\n    {\n      var returnedValue = undefined;\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var v = values[ i ];\n\n        if (isObject( v ) && property in v)\n        {\n          accumulate( v[ property ] );\n        }\n      }\n\n      promise.$success( [ getResult() ] )\n    };\n    var onFailure = function(e)\n    {\n      promise.$failure( [e] );\n    };\n\n    this.all( onSuccess, onFailure );\n  }\n\n  /**\n   * Returns the number of values that are objects and have the specified \n   * property to the callback.\n   *\n   * This is part of the aggregation plugin.\n   *\n   * *Usage*\n   * ```javascript\n   * db.count('name', function(count) {\n   *   // count = the number of objects with the property 'name'\n   * });\n   * ```\n   * \n   * @memberOf Stork#\n   * @param  {String} property\n   *         The property on the object to look for.\n   * @param  {Stork~aggregateSuccess} [success]\n   *         The function to invoke with the number of values with the property.\n   * @param  {Stork~aggregateSuccess} [failure]\n   *         The function to invoke if there's a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function count(property, promise)\n  {\n    var total = 0;\n\n    var accumulate = function(v)\n    {\n      total++;\n    };\n    var getResult = function()\n    {\n      return total;\n    };\n\n    aggregate( property, accumulate, getResult, promise );\n  }\n\n  /**\n   * Returns the sum of a set of values taken from a property on all `Object` \n   * values to the callback.\n   *\n   * This is part of the aggregation plugin.\n   * \n   * *Usage*\n   * ```javascript\n   * db.sum('kills', function(sum) {\n   *   // sum = total of all kills\n   * });\n   * ```\n   * \n   * @memberOf Stork#\n   * @param  {String} property\n   *         The property on the object to sum.\n   * @param  {Stork~aggregateSuccess} [success]\n   *         The function to invoke with the sum.\n   * @param  {Stork~aggregateSuccess} [failure]\n   *         The function to invoke if there's a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function sum(property, promise)\n  {\n    var summing = 0;\n\n    var accumulate = function(v)\n    {\n      if (isNumber(v))\n      {\n        summing += v;\n      }\n    };\n    var getResult = function()\n    {\n      return summing;\n    };\n\n    aggregate( property, accumulate, getResult, promise );\n  }\n\n\n  /**\n   * Returns the average of a set of values taken from a property on all `Object` \n   * values to the callback.\n   *\n   * This is part of the aggregation plugin.\n   * \n   * *Usage*\n   * ```javascript\n   * db.avg('age', function(avg) {\n   *   // avg = the average age\n   * });\n   * ```\n   * \n   * @memberOf Stork#\n   * @param  {String} property\n   *         The property on the object to average.\n   * @param  {Stork~aggregateSuccess} [success]\n   *         The function to invoke with the average.\n   * @param  {Stork~aggregateSuccess} [failure]\n   *         The function to invoke if there's a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function avg(property, promise)\n  {\n    var summing = 0;\n    var total = 0;\n\n    var accumulate = function(v)\n    {\n      if (isNumber(v))\n      {\n        summing += v;\n        total++;\n      }\n    };\n    var getResult = function()\n    {\n      return summing / total;\n    };\n\n    aggregate( property, accumulate, getResult, promise );\n  }\n\n  /**\n   * Returns the minimum value of a set of values taken from a property on all \n   * `Object` values to the callback.\n   *\n   * This is part of the aggregation plugin.\n   * \n   * *Usage*\n   * ```javascript\n   * db.min('age', function(min) {\n   *   // min = the minimum age\n   * });\n   * ```\n   * \n   * @memberOf Stork#\n   * @param  {String} property\n   *         The property on the object to find the minimum value of.\n   * @param  {Stork~aggregateSuccess} [success]\n   *         The function to invoke with the minimum value.\n   * @param  {Stork~aggregateSuccess} [failure]\n   *         The function to invoke if there's a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function min(property, promise)\n  {\n    var minValue = Number.MAX_VALUE;\n\n    var accumulate = function(v)\n    {\n      if (isNumber(v))\n      {\n        minValue = Math.min( minValue, v );\n      }\n    };\n    var getResult = function()\n    {\n      return minValue;\n    };\n\n    aggregate( property, accumulate, getResult, promise );\n  }\n\n  /**\n   * Returns the maximum value of a set of values taken from a property on all \n   * `Object` values to the callback.\n   *\n   * This is part of the aggregation plugin.\n   * \n   * *Usage*\n   * ```javascript\n   * db.max('age', function(max) {\n   *   // max = the maximum age\n   * });\n   * ```\n   * \n   * @memberOf Stork#\n   * @param  {String} property\n   *         The property on the object to find the maximum value of.\n   * @param  {Stork~aggregateSuccess} [success]\n   *         The function to invoke with the maximum value.\n   * @param  {Stork~aggregateSuccess} [failure]\n   *         The function to invoke if there's a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function max(property, promise)\n  {\n    var maxValue = Number.MAX_VALUE;\n\n    var accumulate = function(v)\n    {\n      if (isNumber(v))\n      {\n        maxValue = Math.min( maxValue, v );\n      }\n    };\n    var getResult = function()\n    {\n      return maxValue;\n    };\n\n    aggregate( property, accumulate, getResult, promise );\n  }\n\n  var METHODS = \n  {\n    aggregate:  $promise( 'aggregate', aggregate ),\n    count:      $promise( 'count', count ),\n    sum:        $promise( 'sum', sum ),\n    avg:        $promise( 'avg', avg ),\n    min:        $promise( 'min', min ),\n    max:        $promise( 'max', max )\n  }; \n\n  return function(stork)\n  {\n    copy( METHODS, stork );\n  };\n\n})());\n\n\n  ","Stork.plugin((function()\n{\n\n  /**\n   * The format of the condition callback for {@link Stork#where}.\n   * \n   * @callback Stork~where\n   * @param {Any} value\n   *        The value to inspect and return true if you want it returned.\n   * @param {Any} key\n   *        The key to inspect and return true if you want it returned.\n   */\n  \n  /**\n   * The format of success callback for {@link Stork#where}.\n   * \n   * @callback Stork~whereSuccess\n   * @param {Array} values\n   *        The values matching the given condition.\n   * @param {Array} keys\n   *        The keys matching the given condition.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#where}.\n   * \n   * @callback Stork~whereFailure\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Returns a subset of key-value pairs that match a condition function to the \n   * callback.\n   *\n   * This is part of the query plugin.\n   *\n   * *Usage*\n   * ```javascript\n   * var condition = function(value, key) {\n   *   // return true if key-value matches some condition\n   * };\n   * var onSuccessFunc = function(value, key) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(key, error) {\n   *   // uh oh!\n   * };\n   * db.where( condition, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.where( condition ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   *\n   * @memberOf Stork#\n   * @param  {Stork~where} condition\n   *         The function to invoke on each key-value pair to determine whether\n   *         that pair is included in the results.\n   * @param  {Stork~whereSuccess} [success]\n   *         The function to invoke with the matched key-value pairs.\n   * @param  {Stork~whereFailure} [failure]\n   *         The function to invoke if there was a problem retrieving the\n   *         key-value pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function where(condition, promise)\n  {\n    var onSuccess = function(values, keys)\n    {\n      var matchedKeys = [];\n      var matchedValues = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var v = values[ i ];\n        var k = keys[ i ];\n\n        if ( condition( v, k ) )\n        {\n          matchedValues.push( v );\n          matchedKeys.push( k );\n        }\n      }\n\n      promise.$success( [matchedValues, matchedKeys] );\n    };\n    var onFailure = function(e)\n    {\n      promise.$failure( [e] );\n    };\n\n    this.all( onSuccess, onFailure );\n  }\n\n  /**\n   * The format of success callback for {@link Stork#select}.\n   * \n   * @callback Stork~selectSuccess\n   * @param {Array} values\n   *        If columns is a string this is an array of values pulled from the\n   *        same property on all values that are objects. If columns is an array\n   *        this is an array of objects containing the properties that exist\n   *        in the columns array.\n   * @param {Array} keys\n   *        An array of the keys for pointing to the original values.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#select}.\n   * \n   * @callback Stork~selectFailure\n   * @param {String|Array} columns\n   *        The property you wanted to return or an array of properties to return.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n  \n  /**\n   * Returns column values (if columns is a string) or an array of objects of \n   * column values (if columns is an array) to the callback.\n   *\n   * This is part of the query plugin.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(values, keys) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(columns, error) {\n   *   // uh oh!\n   * };\n   * db.select( 'name', onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.select( ['name', 'id'] ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   *\n   * @memberOf Stork#\n   * @param  {String|Array} columns\n   *         The property you want to return or an array of properties to return.\n   * @param  {Stork~selectSuccess} [success]\n   *         The function to invoke with the selected properties.\n   * @param  {Stork~selectFailure} [failure]\n   *         The function to invoke if there was a problem selecting the columns.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function select(columns, promise)\n  {\n    var onSuccess = function(values, keys)\n    {\n      var results = [];\n      var resultKeys = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var v = values[ i ];\n\n        if ( isObject( v ) )\n        {\n          if ( isString( columns ) )\n          {\n            if ( columns in v )\n            {\n              results.push( v[ columns ] );\n              resultKeys.push( keys[ i ] );\n            }\n          }\n          else if ( isArray( columns ) )\n          {\n            var resultObject = {};\n            var resultColumns = 0;\n\n            for (var k = 0; k < columns.length; k++)\n            {\n              var c = columns[ k ];\n\n              if ( c in v )\n              {\n                resultObject[ c ] = v[ c ];\n                resultColumns++;\n              }\n            }\n\n            if ( resultColumns > 0 )\n            {\n              results.push( resultObject );\n              resultKeys.push( keys[ i ] );\n            }\n          }\n        }\n      }\n\n      promise.$success( [results, resultKeys] );\n    };\n    var onFailure = function(e)\n    {\n      promise.$failure( [columns, e] );\n    };\n\n    this.all( onSuccess, onFailure );\n  }\n\n  /**\n   * The format of the comparater for {@link Stork#sort}.\n   *\n   * @callback Stork~sortComparator\n   * @param {Any} a\n   *        The first value to compare.\n   * @param {Any} b\n   *        The second value to compare.\n   * @return {Number} -\n   *         A negative number if `a < b`, a positive number of `a > b` and 0\n   *         if `a == b`.\n   */\n\n  /**\n   * The format of success callback for {@link Stork#sort}.\n   * \n   * @callback Stork~sortSuccess\n   * @param {Array} values\n   *        The array of sorted values.\n   * @param {Array} keys\n   *        The array of sorted keys.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#sort}.\n   * \n   * @callback Stork~sortFailure\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n  \n  /**\n   * Sorts all key-value pairs and returns them to the callback. Next time the\n   * key-value pairs are iterated over they will be returned in the same order.\n   * The underlying structure should be considered unsorted anytime key-value\n   * pairs are updated, added, or removed.\n   *\n   * This is part of the query plugin.\n   *\n   * *Usage*\n   * ```javascript\n   * var compareFunc = function(a, b) {\n   *   // compare a & b and return a number\n   * };\n   * var onSuccessFunc = function(values, keys) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(error) {\n   *   // uh oh!\n   * };\n   * db.sort( compareFunc, false, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.sort( compareFunc ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   *\n   * @memberOf Stork#\n   * @param  {Stork~sortComparator} comparator\n   *         The function used to compare two values.\n   * @param  {Boolean} desc\n   *         If the key-value pairs should be in descending (reversed) order.\n   * @param  {Stork~sortSuccess} [success]\n   *         The function to invoke with the sorted values & keys.\n   * @param  {Stork~sortFailure} [failure]\n   *         The function to invoke if there was a problem sorting the pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function sort(comparator, desc, promise)\n  {\n    var onSuccess = function()\n    {\n      var cache = this.cache;\n\n      cache.sort( comparator );\n\n      if ( desc )\n      {\n        cache.reverse();\n      }\n\n      promise.$success( [cache.values, cache.okeys] );\n    };\n    var onFailure = function(e)\n    {\n      promise.$failure( [e] );\n    };\n\n    this.all( onSuccess, onFailure );\n  }\n\n  var METHODS = \n  {\n    where:  $promise( 'where', where ),\n    select: $promise( 'select', select ),\n    sort:   $promise( 'sort', sort )\n  }; \n\n  return function(stork)\n  {\n    copy( METHODS, stork );\n  };\n\n})());\n\n\n  ","\nStork.adapter('chrome-storage-local', 4, function()\n{\n  var store = window.chrome && chrome.storage ? chrome.storage.local : false;\n\n  function isError() \n  {\n    return chrome && chrome.runtime && chrome.runtime.lastError;\n  };\n\n  return {\n\n    encode: function(key)\n    {\n      return this.prefix + toJson( key );\n    },\n\n    decode: function(rawKey)\n    {\n      return fromJson( rawKey.substring( this.prefix.length ) );\n    },\n\n    valid: function() \n    {\n      if (!store) \n      {\n        return false;\n      }\n\n      try \n      {\n        var temp = Math.random();\n        var map = {};\n\n        map[ temp ] = temp;\n        store.set( map );\n        store.remove( temp );\n\n        return true;\n      } \n      catch (e) \n      {\n        return false;\n      }\n    },\n\n    init: function(options, success, failure) \n    {\n      var promise = new Promise( this, success, failure );\n      \n      this.prefix = coalesce( options.prefix, this.name + '-' );\n\n      if ( this.lazy )\n      {\n        this._finishInitialization( promise, [this] );\n      }\n      else\n      {\n        promise.$bindTo( this.reload(), [this] );\n      }\n\n      return promise;\n    },\n\n    reload: function(success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n      var stork = this;\n      var prefix = this.prefix;\n      var cache = new FastMap();\n\n      store.get( null, function(items)\n      {\n        if ( isError() )\n        {\n          promise.$failure( [isError()] );\n        }\n        else\n        {\n          for (var rawKey in items)\n          {\n            if ( rawKey.substring( 0, prefix.length ) === prefix )\n            {\n              cache.put( rawKey, items[ rawKey ], stork.decode( rawKey ) );\n            }\n          }\n\n          stork.cache = cache;\n          stork.loaded = true;\n\n          stork.finishReload( promise );\n        }\n\n      });\n\n      return promise;\n    },\n\n    _get: function(key, rawKey, promise)\n    {\n      store.get( rawKey, function(items)\n      {\n        if ( isError() )\n        {\n          promise.$failure( [key, isError()] );\n        }\n        else\n        {\n          if ( items.length )\n          {\n            var value = fromJson( items[0] );\n\n            promise.$success( [value, key] );\n          }\n          else\n          {\n            promise.$success( [undefined, key] );\n          }\n        }\n      });\n    },\n\n    _destroy: function(promise)\n    {\n      var stork = this;\n      var removeByKeys = function()\n      {\n        store.remove( this.cache.keys, function()\n        {\n          if ( isError() ) \n          {\n            promise.$failure( [isError()] );\n          }\n          else \n          {\n            stork.cache.reset();\n\n            promise.$success();\n          }\n        });\n      };\n      var onFailure = function(e)\n      {\n        promise.$failure( [e] );\n      };\n\n      if ( this.loaded )\n      {\n        removeByKeys();\n      }\n      else\n      {\n        this.reload( removeByKeys, onFailure );\n      }\n    },\n\n    _put: function(key, value, rawKey, rawValue, promise)\n    {\n      var stork = this;\n      var obj = {};\n\n      obj[ rawKey ] = value;\n\n      store.set( obj, function() \n      {\n        if ( isError() ) \n        {\n          promise.$failure( [key, value, isError()] );\n        } \n        else \n        {\n          var previousValue = stork.cache.get( rawKey );\n\n          stork.cache.put( rawKey, value, key );\n\n          promise.$success( [key, value, previousValue] );\n        }\n      });\n    },\n\n    _remove: function(key, rawKey, value, promise)\n    {  \n      var stork = this;\n\n      store.remove( rawKey, function()\n      {\n        if ( isError() )\n        {\n          promise.$failure( [key, isError()] );\n        }\n        else\n        {\n          stork.cache.remove( rawKey );\n\n          promise.$success( [value, key] );\n        }\n      });\n    },\n\n    _size: function(promise)\n    {\n      var onSuccess = function(keys, values)\n      {\n        promise.$success( [keys.length] );\n      };\n      var onFailure = function(e)\n      {\n        promise.$failure( [e] );\n      };\n\n      this.reload( onSuccess, onFailure );\n    }\n\n  }\n});","\nStork.adapter('local-storage', 3, function()\n{\n  var store = window.localStorage;\n\n  return {\n\n    encode: function(key)\n    {\n      return this.prefix + toJson( key );\n    },\n\n    decode: function(rawKey)\n    {\n      return fromJson( rawKey.substring( this.prefix.length ) );\n    },\n\n    valid: function()\n    {\n      if (!store) \n      {\n        return false;\n      }\n      try \n      {\n        var temp = Math.random();\n        store.setItem( temp, temp );\n        store.removeItem( temp );\n\n        return true;\n      } \n      catch (e) \n      {\n        return false;\n      }\n    },\n\n    init: function(options, success, failure) \n    {\n      var promise = new Promise( this, success, failure );\n\n      this.prefix = coalesce( options.prefix, this.name + '-' );\n\n      if ( this.lazy )\n      {\n        this.finishInitialization( promise, [this] );\n      }\n      else\n      {\n        promise.$bindTo( this.reload(), [this] );\n      }\n\n      return promise;\n    },\n\n    reload: function(success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n      var prefix = this.prefix;\n      var cache = new FastMap();\n\n      try\n      {\n        for (var i = 0; i < store.length; i++)\n        {\n          var rawKey = store.key( i );\n\n          if ( rawKey.substring( 0, prefix.length ) === prefix )\n          {\n            var rawValue = store.getItem( rawKey );\n            var value = fromJson( rawValue );\n            var key = this.decode( rawKey );\n\n            cache.put( rawKey, value, key );\n          }  \n        }\n\n        this.cache = cache;\n        this.loaded = true;\n      }\n      catch (e)\n      {\n        promise.$failure( [e] );\n      }\n\n      this.finishReload( promise );\n\n      return promise;\n    },\n\n    _destroy: function(promise)\n    {\n      var stork = this;\n      var prefix = this.prefix;\n      var removeByKeys = function( keys )\n      {\n        try\n        {\n          for (var i = 0; i < keys.length; i++)\n          {\n            store.removeItem( keys[ i ] );\n          }\n        }\n        catch (e)\n        {\n          promise.$failure( [e] );\n        }\n\n        if ( promise.$pending() )\n        {\n          stork.cache.reset();\n\n          promise.$success();\n        }\n      };\n      \n      if ( this.loaded )\n      {\n        removeByKeys( this.cache.keys );\n      }\n      else\n      {\n        var keys = [];\n\n        try\n        {\n          for (var i = 0; i < store.length; i++)\n          {\n            var rawKey = store.key( i );\n\n            if ( rawKey.substring( 0, prefix.length ) === prefix )\n            {\n              keys.push( rawKey );\n            }\n          }  \n        }\n        catch (e)\n        {\n          promise.$failure( [e] );\n        }\n\n        if ( promise.$pending() )\n        {\n          removeByKeys( keys );          \n        }\n      }\n    },\n\n    _get: function(key, rawKey, promise)\n    {\n      try\n      { \n        var rawValue = store.getItem( rawKey );\n\n        if ( rawValue === null )\n        {\n          promise.$success( [undefined, key] );\n        }\n        else\n        {\n          var value = fromJson( rawValue );\n\n          promise.$success( [value, key] ); \n        }\n      }\n      catch (e)\n      {\n        promise.$failure( [key, e] );\n      }\n    },\n\n    _put: function(key, value, rawKey, rawValue, promise)\n    {\n      try\n      {\n        store.setItem( rawKey, rawValue );        \n      }\n      catch (e)\n      {\n        promise.$failure( [key, value, e] );\n      }\n\n      if ( promise.$pending() )\n      {\n        var previousValue = this.cache.get( rawKey );\n\n        this.cache.put( rawKey, value, key );\n\n        promise.$success( [key, value, previousValue] );\n      }\n    },\n\n    _remove: function(key, rawKey, value, promise)\n    {\n      try\n      {\n        store.removeItem( rawKey );\n      }\n      catch (e)\n      {\n        promise.$failure( [key, e] );\n      }\n\n      if ( promise.$pending() )\n      {\n        this.cache.remove( rawKey );\n\n        promise.$success( [value, key] );\n      }\n    },\n\n    _size: function(promise)\n    {\n      var onSuccess = function(keys, values)\n      {\n        promise.$success( [keys.length] );\n      };\n      var onFailure = function(e)\n      {\n        promise.$failure( [e] );\n      };\n\n      this.reload( onSuccess, onFailure );\n    }\n\n  }\n});","\nStork.adapter('memory', 1, \n{\n  valid: function() \n  {\n    return true;\n  },\n\n  init: function(options, success, failure) \n  {\n    var promise = new Promise( this, success, failure );\n\n    this.loaded = true;\n    this.finishInitialization( promise, [this] );\n    \n    return promise;\n  },\n\n  reload: function(success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    this.finishReload( promise );\n\n    return promise;\n  },\n\n  _destroy: function(promise)\n  {\n    this.cache.reset();\n\n    promise.$success();\n  },\n\n  _put: function(key, value, rawKey, rawValue, promise)\n  {\n    var previousValue = this.cache.get( rawKey );\n\n    this.cache.put( rawKey, value, key );\n\n    promise.$success( [key, value, previousValue] );\n  },\n\n  _remove: function(key, rawKey, value, promise)\n  {\n    this.cache.remove( rawKey );\n\n    promise.$success( [value, key] );\n  }\n\n});","\nStork.adapter('webkit-sqlite', 5, function()\n{\n  var DATABASE_NAME = 'stork';\n\n  var SQL_CREATE = 'CREATE TABLE IF NOT EXISTS {0} (id TEXT PRIMARY KEY, value TEXT)';\n  var SQL_SELECT  = 'SELECT value FROM {0} WHERE id = ?';\n  var SQL_SELECT_ALL = 'SELECT id, value FROM {0}';\n  var SQL_SELECT_MANY = 'SELECT id, value FROM {0} WHERE id IN ({1})';\n  var SQL_INSERT = 'INSERT OR REPLACE INTO {0} (id, value) VALUES (?, ?)';\n  var SQL_DELETE = 'DELETE FROM {0} WHERE id = ?';\n  var SQL_COUNT = 'SELECT COUNT(*) as count FROM {0}';\n  var SQL_DESTROY = 'DELETE FROM {0}';\n  var SQL_DELETE_MANY = 'DELETE FROM {0} WHERE id IN ({1})';\n\n  function streplace(str, arr)\n  {\n    return str.replace(/\\{(\\d+)\\}/g, function(match, index)\n    {\n      index = parseInt( index );\n\n      if ( isNaN( index ) || index < 0 || index >= arr.length ) \n      {\n        return match;\n      }\n\n      return arr[ index ];\n    });\n  }\n\n  return {\n\n    valid: function() \n    {\n      return !!window.openDatabase;\n    },\n\n    init: function(options, success, failure) \n    {\n      var promise = new Promise( this, success, failure );\n\n      var databaseName = coalesce( options.database, DATABASE_NAME );\n      var databaseSize = coalesce( options.size, 65536 );\n      var databaseVersion = coalesce( options.version, '1.0' );\n\n      var stork = this;\n\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [error] );\n      };\n      var onTransactionForCreate = function(tx) \n      {\n        tx.executeSql( stork.SQL_CREATE, [], onCreate, onFailure );\n      };\n      var onCreate = function(tx, results) \n      {\n        if ( stork.lazy )\n        {\n          stork.finishInitialization( promise, [stork] );\n        }\n        else\n        {\n          promise.$bindTo( stork.reload(), [stork] );\n        }\n      };\n\n      this.SQL_CREATE     = streplace( SQL_CREATE, [this.name] );\n      this.SQL_SELECT     = streplace( SQL_SELECT, [this.name] );\n      this.SQL_SELECT_ALL = streplace( SQL_SELECT_ALL, [this.name] );\n      this.SQL_INSERT     = streplace( SQL_INSERT, [this.name] );\n      this.SQL_DELETE     = streplace( SQL_DELETE, [this.name] );\n      this.SQL_DESTROY    = streplace( SQL_DESTROY, [this.name] );\n      this.SQL_COUNT      = streplace( SQL_COUNT, [this.name] );\n\n      this.db = openDatabase( databaseName, databaseVersion, databaseName, databaseSize );\n      this.db.transaction( onTransactionForCreate, onFailure );\n      \n      return promise;\n    },\n\n    reload: function(success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n      var stork = this;\n\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [error] );\n      };\n      var onTransactionForSelect = function(tx) \n      {\n        tx.executeSql( stork.SQL_SELECT_ALL, [], onResults, onFailure );\n      };\n      var onResults = function(tx, results) \n      {\n        var cache = new FastMap();\n        try \n        {\n          for (var i = 0; i < results.rows.length; i++) \n          {\n            var record = results.rows[ i ];\n            var value = fromJson( record.value );\n            var key = fromJson( record.id );\n\n            cache.put( record.id, value, key );\n          }\n\n          stork.cache = cache;\n          stork.loaded = true;\n        }\n        catch (e) \n        {\n          promise.$failure( [e] );\n        }\n\n        stork.finishReload( promise );\n      };\n\n      this.db.readTransaction( onTransactionForSelect, onFailure );\n\n      return promise;\n    },\n\n    _get: function(key, rawKey, promise)\n    {\n      var stork = this;\n\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [key, error] );\n      };\n      var onTransaction = function(tx)\n      {\n        tx.executeSql( stork.SQL_SELECT, [rawKey], onResult, onFailure );\n      };\n      var onResult = function(tx, results)\n      {\n        var value = undefined;\n        try\n        {\n          var first = results.rows[ 0 ];\n\n          if ( first && first.value !== undefined )\n          {\n            value = fromJson( first.value );\n          }\n        }\n        catch (e)\n        {\n          promise.$failure( [key, e] );\n        }\n\n        if ( promise.$pending() )\n        {\n          if ( value !== undefined )\n          {\n            stork.cache.put( rawKey, value, key );\n\n            promise.$success( [value, key] );\n          }\n          else\n          {\n            promise.$success( [undefined, key] );\n          }\n        }\n      };\n\n      this.db.readTransaction( onTransaction, onFailure );\n    },\n\n    _destroy: function(promise)\n    {\n      var stork = this;\n\n      var onTransaction = function(tx) \n      {\n        tx.executeSql( stork.SQL_DESTROY, [], onSuccess, onFailure );\n      };\n      var onSuccess = function(tx, results) \n      {\n        stork.cache.reset();\n\n        promise.$success();\n      };\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [error] );\n      };\n\n      this.db.transaction( onTransaction, onFailure );\n    },\n\n    _put: function(key, value, rawKey, rawValue, promise)\n    {\n      var stork = this;\n      \n      var onTransaction = function(tx) \n      {\n        tx.executeSql( stork.SQL_INSERT, [rawKey, rawValue], onSuccess, onFailure );\n      };\n      var onSuccess = function(tx, results) \n      {\n        var previousValue = stork.cache.get( rawKey );\n\n        stork.cache.put( rawKey, value );\n\n        promise.$success( [key, value, previousValue] );\n      };\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [key, value, error] );\n      };\n\n      this.db.transaction( onTransaction, onFailure );\n    },\n\n    _remove: function(key, rawKey, value, promise)\n    {\n      var stork = this;\n      \n      var onTransaction = function(tx) \n      {\n        tx.executeSql( stork.SQL_DELETE, [rawKey], onSuccess, onFailure );\n      };\n      var onSuccess = function(tx, results) \n      {\n        stork.cache.remove( rawKey );\n\n        promise.$success( [value, key] );\n      };\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [key, error] );\n      };\n\n      this.db.transaction( onTransaction, onFailure );\n    },\n\n    _size: function(promise)\n    {\n      var stork = this;\n\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [error] );\n      };\n      var onTransaction = function(tx)\n      {\n        tx.executeSql( stork.SQL_COUNT, [], onCount, onFailure );\n      };\n      var onCount = function(tx, results)\n      {\n        promise.$success( [results.rows[0].count] );\n      };\n\n      this.db.readTransaction( onTransaction, onFailure );\n    },\n\n    batch: function(records, success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n\n      if ( this.handlePending( this.batch, arguments, promise ) )\n      {\n        return promise;\n      }\n\n      var stork = this;\n      var keyName = this.key;\n      var successful = 0;\n      var converted = [];\n\n      try\n      {\n        for (var i = 0; i < records.length; i++)\n        {\n          var value = records[ i ];\n          var key = value[ keyName ];\n\n          if ( undef(key) ) \n          {\n            key = value[ keyName ] = uuid();\n          }\n\n          converted.push(\n          {\n            value: value,\n            key: key,\n            rawKey: toJson( key ), \n            rawValue: toJson( value )\n          });\n        }  \n      }\n      catch (e)\n      {\n        promise.$failure( [records, successful, e] );\n\n        return promise;\n      }\n\n      var onTransaction = function(tx) \n      { \n        for (var i = 0; i < converted.length; i++)\n        {\n          var record = converted[ i ];\n\n          tx.executeSql( stork.SQL_INSERT, [record.rawKey, record.rawValue], onSuccess, onFailure );\n        }\n      };\n      var onSuccess = function(tx, results) \n      {\n        if ( ++successful === records.length && promise.$pending() )\n        {\n          for (var i = 0; i < converted.length; i++)\n          {\n            var record = converted[ i ];\n\n            stork.cache.put( record.rawKey, record.value, record.key );\n          }\n\n          promise.$success( [records] );\n        }\n      };\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [records, successful, error] );\n      };\n\n      this.db.transaction( onTransaction, onFailure );\n\n      return promise;\n    },\n\n    removeMany: function(keys, success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n\n      if ( this.handlePending( this.removeMany, arguments, promise ) )\n      {\n        return promise;\n      }\n\n      var stork = this;\n      var rawKeys = [];\n      var values = []; \n      var binder = [];\n      var query = '';\n\n      var onTransaction = function(tx) \n      {\n        tx.executeSql( query, rawKeys, onSuccess, onFailure );\n      };\n      var onSuccess = function(tx, results) \n      {\n        for (var i = 0; i < rawKeys.length; i++) \n        {\n          stork.cache.remove( rawKeys[ i ] );\n        }\n\n        promise.$success( [values, keys] );\n      };\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [values, 0, error] );\n      };\n\n      try\n      {\n        for (var i = 0; i < keys.length; i++) \n        {\n          var key = toJson( keys[ i ] );\n\n          if ( this.cache.has( key ) )\n          {\n            rawKeys[ i ] = key;\n            values[ i ] = this.cache.get( key );\n            binder[ i ] = '?';\n          }\n        }\n\n        query = streplace( SQL_DELETE_MANY, [this.name, binder.join(',')] );\n      }\n      catch (e)\n      {\n        promise.$failure( [values, e] );\n      }\n\n      if ( promise.$pending() )\n      {\n        this.db.transaction( onTransaction, onFailure );\n      }\n\n      return promise;\n    },\n\n    getMany: function(keys, success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n\n      if ( this.handlePending( this.removeMany, arguments, promise ) )\n      {\n        return promise;\n      }\n\n      var stork = this;\n      var rawKeys = [];\n      var keyToValueIndex = [];\n      var values = [];\n      var binder = [];\n      var query = '';\n\n      var onTransaction = function(tx) \n      {\n        tx.executeSql( query, rawKeys, onSuccess, onFailure );\n      };\n      var onSuccess = function(tx, results) \n      {\n        for (var i = 0; i < results.rows.length; i++)\n        {\n          var r = results.rows[ i ];\n\n          for (var k = 0; k < rawKeys.length; k++)\n          {\n            if ( rawKeys[ k ] === r.id )\n            {\n              values[ keyToValueIndex[ k ] ] = fromJson( r.value );\n            }\n          }\n        }\n\n        promise.$success( [values, keys] );\n      };\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [keys, error] );\n      };\n\n      try\n      {\n        for (var i = 0; i < keys.length; i++) \n        {\n          var key = toJson( keys[ i ] );\n\n          if ( this.cache.has( key ) )\n          {\n            values[ i ] = this.cache.get( key );\n          }\n          else\n          {\n            rawKeys.push( key );\n            keyToValueIndex.push( i );\n            binder.push( '?' );\n          }\n        }\n\n        query = streplace( SQL_SELECT_MANY, [this.name, binder.join(',')] );          \n      }\n      catch (e)\n      {\n        promise.$failure( [values, e] );\n      }\n\n      if ( promise.$pending() )\n      {\n        if ( rawKeys.length )\n        {\n          this.db.transaction( onTransaction, onFailure );\n        }\n        else\n        {\n          promise.$success( [values, keys] );\n        }\n      }\n\n      return promise;\n    }\n\n  }\n});","\nStork.adapter('window-name', 2, function()\n{\n\n  function loadData()\n  {\n    if ( !loadData.cache )\n    {\n      try\n      {\n        loadData.cache = fromJson( window.top.name );\n      }\n      catch (e)\n      {\n        loadData.cache = {};\n      }\n    }\n    \n    return loadData.cache;\n  }\n\n  function saveData()\n  {\n    try\n    {\n      window.top.name = toJson( loadData() );\n    }\n    catch (e)\n    {\n\n    }\n  }\n\n  return {\n\n    encode: function(key)\n    {\n      return this.prefix + toJson( key );\n    },\n\n    decode: function(rawKey)\n    {\n      return fromJson( rawKey.substring( this.prefix.length ) );\n    },\n\n    valid: function() \n    {\n      return window.top && typeof window.top.name !== 'undefined';\n    },\n\n    init: function(options, success, failure) \n    {\n      var promise = new Promise( this, success, failure );\n\n      this.prefix = coalesce( options.prefix, this.name + '-' );\n\n      promise.$bindTo( this.reload(), [this] );\n      \n      return promise;\n    },\n\n    reload: function(success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n      var prefix = this.prefix;\n      var cache = new FastMap();\n      var data = loadData();\n\n      try\n      {\n        for (var rawKey in data)\n        {\n          if ( rawKey.substring( 0, prefix.length ) === prefix )\n          {\n            var rawValue = data[ rawKey ];\n            var value = fromJson( rawValue );\n            var key = this.decode( rawKey );\n\n            cache.put( rawKey, value, key );\n          }  \n        }\n\n        this.cache = cache;\n        this.loaded = true;\n      }\n      catch (e)\n      {\n        promise.$failure( [e] );\n      }\n\n      this.finishReload( promise );\n\n      return promise;\n    },\n\n    _destroy: function(promise)\n    {\n      var keys = this.cache.keys;\n      var data = loadData();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        delete data[ keys[i] ];\n      }\n\n      this.cache.reset();\n\n      saveData();\n\n      promise.$success();\n    },\n\n    _put: function(key, value, rawKey, rawValue, promise)\n    {\n      var data = loadData();\n      var previousValue = this.cache.get( rawKey );\n\n      data[ rawKey ] = value;\n\n      this.cache.put( rawKey, value, key );\n\n      saveData();\n\n      promise.$success( [key, value, previousValue] );\n    },\n\n    _remove: function(key, rawKey, value, promise)\n    {\n      var data = loadData();\n\n      delete data[ rawKey ];\n\n      this.cache.remove( rawKey );\n\n      saveData();\n\n      promise.$success( [value, key] );\n    }\n\n  }\n});","\n  \n  global.Stork = Stork;\n  global.Stork.getAdapter = getAdapter;\n  global.Stork.Promise = Promise;\n  global.Stork.FastMap = FastMap;\n\n})(window);"],"sourceRoot":"/source/"}