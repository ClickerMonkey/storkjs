{"version":3,"sources":["header.js","functions.js","Stork.js","Promise.js","FastMap.js","extending.js","aggregation.js","query.js","chrome-storage-local.js","ie-userdata.js","indexed-db.js","local-storage.js","memory.js","webkit-sqlite.js","window-name.js","footer.js"],"names":["global","undefined","isFunc","x","constructor","call","apply","isObject","isNumber","isNaN","isArray","Array","isString","undef","def","replaceArray","dest","src","length","push","coalesce","a","b","c","d","swap","arr","i","j","temp","copy","from","to","prop","S4","Math","random","toString","substring","uuid","compareAdapters","priority","$promise","methodName","func","promise","Promise","this","success","failure","handlePending","arguments","args","prototype","slice","pop","getAdapter","adapterName","Stork","adapters","adapt","name","definition","valid","chosen","sort","options","JSON","key","lazy","cache","FastMap","pending","initialized","loaded","adapter","plugins","initializing","init","context","root","next","nextFromSuccess","state","PENDING","successes","failures","errors","$queue","map","values","keys","okeys","indices","putMap","toJson","stringify","fromJson","parse","decode","encode","method","handled","finishInitialization","$success","newPromise","$bindTo","finishReload","$pending","reload","then","callback","getMany","gotten","addValue","value","onFailure","e","$failure","get","rawKey","has","_get","destroy","_destroy","save","record","keyName","onSuccess","error","put","batch","records","saves","onSaved","setFailure","rawValue","_put","remove","_remove","removeMany","removed","each","stork","iterate","size","_size","all","returnAll","FAILURE","SUCCESS","CHAINED","$handleSuccesses","$handleFailures","replacementArguments","succs","s","result","$handleNext","returned","fails","errorArgument","$reset","reset","originalKey","index","removeAt","overwrite","rebuildIndex","lastValue","lastKey","lastOkey","indexOf","hasOverlap","reverse","max","half","ceil","comparator","partition","left","right","pivot","floor","qsort","l","plugin","aggregate","property","accumulate","getResult","v","count","total","sum","summing","avg","min","minValue","Number","MAX_VALUE","maxValue","METHODS","where","condition","matchedKeys","matchedValues","k","select","columns","results","resultKeys","resultObject","resultColumns","desc","isError","chrome","runtime","lastError","store","window","storage","local","prefix","set","_finishInitialization","items","removeByKeys","obj","previousValue","document","body","addBehavior","createElement","style","behavior","position","appendChild","load","attributes","XMLDocument","firstChild","nodeName","nodeValue","getAttribute","removeAttribute","setAttribute","getIDB","indexedDB","webkitIndexedDB","mozIndexedDB","oIndexedDB","msIndexedDB","getIDBTransaction","IDBTransaction","webkitIDBTransaction","mozIDBTransaction","oIDBTransaction","msIDBTransaction","DATABASE_VERSION","READ_WRITE","factory","request","open","onerror","onupgradeneeded","db","createObjectStore","keyPath","onsuccess","event","objectStore","transaction","cursor","openCursor","oncomplete","onabort","clear","localStorage","setItem","removeItem","getItem","streplace","str","replace","match","parseInt","DATABASE_NAME","SQL_CREATE","SQL_SELECT","SQL_SELECT_ALL","SQL_SELECT_MANY","SQL_INSERT","SQL_DELETE","SQL_COUNT","SQL_DESTROY","SQL_DELETE_MANY","openDatabase","databaseName","database","databaseSize","databaseVersion","version","tx","onTransactionForCreate","executeSql","onCreate","onTransactionForSelect","onResults","rows","id","readTransaction","onTransaction","onResult","first","onCount","successful","converted","rawKeys","binder","query","join","keyToValueIndex","r","loadData","top","saveData","data"],"mappings":"AAAA,cAEA,SAAAA,EAAAC,GCEA,QAAAC,GAAAC,GAEA,SAAAA,GAAAA,EAAAC,aAAAD,EAAAE,MAAAF,EAAAG,OAGA,QAAAC,GAAAJ,GAEA,MAAA,gBAAAA,IAAA,OAAAA,EAGA,QAAAK,GAAAL,GAEA,MAAA,gBAAAA,KAAAM,MAAAN,GAGA,QAAAO,GAAAP,GAEA,MAAAA,aAAAQ,OAGA,QAAAC,GAAAT,GAEA,MAAA,gBAAAA,GAGA,QAAAU,GAAAV,GAEA,MAAA,mBAAAA,GAGA,QAAAW,GAAAX,GAEA,MAAA,mBAAAA,GAGA,QAAAY,GAAAC,EAAAC,GAEAD,EAAAE,OAAA,EACAF,EAAAG,KAAAb,MAAAU,EAAAC,GAGA,QAAAG,GAAAC,EAAAC,EAAAC,EAAAC,GAEA,MAAAV,GAAAO,GAAAA,EACAP,EAAAQ,GAAAA,EACAR,EAAAS,GAAAA,EACAC,EAGA,QAAAC,GAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAAH,EAAAC,EACAD,GAAAC,GAAAD,EAAAE,GACAF,EAAAE,GAAAC,EAiBA,QAAAC,GAAAC,EAAAC,GAEA,IAAA,GAAAC,KAAAF,GAEAC,EAAAC,GAAAF,EAAAE,EAGA,OAAAD,GAGA,QAAAE,KAEA,OAAA,OAAA,EAAAC,KAAAC,UAAA,GAAAC,SAAA,IAAAC,UAAA,GAGA,QAAAC,KAEA,MAAAL,KAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAAA,IAAAA,IAGA,QAAAM,GAAAnB,EAAAC,GAEA,GAAAE,GAAAF,EAAAmB,SAAApB,EAAAoB,QAEA,OAAA,KAAAjB,EAAA,EAAA,EAAAA,EAAA,GAAA,EAGA,QAAAkB,GAAAC,EAAAC,GAEA,MAAA,YAEA,GAAAC,GAAA,GAAAC,GAAAC,KAAAC,QAAAC,QAEA,IAAAF,KAAAG,cAAAH,KAAAJ,GAAAQ,UAAAN,GAEA,MAAAA,EAGA,IAAAO,GAAAzC,MAAA0C,UAAAC,MAAAjD,KAAA8C,UAQA,OAPAC,GAAAG,MACAH,EAAAG,MACAH,EAAAjC,KAAA0B,GAGAD,EAAAtC,MAAAyC,KAAAK,GAEAP,GAIA,QAAAW,GAAAC,GAEA,GAAAA,EAEA,IAAA,GAAA9B,GAAA,EAAAA,EAAA+B,EAAAC,SAAAzC,OAAAS,IACA,CACA,GAAAiC,GAAAF,EAAAC,SAAAhC,EAEA,IAAAiC,EAAAC,OAAAJ,GAAAG,EAAAE,WAAAC,QAEA,MAAAH,GAKA,IAAAJ,EAAAQ,OACA,CACAN,EAAAC,SAAAM,KAAAzB,EAEA,KAAA,GAAAb,GAAA,EAAAA,EAAA+B,EAAAC,SAAAzC,OAAAS,IACA,CACA,GAAAiC,GAAAF,EAAAC,SAAAhC,EAEA,IAAAiC,EAAAE,WAAAC,QAEA,MAAAP,GAAAQ,OAAAJ,GAKA,MAAAJ,GAAAQ,OC/HA,QAAAN,GAAAQ,EAAAlB,EAAAC,GAGA,KAAAF,eAAAW,IAAA,MAAA,IAAAA,GAAAQ,EAAAlB,EAAAC,EAGA,KAAAkB,KAAA,KAAA,gEASApB,MAAAmB,QAAAA,EAAAA,MAUAnB,KAAAqB,IAAAhD,EAAA8C,EAAAE,IAAA,MASArB,KAAAc,KAAAzC,EAAA8C,EAAAL,KAAA,IAUAd,KAAAsB,KAAAjD,EAAA8C,EAAAG,MAAA,GASAtB,KAAAuB,MAAA,GAAAC,GAWAxB,KAAAyB,WAQAzB,KAAA0B,aAAA,EAWA1B,KAAA2B,QAAA,EAUA3B,KAAA4B,QAAAnB,EAAAU,EAAAS,SAGA7C,EAAAiB,KAAA4B,QAAAb,WAAAf,KAGA,KAAA,GAAApB,GAAA,EAAAA,EAAA+B,EAAAkB,QAAA1D,OAAAS,IAEA+B,EAAAkB,QAAAjD,GAAAoB,KAIAA,MAAA8B,aAAA9B,KAAA+B,KAAA/B,KAAAmB,QAAAlB,EAAAC,GCrHA,QAAAH,GAAAiC,EAAA/B,EAAAC,EAAA+B,GAOAjC,KAAAgC,QAAAA,EAOAhC,KAAAiC,KAAAA,GAAAjC,KAOAA,KAAAkC,KAAA,KAQAlC,KAAAmC,gBAAA,KAQAnC,KAAAoC,MAAArC,EAAAsC,QAQArC,KAAAsC,aAQAtC,KAAAuC,YAOAvC,KAAAwC,UAQAxC,KAAAK,KAAA,KAGAL,KAAAyC,OAAAxC,EAAAC,GC3EA,QAAAsB,GAAAkB,GAMA1C,KAAA2C,UAMA3C,KAAA4C,QAMA5C,KAAA6C,SAMA7C,KAAA8C,WAGA9C,KAAA+C,OAAAL,GHtCA,GAAAM,GAAA5B,KAAA6B,UAEAC,EAAA9B,KAAA+B,KCqIAxC,GAAAL,WAWA8C,OAAAF,EAUAG,OAAAL,EAiBA7C,cAAA,SAAAmD,EAAAjD,EAAAP,GAEA,GAAAyD,IAAAvD,KAAA0B,WAaA,OAXA6B,IAEAvD,KAAAyB,QAAArD,MAEAkF,OAAAA,EACAlD,UAAAxC,MAAA0C,UAAAC,MAAAjD,KAAA+C,GACAP,QAAAA,IAKAyD,GAYAC,qBAAA,SAAA1D,EAAAO,GAEA,IAAAL,KAAA0B,YACA,CACA1B,KAAA0B,aAAA,EAEA5B,EAAA2D,SAAApD,EAEA,KAAA,GAAAzB,GAAA,EAAAA,EAAAoB,KAAAyB,QAAAtD,OAAAS,IACA,CACA,GAAA6C,GAAAzB,KAAAyB,QAAA7C,GACA8E,EAAAjC,EAAA6B,OAAA/F,MAAAyC,KAAAyB,EAAArB,UAEAqB,GAAA3B,SAEA2B,EAAA3B,QAAA6D,QAAAD,GAIA1D,KAAAyB,QAAA,KAGA,MAAAzB,OAWA4D,aAAA,SAAA9D,GAEA,GAAAA,EAAA+D,WACA,CACA,GAAAtC,GAAAvB,KAAAuB,KAEAvB,MAAA0B,YAEA5B,EAAA2D,UAAAlC,EAAAoB,OAAApB,EAAAsB,QAIA7C,KAAAwD,qBAAA1D,GAAAyB,EAAAoB,OAAApB,EAAAsB,UAUA7B,MAAA,WAEA,KAAA,kCAoCAe,KAAA,SAAAZ,EAAAlB,EAAAC,GAEA,KAAA,iCAgDA4D,OAAA,SAAA7D,EAAAC,GAEA,KAAA,mCA4BA6D,KAAA,SAAAC,GAEA,MAAAA,GAAAzG,MAAAyC,OAiDAiE,QAAA,SAAArB,EAAA3C,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAEA,IAAAF,KAAAG,cAAAH,KAAAiE,QAAA7D,UAAAN,GAEA,MAAAA,EAuBA,KAAA,GApBAoE,GAAA,EACAvB,KAEAwB,EAAA,SAAAvF,GAEA,MAAA,UAAAwF,GAEAzB,EAAA/D,GAAAwF,IAEAF,IAAAtB,EAAAzE,QAEA2B,EAAA2D,UAAAd,EAAAC,MAIAyB,EAAA,SAAAC,GAEAxE,EAAAyE,UAAA3B,EAAA0B,KAGA1F,EAAA,EAAAA,EAAAgE,EAAAzE,OAAAS,IAEAoB,KAAAwE,IAAA5B,EAAAhE,GAAAuF,EAAAvF,GAAAyF,EAGA,OAAAvE,IAkDA0E,IAAA,SAAAnD,EAAApB,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAEA,IAAAF,KAAAG,cAAAH,KAAAwE,IAAApE,UAAAN,GAEA,MAAAA,EAGA,IAAA2E,EAEA,KAEAA,EAAAzE,KAAAqD,OAAAhC,GAEA,MAAAiD,GAEAxE,EAAAyE,UAAAlD,EAAAiD,IAmBA,MAhBAxE,GAAA+D,aAEA7D,KAAAuB,MAAAmD,IAAAD,GAEA3E,EAAA2D,UAAAzD,KAAAuB,MAAAiD,IAAAC,GAAApD,IAEArB,KAAA2B,OAEA7B,EAAA2D,UAAAvG,EAAAmE,IAIArB,KAAA2E,KAAAtD,EAAAoD,EAAA3E,IAIAA,GAGA6E,KAAA,SAAAtD,EAAAoD,EAAA3E,GAEA,KAAA,iCA0CA8E,QAAA,SAAA3E,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAEA,OAAAF,MAAAG,cAAAH,KAAA4E,QAAAxE,UAAAN,GAEAA,GAGAE,KAAA6E,SAAA/E,GAEAA,IAGA+E,SAAA,SAAA/E,GAEA,KAAA,qCAmDAgF,KAAA,SAAAC,EAAA9E,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAEA,IAAAF,KAAAG,cAAAH,KAAA8E,KAAA1E,UAAAN,GAEA,MAAAA,EAGA,IAAAkF,GAAAhF,KAAAqB,IACAA,EAAA0D,EAAAC,EAEAlH,GAAAuD,KAEAA,EAAA0D,EAAAC,GAAAxF,IAGA,IAAAyF,GAAA,SAAA5D,EAAA+C,GAEAtE,EAAA2D,UAAAW,KAEAC,EAAA,SAAAhD,EAAA+C,EAAAc,GAEApF,EAAAyE,UAAAH,EAAAc,IAKA,OAFAlF,MAAAmF,IAAA9D,EAAA0D,EAAAE,EAAAZ,GAEAvE,GAsDAsF,MAAA,SAAAC,EAAApF,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAEA,IAAAF,KAAAG,cAAAH,KAAAoF,MAAAhF,UAAAN,GAEA,MAAAA,EAiBA,KAAA,GAdAwF,GAAA,EAEAC,EAAA,aAEAD,IAAAD,EAAAlH,QAEA2B,EAAA2D,UAAA4B,KAGAG,EAAA,SAAAlB,GAEAxE,EAAAyE,UAAAc,EAAAC,EAAAhB,KAGA1F,EAAA,EAAAA,EAAAyG,EAAAlH,SAAA2B,EAAAsC,MAAAxD,IAEAoB,KAAA8E,KAAAO,EAAAzG,GAAA2G,EAAAC,EAGA,OAAA1F,IA0DAqF,IAAA,SAAA9D,EAAA+C,EAAAnE,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAEA,IAAAF,KAAAG,cAAAH,KAAAmF,IAAA/E,UAAAN,GAEA,MAAAA,EAGA,IAAA2E,GAAAgB,CAEA,KAEAhB,EAAAzE,KAAAqD,OAAAhC,GACAoE,EAAAzC,EAAAoB,GAEA,MAAAE,GAEAxE,EAAAyE,UAAAlD,EAAA+C,EAAAE,IAQA,MALAxE,GAAA+D,YAEA7D,KAAA0F,KAAArE,EAAA+C,EAAAK,EAAAgB,EAAA3F,GAGAA,GAGA4F,KAAA,SAAArE,EAAA+C,EAAAK,EAAAgB,EAAA3F,GAEA,KAAA,iCAkDA6F,OAAA,SAAAtE,EAAApB,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAEA,IAAAF,KAAAG,cAAAH,KAAA2F,OAAAvF,UAAAN,GAEA,MAAAA,EAGA,IAAA2E,EAEA,KAEAA,EAAAzE,KAAAqD,OAAAhC,GAEA,MAAAiD,GAEAxE,EAAAyE,UAAAlD,EAAAiD,IAGA,GAAAxE,EAAA+D,WAEA,GAAA7D,KAAA2B,SAAA3B,KAAAuB,MAAAmD,IAAAD,GAEA3E,EAAA2D,UAAAvG,EAAAmE,QAGA,CACA,GAAA+C,GAAApE,KAAAuB,MAAAiD,IAAAC,EAEAzE,MAAA4F,QAAAvE,EAAAoD,EAAAL,EAAAtE,GAIA,MAAAA,IAGA8F,QAAA,SAAAvE,EAAAoD,EAAAL,EAAAtE,GAEA,KAAA,oCAuDA+F,WAAA,SAAAjD,EAAA3C,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAEA,IAAAF,KAAAG,cAAAH,KAAA6F,WAAAzF,UAAAN,GAEA,MAAAA,EAuBA,KAAA,GApBA6C,MACAmD,EAAA,EAEA3B,EAAA,SAAAvF,GAEA,MAAA,UAAAwF,GAEAzB,EAAA/D,GAAAwF,IAEA0B,IAAAlD,EAAAzE,QAEA2B,EAAA2D,UAAAd,EAAAC,MAIA4C,EAAA,SAAAlB,GAEAxE,EAAAyE,UAAA5B,EAAAmD,EAAAxB,KAGA1F,EAAA,EAAAA,EAAAgE,EAAAzE,OAAAS,IAEAoB,KAAA2F,OAAA/C,EAAAhE,GAAAuF,EAAAvF,GAAA4G,EAGA,OAAA1F,IA4CAiG,KAAA,SAAA/B,EAAA9D,GAEA,IAAA/C,EAAA6G,IAAAhE,KAAAG,cAAAH,KAAA+F,KAAA3F,WAEA,MAAAJ,KAGA,IAAAgG,GAAAhG,KACAiG,EAAA,SAAAtD,EAAAC,GAEA,IAAA,GAAAhE,GAAA,EAAAA,EAAA+D,EAAAxE,OAAAS,IAEAoF,EAAA1G,KAAA0I,EAAArD,EAAA/D,GAAAgE,EAAAhE,IAIA,IAAAoB,KAAA2B,OACA,CACA,GAAAiB,GAAA5C,KAAAuB,MAAAsB,MACAF,EAAA3C,KAAAuB,MAAAoB,MAEAsD,GAAAtD,EAAAC,OAIA5C,MAAA8D,OAAAmC,EAAA/F,EAGA,OAAAF,OA2CAkG,KAAA,SAAAjG,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAEA,OAAAF,MAAAG,cAAAH,KAAAkG,KAAA9F,UAAAN,GAEAA,GAGAE,KAAA2B,OAEA7B,EAAA2D,UAAAzD,KAAAuB,MAAA2E,SAIAlG,KAAAmG,MAAArG,GAGAA,IAGAqG,MAAA,SAAArG,GAEA,KAAA,kCA4CAsG,IAAA,SAAAnG,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAEA,IAAAF,KAAAG,cAAAH,KAAAoG,IAAAhG,UAAAN,GAEA,MAAAA,EAGA,IAAAuG,GAAA,SAAA1D,EAAAC,GAEA9C,EAAA2D,UAAAd,EAAAC,KAEAyB,EAAA,SAAAa,GAEApF,EAAAyE,UAAAW,IAGA,IAAAlF,KAAA2B,OACA,CACA,GAAAiB,GAAA5C,KAAAuB,MAAAsB,MACAF,EAAA3C,KAAAuB,MAAAoB,MAEA0D,GAAA1D,EAAAC,OAIA5C,MAAA8D,OAAAuC,EAAAhC,EAGA,OAAAvE,KCloCAC,EAAAsC,QAAA,EAMAtC,EAAAuG,QAAA,EAMAvG,EAAAwG,QAAA,EAMAxG,EAAAyG,QAAA,EAEAzG,EAAAO,WAeAyD,KAAA,SAAA9D,EAAAC,GAkBA,MAhBAF,MAAAyC,OAAAxC,EAAAC,GAEAF,KAAAkC,OAEAlC,KAAAkC,KAAA,GAAAnC,GAAAC,KAAAgC,QAAA9E,EAAAA,EAAA8C,OAGAA,KAAAoC,MAAArC,EAAAwG,QAEAvG,KAAAyG,mBAEAzG,KAAAoC,QAAArC,EAAAuG,SAEAtG,KAAA0G,kBAGA1G,KAAAkC,MAYAgD,MAAA,SAAAA,GAYA,MAVA/H,GAAA+H,KAEAlF,KAAAiC,KAAAO,OAAApE,KAAA8G,GAEAlF,KAAAoC,QAAArC,EAAAuG,SAEAtG,KAAA0G,mBAIA1G,MAIA2D,QAAA,SAAA1E,EAAA0H,GAEA,GAAA3H,GAAAgB,IAEAf,GAAA8E,KACA,WACA/E,EAAAgD,QAAA/C,EAAA+C,QACAhD,EAAAyE,SAAApF,EAAAsI,EAAA1H,EAAAoB,QAEA,WACArB,EAAAgD,QAAA/C,EAAA+C,QACAhD,EAAAuF,SAAAlG,EAAAsI,EAAA1H,EAAAoB,UAMAwD,SAAA,WAEA,MAAA7D,MAAAoC,QAAArC,EAAAsC,SAIAI,OAAA,SAAAxC,EAAAC,GAEA/C,EAAA8C,IAAAD,KAAAsC,UAAAlE,KAAA6B,GACA9C,EAAA+C,IAAAF,KAAAuC,SAAAnE,KAAA8B,IAIAuG,iBAAA,WAGA,IAAA,GADAG,GAAA5G,KAAAsC,UACA1D,EAAA,EAAAA,EAAAgI,EAAAzI,OAAAS,IACA,CACA,GAAAiI,GAAAD,EAAAhI,GACAkI,EAAAD,EAAAtJ,MAAAyC,KAAAgC,QAAAhC,KAAAK,KAEAyG,aAAA/G,KAAAC,KAAAmC,kBAEAnC,KAAAmC,gBAAA2E,GAIAF,EAAAzI,OAAA,EAEA6B,KAAA+G,eAMAA,YAAA,WAEA,GAAA7E,GAAAlC,KAAAkC,KACA8E,EAAAhH,KAAAmC,eAEAD,IAAA8E,GAAAhH,KAAAoC,QAAArC,EAAAwG,UAEArE,EAAAyB,QAAAqD,GACAhH,KAAAoC,MAAArC,EAAAyG,UAKA/C,SAAA,SAAApD,GAEAL,KAAAoC,QAAArC,EAAAsC,UAEArC,KAAAK,KAAAA,MACAL,KAAAoC,MAAArC,EAAAwG,QACAvG,KAAAyG,qBAKAC,gBAAA,WAGA,IAAA,GADAO,GAAAjH,KAAAuC,SACA3D,EAAA,EAAAA,EAAAqI,EAAA9I,OAAAS,IAEAqI,EAAArI,GAAArB,MAAAyC,KAAAgC,QAAAhC,KAAAK,KAEA4G,GAAA9I,OAAA,CAIA,KAAA,GAFAqE,GAAAxC,KAAAiC,KAAAO,OACA0E,GAAAlH,KAAAK,KAAAL,KAAAK,KAAAlC,OAAA,IACAS,EAAA,EAAAA,EAAA4D,EAAArE,OAAAS,IAEA4D,EAAA5D,GAAArB,MAAAyC,KAAAgC,QAAAkF,EAEA1E,GAAArE,OAAA,GAIAoG,SAAA,SAAAlE,GAEAL,KAAAoC,QAAArC,EAAAsC,UAEArC,KAAAK,KAAAA,MACAL,KAAAoC,MAAArC,EAAAuG,QACAtG,KAAA0G,oBAKAS,OAAA,WAEAnH,KAAAoC,MAAArC,EAAAsC,QACArC,KAAAsC,UAAAnE,OAAA,EACA6B,KAAAuC,SAAApE,OAAA,EACA6B,KAAAwC,OAAArE,OAAA,ICpPAqD,EAAAlB,WAQA8G,MAAA,WAOA,MALApH,MAAA2C,OAAAxE,OAAA,EACA6B,KAAA4C,KAAAzE,OAAA,EACA6B,KAAA6C,MAAA1E,OAAA,EACA6B,KAAA8C,WAEA9C,MAWAmF,IAAA,SAAA9D,EAAA+C,EAAAiD,GAcA,MAZAhG,KAAArB,MAAA8C,QAEA9C,KAAA2C,OAAA3C,KAAA8C,QAAAzB,IAAA+C,GAIApE,KAAA8C,QAAAzB,GAAArB,KAAA2C,OAAAxE,OACA6B,KAAA2C,OAAAvE,KAAAgG,GACApE,KAAA4C,KAAAxE,KAAAiD,GACArB,KAAA6C,MAAAzE,KAAAiJ,IAGArH,MASA+C,OAAA,SAAAL,GAEA,GAAAA,YAAAlB,GAMA,IAAA,GAJAoB,GAAAF,EAAAE,KACAD,EAAAD,EAAAC,OACAE,EAAAH,EAAAG,MAEAjE,EAAA,EAAAA,EAAAgE,EAAAzE,OAAAS,IAEAoB,KAAAmF,IAAAvC,EAAAhE,GAAA+D,EAAA/D,GAAAiE,EAAAjE,QAGA,IAAApB,EAAAkF,GAEA,IAAA,GAAArB,KAAAqB,GAEA1C,KAAAmF,IAAA9D,EAAAqB,EAAArB,GAAAA,EAIA,OAAArB,OASAwE,IAAA,SAAAnD,GAEA,MAAArB,MAAA2C,OAAA3C,KAAA8C,QAAAzB,KASAsE,OAAA,SAAAtE,GAEA,GAAAiG,GAAAtH,KAAA8C,QAAAzB,EAOA,OALA5D,GAAA6J,IAEAtH,KAAAuH,SAAAD,GAGAtH,MASAwH,UAAA,SAAA9E,GAQA,MANA1E,GAAAgC,KAAA2C,OAAAD,EAAAC,QACA3E,EAAAgC,KAAA4C,KAAAF,EAAAE,MACA5E,EAAAgC,KAAA6C,MAAAH,EAAAG,OAEA7C,KAAAyH,eAEAzH,MASAuH,SAAA,SAAAD,GAEA,GAAAjG,GAAArB,KAAA4C,KAAA0E,GACAI,EAAA1H,KAAA2C,OAAAnC,MACAmH,EAAA3H,KAAA4C,KAAApC,MACAoH,EAAA5H,KAAA6C,MAAArC,KAYA,OAVA8G,GAAAtH,KAAA2C,OAAAxE,SAEA6B,KAAA2C,OAAA2E,GAAAI,EACA1H,KAAA4C,KAAA0E,GAAAK,EACA3H,KAAA6C,MAAAyE,GAAAM,EACA5H,KAAA8C,QAAA6E,GAAAL,SAGAtH,MAAA8C,QAAAzB,GAEArB,MASA6H,QAAA,SAAAxG,GAEA,MAAAhD,GAAA2B,KAAA8C,QAAAzB,GAAA,KASAqD,IAAA,SAAArD,GAEA,MAAAA,KAAArB,MAAA8C,SASAgF,WAAA,SAAApF,GAKA,IAAA,GAHAE,GAAA5C,KAAA4C,KACAE,EAAAJ,EAAAI,QAEAlE,EAAA,EAAAA,EAAAgE,EAAAzE,OAAAS,IAEA,GAAAgE,EAAAhE,IAAAkE,GAEA,OAAA,CAIA,QAAA,GAQAoD,KAAA,WAEA,MAAAlG,MAAA2C,OAAAxE,QASA4J,QAAA,WAKA,IAAA,GAHAC,GAAAhI,KAAAkG,OAAA,EACA+B,EAAA7I,KAAA8I,KAAAF,EAAA,GAEApJ,EAAA,EAAAqJ,EAAArJ,EAAAA,IAEAF,EAAAsB,KAAA2C,OAAA/D,EAAAoJ,EAAApJ,GACAF,EAAAsB,KAAA4C,KAAAhE,EAAAoJ,EAAApJ,GACAF,EAAAsB,KAAA6C,MAAAjE,EAAAoJ,EAAApJ,EAKA,OAFAoB,MAAAyH,eAEAzH,MAeAkB,KAAA,SAAAiH,GAKA,QAAAC,GAAAC,EAAAC,GAMA,IAJA,GAAAC,GAAA7F,EAAAC,OAAAvD,KAAAoJ,OAAAF,EAAAD,GAAA,IACAzJ,EAAAyJ,EACAxJ,EAAAyJ,EAEAzJ,GAAAD,GACA,CACA,KAAAuJ,EAAAzF,EAAAC,OAAA/D,GAAA2J,GAAA,GAAA3J,GACA,MAAAuJ,EAAAzF,EAAAC,OAAA9D,GAAA0J,GAAA,GAAA1J,GAEAA,IAAAD,IACAF,EAAAgE,EAAAC,OAAA/D,EAAAC,GACAH,EAAAgE,EAAAE,KAAAhE,EAAAC,GACAH,EAAAgE,EAAAG,MAAAjE,EAAAC,GACAD,IACAC,KAIA,MAAAD,GAIA,QAAA6J,GAAAJ,EAAAC,GAEA,GAAAhB,GAAAc,EAAAC,EAAAC,EAEAhB,GAAA,EAAAe,GAEAI,EAAAJ,EAAAf,EAAA,GAGAgB,EAAAhB,GAEAmB,EAAAnB,EAAAgB,GAtCA,GAAA5F,GAAA1C,KA0CAsI,EAAAtI,KAAAkG,OAAA,CAUA,OAPAoC,GAAA,IAEAG,EAAA,EAAAH,GAEAtI,KAAAyH,gBAGAzH,MASAyH,aAAA,WAEAzH,KAAA8C,UAEA,KAAA,GAAAlE,GAAA,EAAA8J,EAAA1I,KAAA4C,KAAAzE,OAAAuK,EAAA9J,EAAAA,IAEAoB,KAAA8C,QAAA9C,KAAA4C,KAAAhE,IAAAA,CAGA,OAAAoB,QCpVAW,EAAAkB,WAyBAlB,EAAAgI,OAAA,SAAA5H,GAOA,MALA5D,GAAA4D,IAEAJ,EAAAkB,QAAAzD,KAAA2C,GAGAJ,GAgBAA,EAAAC,YA+BAD,EAAAiB,QAAA,SAAAd,EAAApB,EAAAqB,GASA,MAPAJ,GAAAC,SAAAxC,MAEA0C,KAAAA,EACApB,SAAAA,EACAqB,WAAA5D,EAAA4D,GAAAA,IAAAA,IAGAJ,GC/FAA,EAAAgI,OAAA,WAyDA,QAAAC,GAAAC,EAAAC,EAAAC,EAAAjJ,GAEA,GAAAmF,GAAA,SAAAtC,EAAAC,GAIA,IAAA,GAAAhE,GAAA,EAAAA,EAAA+D,EAAAxE,OAAAS,IACA,CACA,GAAAoK,GAAArG,EAAA/D,EAEApB,GAAAwL,IAAAH,IAAAG,IAEAF,EAAAE,EAAAH,IAIA/I,EAAA2D,UAAAsF,OAEA1E,EAAA,SAAAC,GAEAxE,EAAAyE,UAAAD,IAGAtE,MAAAoG,IAAAnB,EAAAZ,GA2BA,QAAA4E,GAAAJ,EAAA/I,GAEA,GAAAoJ,GAAA,EAEAJ,EAAA,SAAAE,GAEAE,KAEAH,EAAA,WAEA,MAAAG,GAGAN,GAAAC,EAAAC,EAAAC,EAAAjJ,GA2BA,QAAAqJ,GAAAN,EAAA/I,GAEA,GAAAsJ,GAAA,EAEAN,EAAA,SAAAE,GAEAvL,EAAAuL,KAEAI,GAAAJ,IAGAD,EAAA,WAEA,MAAAK,GAGAR,GAAAC,EAAAC,EAAAC,EAAAjJ,GA4BA,QAAAuJ,GAAAR,EAAA/I,GAEA,GAAAsJ,GAAA,EACAF,EAAA,EAEAJ,EAAA,SAAAE,GAEAvL,EAAAuL,KAEAI,GAAAJ,EACAE,MAGAH,EAAA,WAEA,MAAAK,GAAAF,EAGAN,GAAAC,EAAAC,EAAAC,EAAAjJ,GA2BA,QAAAwJ,GAAAT,EAAA/I,GAEA,GAAAyJ,GAAAC,OAAAC,UAEAX,EAAA,SAAAE,GAEAvL,EAAAuL,KAEAO,EAAAnK,KAAAkK,IAAAC,EAAAP,KAGAD,EAAA,WAEA,MAAAQ,GAGAX,GAAAC,EAAAC,EAAAC,EAAAjJ,GA2BA,QAAAkI,GAAAa,EAAA/I,GAEA,GAAA4J,GAAAF,OAAAC,UAEAX,EAAA,SAAAE,GAEAvL,EAAAuL,KAEAU,EAAAtK,KAAAkK,IAAAI,EAAAV,KAGAD,EAAA,WAEA,MAAAW,GAGAd,GAAAC,EAAAC,EAAAC,EAAAjJ,GAGA,GAAA6J,IAEAf,UAAAjJ,EAAA,YAAAiJ,GACAK,MAAAtJ,EAAA,QAAAsJ,GACAE,IAAAxJ,EAAA,MAAAwJ,GACAE,IAAA1J,EAAA,MAAA0J,GACAC,IAAA3J,EAAA,MAAA2J,GACAtB,IAAArI,EAAA,MAAAqI,GAGA,OAAA,UAAAhC,GAEAjH,EAAA4K,EAAA3D,QCtTArF,EAAAgI,OAAA,WAiEA,QAAAiB,GAAAC,EAAA/J,GAEA,GAAAmF,GAAA,SAAAtC,EAAAC,GAKA,IAAA,GAHAkH,MACAC,KAEAnL,EAAA,EAAAA,EAAA+D,EAAAxE,OAAAS,IACA,CACA,GAAAoK,GAAArG,EAAA/D,GACAoL,EAAApH,EAAAhE,EAEAiL,GAAAb,EAAAgB,KAEAD,EAAA3L,KAAA4K,GACAc,EAAA1L,KAAA4L,IAIAlK,EAAA2D,UAAAsG,EAAAD,KAEAzF,EAAA,SAAAC,GAEAxE,EAAAyE,UAAAD,IAGAtE,MAAAoG,IAAAnB,EAAAZ,GAuDA,QAAA4F,GAAAC,EAAApK,GAEA,GAAAmF,GAAA,SAAAtC,EAAAC,GAKA,IAAA,GAHAuH,MACAC,KAEAxL,EAAA,EAAAA,EAAA+D,EAAAxE,OAAAS,IACA,CACA,GAAAoK,GAAArG,EAAA/D,EAEA,IAAApB,EAAAwL,GAEA,GAAAnL,EAAAqM,GAEAA,IAAAlB,KAEAmB,EAAA/L,KAAA4K,EAAAkB,IACAE,EAAAhM,KAAAwE,EAAAhE,SAGA,IAAAjB,EAAAuM,GACA,CAIA,IAAA,GAHAG,MACAC,EAAA,EAEAN,EAAA,EAAAA,EAAAE,EAAA/L,OAAA6L,IACA,CACA,GAAAxL,GAAA0L,EAAAF,EAEAxL,KAAAwK,KAEAqB,EAAA7L,GAAAwK,EAAAxK,GACA8L,KAIAA,EAAA,IAEAH,EAAA/L,KAAAiM,GACAD,EAAAhM,KAAAwE,EAAAhE,MAMAkB,EAAA2D,UAAA0G,EAAAC,KAEA/F,EAAA,SAAAC,GAEAxE,EAAAyE,UAAA2F,EAAA5F,IAGAtE,MAAAoG,IAAAnB,EAAAZ,GAsEA,QAAAnD,GAAAiH,EAAAoC,EAAAzK,GAEA,GAAAmF,GAAA,WAEA,GAAA1D,GAAAvB,KAAAuB,KAEAA,GAAAL,KAAAiH,GAEAoC,GAEAhJ,EAAAwG,UAGAjI,EAAA2D,UAAAlC,EAAAoB,OAAApB,EAAAsB,SAEAwB,EAAA,SAAAC,GAEAxE,EAAAyE,UAAAD,IAGAtE,MAAAoG,IAAAnB,EAAAZ,GAGA,GAAAsF,IAEAC,MAAAjK,EAAA,QAAAiK,GACAK,OAAAtK,EAAA,SAAAsK,GACA/I,KAAAvB,EAAA,OAAAuB,GAGA,OAAA,UAAA8E,GAEAjH,EAAA4K,EAAA3D,QC5SArF,EAAAiB,QAAA,uBAAA,EAAA,WAIA,QAAA4I,KAEA,MAAAC,SAAAA,OAAAC,SAAAD,OAAAC,QAAAC,UAJA,GAAAC,GAAAC,OAAAJ,QAAAA,OAAAK,QAAAL,OAAAK,QAAAC,OAAA,CAOA,QAEA1H,OAAA,SAAAhC,GAEA,MAAArB,MAAAgL,OAAAhI,EAAA3B,IAGA+B,OAAA,SAAAqB,GAEA,MAAAvB,GAAAuB,EAAAlF,UAAAS,KAAAgL,OAAA7M,UAGA6C,MAAA,WAEA,IAAA4J,EAEA,OAAA,CAGA,KAEA,GAAA9L,GAAAM,KAAAC,SACAqD,IAMA,OAJAA,GAAA5D,GAAAA,EACA8L,EAAAK,IAAAvI,GACAkI,EAAAjF,OAAA7G,IAEA,EAEA,MAAAwF,GAEA,OAAA,IAIAvC,KAAA,SAAAZ,EAAAlB,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAaA,OAXAF,MAAAgL,OAAA3M,EAAA8C,EAAA6J,OAAAhL,KAAAc,KAAA,KAEAd,KAAAsB,KAEAtB,KAAAkL,sBAAApL,GAAAE,OAIAF,EAAA6D,QAAA3D,KAAA8D,UAAA9D,OAGAF,GAGAgE,OAAA,SAAA7D,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,GACA8F,EAAAhG,KACAgL,EAAAhL,KAAAgL,OACAzJ,EAAA,GAAAC,EA0BA,OAxBAoJ,GAAApG,IAAA,KAAA,SAAA2G,GAEA,GAAAX,IAEA1K,EAAAyE,UAAAiG,UAGA,CACA,IAAA,GAAA/F,KAAA0G,GAEA1G,EAAAlF,UAAA,EAAAyL,EAAA7M,UAAA6M,GAEAzJ,EAAA4D,IAAAV,EAAA0G,EAAA1G,GAAAuB,EAAA5C,OAAAqB,GAIAuB,GAAAzE,MAAAiG,UAAAjG,GACAyE,EAAArE,QAAA,EAEAqE,EAAApC,aAAA9D,MAKAA,GAGA6E,KAAA,SAAAtD,EAAAoD,EAAA3E,GAEA,GAAAkG,GAAAhG,IAEA4K,GAAApG,IAAAC,EAAA,SAAA0G,GAEA,GAAAX,IAEA1K,EAAAyE,UAAAlD,EAAAmJ,UAIA,IAAAW,EAAAhN,OACA,CACA,GAAAiG,GAAAlB,EAAAiI,EAAA,GAEAnF,GAAAzE,MAAA4D,IAAAV,EAAAL,EAAA/C,GAEAvB,EAAA2D,UAAAW,EAAA/C,QAIAvB,GAAA2D,UAAAvG,EAAAmE,OAMAwD,SAAA,SAAA/E,GAEA,GAAAkG,GAAAhG,KACAoL,EAAA,WAEAR,EAAAjF,OAAA3F,KAAAuB,MAAAqB,KAAA,WAEA4H,IAEA1K,EAAAyE,UAAAiG,OAIAxE,EAAAzE,MAAA6F,QAEAtH,EAAA2D,eAIAY,EAAA,SAAAC,GAEAxE,EAAAyE,UAAAD,IAGAtE,MAAA2B,OAEAyJ,IAIApL,KAAA8D,OAAAsH,EAAA/G,IAIAqB,KAAA,SAAArE,EAAA+C,EAAAK,EAAAgB,EAAA3F,GAEA,GAAAkG,GAAAhG,KACAqL,IAEAA,GAAA5G,GAAAL,EAEAwG,EAAAK,IAAAI,EAAA,WAEA,GAAAb,IAEA1K,EAAAyE,UAAAlD,EAAA+C,EAAAoG,UAGA,CACA,GAAAc,GAAAtF,EAAAzE,MAAAiD,IAAAC,EAEAuB,GAAAzE,MAAA4D,IAAAV,EAAAL,EAAA/C,GAEAvB,EAAA2D,UAAApC,EAAA+C,EAAAkH,QAKA1F,QAAA,SAAAvE,EAAAoD,EAAAL,EAAAtE,GAEA,GAAAkG,GAAAhG,IAEA4K,GAAAjF,OAAAlB,EAAA,WAEA+F,IAEA1K,EAAAyE,UAAAlD,EAAAmJ,OAIAxE,EAAAzE,MAAAoE,OAAAlB,GAEA3E,EAAA2D,UAAAW,EAAA/C,QAKA8E,MAAA,SAAArG,GAEA,GAAAmF,GAAA,SAAArC,EAAAD,GAEA7C,EAAA2D,UAAAb,EAAAzE,UAEAkG,EAAA,SAAAC,GAEAxE,EAAAyE,UAAAD,IAGAtE,MAAA8D,OAAAmB,EAAAZ,OCrNA1D,EAAAiB,QAAA,cAAA,KAEAZ,MAAA,WAEA,MAAAjD,GAAAwN,SAAAC,KAAAC,cAGA1J,KAAA,SAAAZ,EAAAlB,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,GAEA2G,EAAA0E,SAAAG,cAAA,OAkBA,OAjBA7E,GAAA8E,MAAAC,SAAA,2BACA/E,EAAA8E,MAAAE,SAAA,WACAhF,EAAA8E,MAAAtD,KAAA,IACAkD,SAAAC,KAAAM,YAAAjF,GAEA7G,KAAA4K,MAAA/D,EACA7G,KAAA4K,MAAAmB,KAAA/L,KAAAc,MAEAd,KAAAsB,KAEAtB,KAAAwD,qBAAA1D,GAAAE,OAIAF,EAAA6D,QAAA3D,KAAA8D,UAAA9D,OAGAF,GAGAgE,OAAA,SAAA7D,EAAAC,GAOA,IAAA,GALAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,GAEA8L,EAAAhM,KAAA4K,MAAAqB,YAAAC,WAAAF,WACAzK,EAAA,GAAAC,GAEA5C,EAAA,EAAAA,EAAAoN,EAAA7N,OAAAS,IAEA,IAEA,GAAAoK,GAAAgD,EAAApN,GACA6F,EAAAuE,EAAAmD,SACA1G,EAAAuD,EAAAoD,UACA/K,EAAArB,KAAAoD,OAAAqB,GACAL,EAAAlB,EAAAuC,EAEAlE,GAAA4D,IAAAV,EAAAL,EAAA/C,GAEA,MAAAiD,IAUA,MAJAtE,MAAAuB,MAAAiG,UAAAjG,GACAvB,KAAA2B,QAAA,EACA3B,KAAA4D,aAAA9D,GAEAA,GAGA6E,KAAA,SAAAtD,EAAAoD,EAAA3E,GAEA,GAAA2F,GAAAzF,KAAA4K,MAAAyB,aAAA5H,EAEA,IAAA,OAAAgB,EAEA3F,EAAA2D,UAAAvG,EAAAmE,QAGA,CACA,GAAA+C,GAAA,IAEA,KAEAA,EAAAlB,EAAAuC,GAEA,MAAAnB,GAEAxE,EAAAyE,UAAAD,IAGAxE,EAAA+D,aAEA7D,KAAAuB,MAAA4D,IAAAV,EAAAL,EAAA/C,GAEAvB,EAAA2D,UAAAW,EAAA/C,OAKAwD,SAAA,SAAA/E,GAIA,IAAA,GAFAkM,GAAAhM,KAAA4K,MAAAqB,YAAAC,WAAAF,WAEApN,EAAA,EAAAA,EAAAoN,EAAA7N,OAAAS,IAEAoB,KAAA4K,MAAA0B,gBAAAN,EAAApN,GAAAuN,SAGAnM,MAAAuB,MAAA6F,QAEAtH,EAAA2D,YAGAiC,KAAA,SAAArE,EAAA+C,EAAAK,EAAAgB,EAAA3F,GAEA,GAAAwL,GAAAtL,KAAAuB,MAAAiD,IAAAC,EAEA,KAEAzE,KAAA4K,MAAA2B,aAAA9H,EAAAgB,GAEA,MAAAnB,GAEAxE,EAAAyE,UAAAlD,EAAA+C,EAAAE,IAGAxE,EAAA+D,aAEA7D,KAAAuB,MAAA4D,IAAAV,EAAAL,EAAA/C,GAEAvB,EAAA2D,UAAApC,EAAA+C,EAAAkH,MAIA1F,QAAA,SAAAvE,EAAAoD,EAAAL,EAAAtE,GAEAE,KAAA4K,MAAA0B,gBAAA7H,GACAzE,KAAAuB,MAAAoE,OAAAlB,GAEA3E,EAAA2D,UAAAW,EAAA/C,OCvIAV,EAAAiB,QAAA,aAAA,EAAA,WAGA,GAAA4K,GAAA,WAEA,MAAA3B,QAAA4B,WAAA5B,OAAA6B,iBAAA7B,OAAA8B,cAAA9B,OAAA+B,YAAA/B,OAAAgC,aAGAC,EAAA,WAEA,MAAAjC,QAAAkC,gBAAAlC,OAAAmC,sBAAAnC,OAAAoC,mBAAApC,OAAAqC,iBAAArC,OAAAsC,kBASAC,EAAA,EACAC,EAAAP,KAAA,cAAAA,KAAAA,IAAAO,WAAA,WAEA,QAEArM,MAAA,WAEA,QAAAwL,KAGAzK,KAAA,SAAAZ,EAAAlB,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,GAEA8F,EAAAhG,KACAsN,EAAAd,IACAe,EAAAD,EAAAE,KAAAxN,KAAAc,KAAAsM,EA6BA,OA3BAG,GAAAE,QAAA,SAAAnJ,GAEAxE,EAAAyE,UAAAD,KAIAiJ,EAAAG,gBAAA,WAEA1H,EAAA2H,GAAAJ,EAAAzG,OACAd,EAAA2H,GAAAC,kBAAA5H,EAAAlF,MAAA+M,QAAA7N,KAAAqB,OAIAkM,EAAAO,UAAA,SAAAC,GAEA/H,EAAA2H,GAAAJ,EAAAzG,OAEAd,EAAA1E,KAEA0E,EAAAxC,qBAAA1D,GAAAkG,IAIAlG,EAAA6D,QAAAqC,EAAAlC,UAAAkC,KAIAlG,GAGAgE,OAAA,SAAA7D,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,GAEA8F,EAAAhG,KACAgO,EAAAhO,KAAA2N,GAAAM,YAAAjO,KAAAc,MAAAkN,YAAAhO,KAAAc,MACAoN,EAAAF,EAAAG,aACA5M,EAAA,GAAAC,EA6BA,OA3BA0M,GAAAJ,UAAA,SAAAxJ,GAEA,GAAAwC,GAAAoH,EAAApH,MAEA,IAAAA,EACA,CACA,GAAArC,GAAAqC,EAAAzF,IACA+C,EAAA0C,EAAA1C,MACA/C,EAAA2E,EAAA5C,OAAAqB,EAEAlD,GAAA4D,IAAAV,EAAAL,EAAA/C,GAEAyF,EAAA,kBAIAd,GAAAzE,MAAAiG,UAAAjG,GACAyE,EAAArE,QAAA,EACAqE,EAAApC,aAAA9D,GAAAkG,EAAAzE,MAAAoB,OAAAqD,EAAAzE,MAAAsB,SAIAqL,EAAAT,QAAA,SAAAnJ,GAEAxE,EAAAyE,UAAA3B,KAAA0B,KAGAxE,GAGA+E,SAAA,SAAA/E,GAEA,GAAAkG,GAAAhG,KACAgO,EAAAhO,KAAA2N,GAAAM,YAAAjO,KAAAc,KAAAuM,GAAAW,YAAAhO,KAAAc,KAEAkN,GAAAC,YAAAG,WAAA,WAEApI,EAAAzE,MAAA6F,QAEAtH,EAAA2D,YAGAuK,EAAAC,YAAAI,QAAA,SAAA/J,GAEAxE,EAAAyE,UAAAD,KAGA0J,EAAAM,SAGA3J,KAAA,SAAAtD,EAAAoD,EAAA3E,GAEA,GAAAkG,GAAAhG,KACAgO,EAAAhO,KAAA2N,GAAAM,YAAAjO,KAAAc,MAAAkN,YAAAhO,KAAAc,MACAyM,EAAAS,EAAAxJ,IAAAC,EAEA8I,GAAAO,UAAA,SAAAxJ,GAEA,GAAAiJ,EAAAzG,SAAA5J,EAEA4C,EAAA2D,UAAAvG,EAAAmE,QAGA,CACA,GAAA+C,GAAAmJ,EAAAzG,MAEAd,GAAAzE,MAAA4D,IAAAV,EAAAL,EAAA/C,GAEAvB,EAAA2D,UAAAW,EAAA/C,MAIAkM,EAAAE,QAAA,WAEA3N,EAAAyE,UAAAlD,EAAAkM,EAAArI,UAIAQ,KAAA,SAAArE,EAAA+C,EAAAK,EAAAgB,EAAA3F,GAEA,GAAAkG,GAAAhG,KACAgO,EAAAhO,KAAA2N,GAAAM,YAAAjO,KAAAc,KAAAuM,GAAAW,YAAAhO,KAAAc,KAEAkN,GAAAC,YAAAG,WAAA,WAEA,GAAA9C,GAAAtF,EAAAzE,MAAAiD,IAAAC,EAEAuB,GAAAzE,MAAA4D,IAAAV,EAAAL,EAAA/C,GAEAvB,EAAA2D,UAAApC,EAAA+C,EAAAkH,KAGA0C,EAAAC,YAAAI,QAAA,SAAA/J,GAEAxE,EAAAyE,UAAAlD,EAAA+C,EAAAE,KAGA0J,EAAA7I,IAAAf,EAAAK,IAGAmB,QAAA,SAAAvE,EAAAoD,EAAAL,EAAAtE,GAEA,GAAAkG,GAAAhG,KACAgO,EAAAhO,KAAA2N,GAAAM,YAAAjO,KAAAc,KAAAuM,GAAAW,YAAAhO,KAAAc,KAEAkN,GAAAC,YAAAG,WAAA,WAEApI,EAAAzE,MAAAoE,OAAAlB,GAEA3E,EAAA2D,UAAAW,EAAA/C,KAGA2M,EAAAC,YAAAI,QAAA,SAAA/J,GAEAxE,EAAAyE,UAAAlD,EAAAiD,KAGA0J,EAAA,UAAAvJ,IAGA0B,MAAA,SAAArG,GAEA,GACAkO,GAAAhO,KAAA2N,GAAAM,YAAAjO,KAAAc,KAAAuM,GAAAW,YAAAhO,KAAAc,MACAyM,EAAAS,EAAA/E,OAEAsE,GAAAO,UAAA,WAEAhO,EAAA2D,UAAA8J,EAAAzG,UAGAyG,EAAAE,QAAA,SAAAnJ,GAEAxE,EAAAyE,UAAAgJ,EAAArI,aChNAvE,EAAAiB,QAAA,gBAAA,EAAA,WAEA,GAAAgJ,GAAAC,OAAA0D,YAEA,QAEAlL,OAAA,SAAAhC,GAEA,MAAArB,MAAAgL,OAAAhI,EAAA3B,IAGA+B,OAAA,SAAAqB,GAEA,MAAAvB,GAAAuB,EAAAlF,UAAAS,KAAAgL,OAAA7M,UAGA6C,MAAA,WAEA,IAAA4J,EAEA,OAAA,CAEA,KAEA,GAAA9L,GAAAM,KAAAC,QAIA,OAHAuL,GAAA4D,QAAA1P,EAAAA,GACA8L,EAAA6D,WAAA3P,IAEA,EAEA,MAAAwF,GAEA,OAAA,IAIAvC,KAAA,SAAAZ,EAAAlB,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAaA,OAXAF,MAAAgL,OAAA3M,EAAA8C,EAAA6J,OAAAhL,KAAAc,KAAA,KAEAd,KAAAsB,KAEAtB,KAAAwD,qBAAA1D,GAAAE,OAIAF,EAAA6D,QAAA3D,KAAA8D,UAAA9D,OAGAF,GAGAgE,OAAA,SAAA7D,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,GACA8K,EAAAhL,KAAAgL,OACAzJ,EAAA,GAAAC,EAEA,KAEA,IAAA,GAAA5C,GAAA,EAAAA,EAAAgM,EAAAzM,OAAAS,IACA,CACA,GAAA6F,GAAAmG,EAAAvJ,IAAAzC,EAEA,IAAA6F,EAAAlF,UAAA,EAAAyL,EAAA7M,UAAA6M,EACA,CACA,GAAAvF,GAAAmF,EAAA8D,QAAAjK,GACAL,EAAAlB,EAAAuC,GACApE,EAAArB,KAAAoD,OAAAqB,EAEAlD,GAAA4D,IAAAV,EAAAL,EAAA/C,IAIArB,KAAAuB,MAAAiG,UAAAjG,GACAvB,KAAA2B,QAAA,EAEA,MAAA2C,GAEAxE,EAAAyE,UAAAD,IAKA,MAFAtE,MAAA4D,aAAA9D,GAEAA,GAGA+E,SAAA,SAAA/E,GAEA,GAAAkG,GAAAhG,KACAgL,EAAAhL,KAAAgL,OACAI,EAAA,SAAAxI,GAEA,IAEA,IAAA,GAAAhE,GAAA,EAAAA,EAAAgE,EAAAzE,OAAAS,IAEAgM,EAAA6D,WAAA7L,EAAAhE,IAGA,MAAA0F,GAEAxE,EAAAyE,UAAAD,IAGAxE,EAAA+D,aAEAmC,EAAAzE,MAAA6F,QAEAtH,EAAA2D,YAIA,IAAAzD,KAAA2B,OAEAyJ,EAAApL,KAAAuB,MAAAqB,UAGA,CACA,GAAAA,KAEA,KAEA,IAAA,GAAAhE,GAAA,EAAAA,EAAAgM,EAAAzM,OAAAS,IACA,CACA,GAAA6F,GAAAmG,EAAAvJ,IAAAzC,EAEA6F,GAAAlF,UAAA,EAAAyL,EAAA7M,UAAA6M,GAEApI,EAAAxE,KAAAqG,IAIA,MAAAH,GAEAxE,EAAAyE,UAAAD,IAGAxE,EAAA+D,YAEAuH,EAAAxI,KAKA+B,KAAA,SAAAtD,EAAAoD,EAAA3E,GAEA,IAEA,GAAA2F,GAAAmF,EAAA8D,QAAAjK,EAEA,IAAA,OAAAgB,EAEA3F,EAAA2D,UAAAvG,EAAAmE,QAGA,CACA,GAAA+C,GAAAlB,EAAAuC,EAEAzF,MAAAuB,MAAA4D,IAAAV,EAAAL,EAAA/C,GAEAvB,EAAA2D,UAAAW,EAAA/C,KAGA,MAAAiD,GAEAxE,EAAAyE,UAAAlD,EAAAiD,MAIAoB,KAAA,SAAArE,EAAA+C,EAAAK,EAAAgB,EAAA3F,GAEA,IAEA8K,EAAA4D,QAAA/J,EAAAgB,GAEA,MAAAnB,GAEAxE,EAAAyE,UAAAlD,EAAA+C,EAAAE,IAGA,GAAAxE,EAAA+D,WACA,CACA,GAAAyH,GAAAtL,KAAAuB,MAAAiD,IAAAC,EAEAzE,MAAAuB,MAAA4D,IAAAV,EAAAL,EAAA/C,GAEAvB,EAAA2D,UAAApC,EAAA+C,EAAAkH,MAIA1F,QAAA,SAAAvE,EAAAoD,EAAAL,EAAAtE,GAEA,IAEA8K,EAAA6D,WAAAhK,GAEA,MAAAH,GAEAxE,EAAAyE,UAAAlD,EAAAiD,IAGAxE,EAAA+D,aAEA7D,KAAAuB,MAAAoE,OAAAlB,GAEA3E,EAAA2D,UAAAW,EAAA/C,MAIA8E,MAAA,SAAArG,GAEA,GAAAmF,GAAA,SAAArC,EAAAD,GAEA7C,EAAA2D,UAAAb,EAAAzE,UAEAkG,EAAA,SAAAC,GAEAxE,EAAAyE,UAAAD,IAGAtE,MAAA8D,OAAAmB,EAAAZ,OC/NA1D,EAAAiB,QAAA,SAAA,GAEAZ,MAAA,WAEA,OAAA,GAGAe,KAAA,SAAAZ,EAAAlB,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAKA,OAHAF,MAAA2B,QAAA,EACA3B,KAAAwD,qBAAA1D,GAAAE,OAEAF,GAGAgE,OAAA,SAAA7D,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAIA,OAFAF,MAAA4D,aAAA9D,GAEAA,GAGA+E,SAAA,SAAA/E,GAEAE,KAAAuB,MAAA6F,QAEAtH,EAAA2D,YAGAiC,KAAA,SAAArE,EAAA+C,EAAAK,EAAAgB,EAAA3F,GAEA,GAAAwL,GAAAtL,KAAAuB,MAAAiD,IAAAC,EAEAzE,MAAAuB,MAAA4D,IAAAV,EAAAL,EAAA/C,GAEAvB,EAAA2D,UAAApC,EAAA+C,EAAAkH,KAGA1F,QAAA,SAAAvE,EAAAoD,EAAAL,EAAAtE,GAEAE,KAAAuB,MAAAoE,OAAAlB,GAEA3E,EAAA2D,UAAAW,EAAA/C,OC9CAV,EAAAiB,QAAA,gBAAA,EAAA,WAcA,QAAA+M,GAAAC,EAAAjQ,GAEA,MAAAiQ,GAAAC,QAAA,aAAA,SAAAC,EAAAxH,GAIA,MAFAA,GAAAyH,SAAAzH,GAEA5J,MAAA4J,IAAA,EAAAA,GAAAA,GAAA3I,EAAAR,OAEA2Q,EAGAnQ,EAAA2I,KAvBA,GAAA0H,GAAA,QAEAC,EAAA,mEACAC,EAAA,qCACAC,EAAA,4BACAC,EAAA,8CACAC,EAAA,uDACAC,EAAA,+BACAC,EAAA,oCACAC,EAAA,kBACAC,EAAA,mCAiBA,QAEAzO,MAAA,WAEA,QAAA6J,OAAA6E,cAGA3N,KAAA,SAAAZ,EAAAlB,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,GAEAyP,EAAAtR,EAAA8C,EAAAyO,SAAAZ,GACAa,EAAAxR,EAAA8C,EAAA+E,KAAA,OACA4J,EAAAzR,EAAA8C,EAAA4O,QAAA,OAEA/J,EAAAhG,KAEAqE,EAAA,SAAA2L,EAAA9K,GAEApF,EAAAyE,UAAAW,KAEA+K,EAAA,SAAAD,GAEAA,EAAAE,WAAAlK,EAAAiJ,cAAAkB,EAAA9L,IAEA8L,EAAA,SAAAH,EAAA7F,GAEAnE,EAAA1E,KAEA0E,EAAAxC,qBAAA1D,GAAAkG,IAIAlG,EAAA6D,QAAAqC,EAAAlC,UAAAkC,IAeA,OAXAhG,MAAAiP,WAAAN,EAAAM,GAAAjP,KAAAc,OACAd,KAAAkP,WAAAP,EAAAO,GAAAlP,KAAAc,OACAd,KAAAmP,eAAAR,EAAAQ,GAAAnP,KAAAc,OACAd,KAAAqP,WAAAV,EAAAU,GAAArP,KAAAc,OACAd,KAAAsP,WAAAX,EAAAW,GAAAtP,KAAAc,OACAd,KAAAwP,YAAAb,EAAAa,GAAAxP,KAAAc,OACAd,KAAAuP,UAAAZ,EAAAY,GAAAvP,KAAAc,OAEAd,KAAA2N,GAAA+B,aAAAC,EAAAG,EAAAH,EAAAE,GACA7P,KAAA2N,GAAAM,YAAAgC,EAAA5L,GAEAvE,GAGAgE,OAAA,SAAA7D,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,GACA8F,EAAAhG,KAEAqE,EAAA,SAAA2L,EAAA9K,GAEApF,EAAAyE,UAAAW,KAEAkL,EAAA,SAAAJ,GAEAA,EAAAE,WAAAlK,EAAAmJ,kBAAAkB,EAAAhM,IAEAgM,EAAA,SAAAL,EAAA7F,GAEA,GAAA5I,GAAA,GAAAC,EACA,KAEA,IAAA,GAAA5C,GAAA,EAAAA,EAAAuL,EAAAmG,KAAAnS,OAAAS,IACA,CACA,GAAAmG,GAAAoF,EAAAmG,KAAA1R,GACAwF,EAAAlB,EAAA6B,EAAAX,OACA/C,EAAA6B,EAAA6B,EAAAwL,GAEAhP,GAAA4D,IAAAJ,EAAAwL,GAAAnM,EAAA/C,GAGA2E,EAAAzE,MAAAiG,UAAAjG,GACAyE,EAAArE,QAAA,EAEA,MAAA2C,GAEAxE,EAAAyE,UAAAD,IAGA0B,EAAApC,aAAA9D,GAKA,OAFAE,MAAA2N,GAAA6C,gBAAAJ,EAAA/L,GAEAvE,GAGA6E,KAAA,SAAAtD,EAAAoD,EAAA3E,GAEA,GAAAkG,GAAAhG,KAEAqE,EAAA,SAAA2L,EAAA9K,GAEApF,EAAAyE,UAAAlD,EAAA6D,KAEAuL,EAAA,SAAAT,GAEAA,EAAAE,WAAAlK,EAAAkJ,YAAAzK,GAAAiM,EAAArM,IAEAqM,EAAA,SAAAV,EAAA7F,GAEA,GAAA/F,GAAAlH,CACA,KAEA,GAAAyT,GAAAxG,EAAAmG,KAAA,EAEAK,IAAAA,EAAAvM,QAAAlH,IAEAkH,EAAAlB,EAAAyN,EAAAvM,QAGA,MAAAE,GAEAxE,EAAAyE,UAAAlD,EAAAiD,IAGAxE,EAAA+D,aAEAO,IAAAlH,GAEA8I,EAAAzE,MAAA4D,IAAAV,EAAAL,EAAA/C,GAEAvB,EAAA2D,UAAAW,EAAA/C,KAIAvB,EAAA2D,UAAAvG,EAAAmE,KAKArB,MAAA2N,GAAA6C,gBAAAC,EAAApM,IAGAQ,SAAA,SAAA/E,GAEA,GAAAkG,GAAAhG,KAEAyQ,EAAA,SAAAT,GAEAA,EAAAE,WAAAlK,EAAAwJ,eAAAvK,EAAAZ,IAEAY,EAAA,SAAA+K,EAAA7F,GAEAnE,EAAAzE,MAAA6F,QAEAtH,EAAA2D,YAEAY,EAAA,SAAA2L,EAAA9K,GAEApF,EAAAyE,UAAAW,IAGAlF,MAAA2N,GAAAM,YAAAwC,EAAApM,IAGAqB,KAAA,SAAArE,EAAA+C,EAAAK,EAAAgB,EAAA3F,GAEA,GAAAkG,GAAAhG,KAEAyQ,EAAA,SAAAT,GAEAA,EAAAE,WAAAlK,EAAAqJ,YAAA5K,EAAAgB,GAAAR,EAAAZ,IAEAY,EAAA,SAAA+K,EAAA7F,GAEA,GAAAmB,GAAAtF,EAAAzE,MAAAiD,IAAAC,EAEAuB,GAAAzE,MAAA4D,IAAAV,EAAAL,EAAA/C,GAEAvB,EAAA2D,UAAApC,EAAA+C,EAAAkH,KAEAjH,EAAA,SAAA2L,EAAA9K,GAEApF,EAAAyE,UAAAlD,EAAA+C,EAAAc,IAGAlF,MAAA2N,GAAAM,YAAAwC,EAAApM,IAGAuB,QAAA,SAAAvE,EAAAoD,EAAAL,EAAAtE,GAEA,GAAAkG,GAAAhG,KAEAyQ,EAAA,SAAAT,GAEAA,EAAAE,WAAAlK,EAAAsJ,YAAA7K,GAAAQ,EAAAZ,IAEAY,EAAA,SAAA+K,EAAA7F,GAEAnE,EAAAzE,MAAAoE,OAAAlB,GAEA3E,EAAA2D,UAAAW,EAAA/C,KAEAgD,EAAA,SAAA2L,EAAA9K,GAEApF,EAAAyE,UAAAlD,EAAA6D,IAGAlF,MAAA2N,GAAAM,YAAAwC,EAAApM,IAGA8B,MAAA,SAAArG,GAEA,GAAAkG,GAAAhG,KAEAqE,EAAA,SAAA2L,EAAA9K,GAEApF,EAAAyE,UAAAW,KAEAuL,EAAA,SAAAT,GAEAA,EAAAE,WAAAlK,EAAAuJ,aAAAqB,EAAAvM,IAEAuM,EAAA,SAAAZ,EAAA7F,GAEArK,EAAA2D,UAAA0G,EAAAmG,KAAA,GAAArH,QAGAjJ,MAAA2N,GAAA6C,gBAAAC,EAAApM,IAGAe,MAAA,SAAAC,EAAApF,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAEA,IAAAF,KAAAG,cAAAH,KAAAoF,MAAAhF,UAAAN,GAEA,MAAAA,EAGA,IAAAkG,GAAAhG,KACAgF,EAAAhF,KAAAqB,IACAwP,EAAA,EACAC,IAEA,KAEA,IAAA,GAAAlS,GAAA,EAAAA,EAAAyG,EAAAlH,OAAAS,IACA,CACA,GAAAwF,GAAAiB,EAAAzG,GACAyC,EAAA+C,EAAAY,EAEAlH,GAAAuD,KAEAA,EAAA+C,EAAAY,GAAAxF,KAGAsR,EAAA1S,MAEAgG,MAAAA,EACA/C,IAAAA,EACAoD,OAAAzB,EAAA3B,GACAoE,SAAAzC,EAAAoB,MAIA,MAAAE,GAIA,MAFAxE,GAAAyE,UAAAc,EAAAwL,EAAAvM,IAEAxE,EAGA,GAAA2Q,GAAA,SAAAT,GAEA,IAAA,GAAApR,GAAA,EAAAA,EAAAkS,EAAA3S,OAAAS,IACA,CACA,GAAAmG,GAAA+L,EAAAlS,EAEAoR,GAAAE,WAAAlK,EAAAqJ,YAAAtK,EAAAN,OAAAM,EAAAU,UAAAR,EAAAZ,KAGAY,EAAA,SAAA+K,EAAA7F,GAEA,KAAA0G,IAAAxL,EAAAlH,QAAA2B,EAAA+D,WACA,CACA,IAAA,GAAAjF,GAAA,EAAAA,EAAAkS,EAAA3S,OAAAS,IACA,CACA,GAAAmG,GAAA+L,EAAAlS,EAEAoH,GAAAzE,MAAA4D,IAAAJ,EAAAN,OAAAM,EAAAX,MAAAW,EAAA1D,KAGAvB,EAAA2D,UAAA4B,MAGAhB,EAAA,SAAA2L,EAAA9K,GAEApF,EAAAyE,UAAAc,EAAAwL,EAAA3L,IAKA,OAFAlF,MAAA2N,GAAAM,YAAAwC,EAAApM,GAEAvE,GAGA+F,WAAA,SAAAjD,EAAA3C,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAEA,IAAAF,KAAAG,cAAAH,KAAA6F,WAAAzF,UAAAN,GAEA,MAAAA,EAGA,IAAAkG,GAAAhG,KACA+Q,KACApO,KACAqO,KACAC,EAAA,GAEAR,EAAA,SAAAT,GAEAA,EAAAE,WAAAe,EAAAF,EAAA9L,EAAAZ,IAEAY,EAAA,SAAA+K,EAAA7F,GAEA,IAAA,GAAAvL,GAAA,EAAAA,EAAAmS,EAAA5S,OAAAS,IAEAoH,EAAAzE,MAAAoE,OAAAoL,EAAAnS,GAGAkB,GAAA2D,UAAAd,EAAAC,KAEAyB,EAAA,SAAA2L,EAAA9K,GAEApF,EAAAyE,UAAA5B,EAAA,EAAAuC,IAGA,KAEA,IAAA,GAAAtG,GAAA,EAAAA,EAAAgE,EAAAzE,OAAAS,IACA,CACA,GAAAyC,GAAA2B,EAAAJ,EAAAhE,GAEAoB,MAAAuB,MAAAmD,IAAArD,KAEA0P,EAAAnS,GAAAyC,EACAsB,EAAA/D,GAAAoB,KAAAuB,MAAAiD,IAAAnD,GACA2P,EAAApS,GAAA,KAIAqS,EAAAtC,EAAAc,GAAAzP,KAAAc,KAAAkQ,EAAAE,KAAA,OAEA,MAAA5M,GAEAxE,EAAAyE,UAAA5B,EAAA2B,IAQA,MALAxE,GAAA+D,YAEA7D,KAAA2N,GAAAM,YAAAwC,EAAApM,GAGAvE,GAGAmE,QAAA,SAAArB,EAAA3C,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAEA,IAAAF,KAAAG,cAAAH,KAAA6F,WAAAzF,UAAAN,GAEA,MAAAA,EAGA,IAAAkG,GAAAhG,KACA+Q,KACAI,KACAxO,KACAqO,KACAC,EAAA,GAEAR,EAAA,SAAAT,GAEAA,EAAAE,WAAAe,EAAAF,EAAA9L,EAAAZ,IAEAY,EAAA,SAAA+K,EAAA7F,GAEA,IAAA,GAAAvL,GAAA,EAAAA,EAAAuL,EAAAmG,KAAAnS,OAAAS,IAIA,IAAA,GAFAwS,GAAAjH,EAAAmG,KAAA1R,GAEAoL,EAAA,EAAAA,EAAA+G,EAAA5S,OAAA6L,IAEA,GAAA+G,EAAA/G,KAAAoH,EAAAb,GACA,CACA,GAAAnM,GAAAlB,EAAAkO,EAAAhN,OACAkD,EAAA6J,EAAAnH,EAEArH,GAAA2E,GAAAlD,EACA4B,EAAAzE,MAAA4D,IAAAiM,EAAAb,GAAAnM,EAAAxB,EAAA0E,IAKAxH,EAAA2D,UAAAd,EAAAC,KAEAyB,EAAA,SAAA2L,EAAA9K,GAEApF,EAAAyE,UAAA3B,EAAAsC,IAGA,KAEA,IAAA,GAAAtG,GAAA,EAAAA,EAAAgE,EAAAzE,OAAAS,IACA,CACA,GAAAyC,GAAA2B,EAAAJ,EAAAhE,GAEAoB,MAAAuB,MAAAmD,IAAArD,GAEAsB,EAAA/D,GAAAoB,KAAAuB,MAAAiD,IAAAnD,IAIA0P,EAAA3S,KAAAiD,GACA8P,EAAA/S,KAAAQ,GACAoS,EAAA5S,KAAA,MAIA6S,EAAAtC,EAAAS,GAAApP,KAAAc,KAAAkQ,EAAAE,KAAA,OAEA,MAAA5M,GAEAxE,EAAAyE,UAAA5B,EAAA2B,IAeA,MAZAxE,GAAA+D,aAEAkN,EAAA5S,OAEA6B,KAAA2N,GAAAM,YAAAwC,EAAApM,GAIAvE,EAAA2D,UAAAd,EAAAC,KAIA9C,MC9dAa,EAAAiB,QAAA,cAAA,EAAA,WAGA,QAAAyP,KAEA,IAAAA,EAAA9P,MAEA,IAEA8P,EAAA9P,MAAA2B,EAAA2H,OAAAyG,IAAAxQ,MAEA,MAAAwD,GAEA+M,EAAA9P,SAIA,MAAA8P,GAAA9P,MAGA,QAAAgQ,KAEA,IAEA1G,OAAAyG,IAAAxQ,KAAAkC,EAAAqO,KAEA,MAAA/M,KAMA,OAEAjB,OAAA,SAAAhC,GAEA,MAAArB,MAAAgL,OAAAhI,EAAA3B,IAGA+B,OAAA,SAAAqB,GAEA,MAAAvB,GAAAuB,EAAAlF,UAAAS,KAAAgL,OAAA7M,UAGA6C,MAAA,WAEA,MAAA6J,QAAAyG,KAAA,mBAAAzG,QAAAyG,IAAAxQ,MAGAiB,KAAA,SAAAZ,EAAAlB,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,EAMA,OAJAF,MAAAgL,OAAA3M,EAAA8C,EAAA6J,OAAAhL,KAAAc,KAAA,KAEAhB,EAAA6D,QAAA3D,KAAA8D,UAAA9D,OAEAF,GAGAgE,OAAA,SAAA7D,EAAAC,GAEA,GAAAJ,GAAA,GAAAC,GAAAC,KAAAC,EAAAC,GACA8K,EAAAhL,KAAAgL,OACAzJ,EAAA,GAAAC,GACAgQ,EAAAH,GAEA,KAEA,IAAA,GAAA5M,KAAA+M,GAEA,GAAA/M,EAAAlF,UAAA,EAAAyL,EAAA7M,UAAA6M,EACA,CACA,GAAAvF,GAAA+L,EAAA/M,GACAL,EAAAlB,EAAAuC,GACApE,EAAArB,KAAAoD,OAAAqB,EAEAlD,GAAA4D,IAAAV,EAAAL,EAAA/C,GAIArB,KAAAuB,MAAAiG,UAAAjG,GACAvB,KAAA2B,QAAA,EAEA,MAAA2C,GAEAxE,EAAAyE,UAAAD,IAKA,MAFAtE,MAAA4D,aAAA9D,GAEAA,GAGA+E,SAAA,SAAA/E,GAKA,IAAA,GAHA8C,GAAA5C,KAAAuB,MAAAqB,KACA4O,EAAAH,IAEAzS,EAAA,EAAAA,EAAAgE,EAAAzE,OAAAS,UAEA4S,GAAA5O,EAAAhE,GAGAoB,MAAAuB,MAAA6F,QAEAmK,IAEAzR,EAAA2D,YAGAiC,KAAA,SAAArE,EAAA+C,EAAAK,EAAAgB,EAAA3F,GAEA,GAAA0R,GAAAH,IACA/F,EAAAtL,KAAAuB,MAAAiD,IAAAC,EAEA+M,GAAA/M,GAAAL,EAEApE,KAAAuB,MAAA4D,IAAAV,EAAAL,EAAA/C,GAEAkQ,IAEAzR,EAAA2D,UAAApC,EAAA+C,EAAAkH,KAGA1F,QAAA,SAAAvE,EAAAoD,EAAAL,EAAAtE,GAEA,GAAA0R,GAAAH,UAEAG,GAAA/M,GAEAzE,KAAAuB,MAAAoE,OAAAlB,GAEA8M,IAEAzR,EAAA2D,UAAAW,EAAA/C,QCtIApE,EAAA0D,MAAAA,EACA1D,EAAA0D,MAAAF,WAAAA,EACAxD,EAAA0D,MAAAZ,QAAAA,EACA9C,EAAA0D,MAAAa,QAAAA,GAEAqJ","file":"stork.min.js","sourcesContent":["'use strict';\n\n(function(global, undefined) \n{\n\n\n","var toJson = JSON.stringify;\n\nvar fromJson = JSON.parse;\n\nfunction isFunc(x)\n{\n  return !!(x && x.constructor && x.call && x.apply);\n}\n\nfunction isObject(x)\n{\n  return typeof x === 'object' && x !== null;\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction undef(x)\n{\n  return typeof x === 'undefined';\n}\n\nfunction def(x)\n{\n  return typeof x !== 'undefined';\n}\n\nfunction replaceArray(dest, src)\n{\n  dest.length = 0;\n  dest.push.apply( dest, src );\n}\n\nfunction coalesce(a, b, c, d)\n{\n  if (def(a)) return a;\n  if (def(b)) return b;\n  if (def(c)) return c;\n  return d;\n}\n\nfunction swap(arr, i, j)\n{\n  var temp = arr[i]; \n  arr[i] = arr[j]; \n  arr[j] = temp;\n}\n\nfunction noop()\n{\n}\n\nfunction fn(func)\n{\n  return isFunc( func ) ? func : noop;\n}\n\nfunction fncoalesce(a, b)\n{\n  return isFunc( a ) ? a : (isFunc(b) ? b : noop);\n}\n\nfunction copy(from, to)\n{\n  for (var prop in from)\n  {\n    to[ prop ] = from[ prop ];\n  }\n\n  return to;\n}\n\nfunction S4() \n{\n  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n}\n\nfunction uuid() \n{\n    return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n}\n\nfunction compareAdapters(a, b)\n{\n  var d = b.priority - a.priority;\n\n  return d === 0 ? 0 : (d < 0 ? -1 : 1);\n}\n\nfunction $promise(methodName, func)\n{\n  return function()\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this[ methodName ], arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var args = Array.prototype.slice.call( arguments );\n    args.pop(); // remove failure\n    args.pop(); // remove success\n    args.push( promise ); // add promise\n\n    // Call the wrapped function\n    func.apply( this, args );\n\n    return promise;\n  };\n}\n\nfunction getAdapter(adapterName)\n{\n  if ( adapterName )\n  {\n    for (var i = 0; i < Stork.adapters.length; i++) \n    {\n      var adapt = Stork.adapters[i];\n\n      if ( adapt.name === adapterName && adapt.definition.valid() )\n      {\n        return adapt;\n      }\n    }\n  }\n\n  if ( !getAdapter.chosen ) \n  {\n    Stork.adapters.sort( compareAdapters );\n\n    for (var i = 0; i < Stork.adapters.length; i++) \n    {\n      var adapt = Stork.adapters[i];\n\n      if ( adapt.definition.valid() )\n      {\n        return getAdapter.chosen = adapt;\n      }\n    }\n  }\n\n  return getAdapter.chosen;\n}","\n\n/**\n * Creates a Stork instance.\n *\n * ```javascript\n * new Stork(); // global key-values/records\n * new Stork({name: 'todos'}); // grouped key-values/records\n * new Stork({name: 'rooms', key: 'ID'}); // records have 'ID' property which is used as key for saving records\n * new Stork({name: 'you are', lazy: true}); // records aren't all loaded on start, they are loaded as needed\n * new Stork({name: 'users', database: 'myapp', size: 65536}); // some storage engines support a custom database name and a desired size for the database\n *\n * new Stork(options, function(stork) {\n *   // stork = initialized stork instance\n * });\n * ```\n *\n * @constructor\n * @class\n * @param {Object} [options]\n *        An object of options, see the following properties for more details:\n *        {@link Stork#key}, {@link Stork#name}, {@link Stork#lazy}.\n * @param {Stork~initSuccess} [success]\n *        The function to invoke when the instance successfully initializes.\n * @param {Stork~initFailure} [failure]\n *        The function to invoke if this instance failes to initialize.\n */\nfunction Stork(options, success, failure)\n{\n  // If this wasn't called as a constructor, return an instance!\n  if (!(this instanceof Stork)) return new Stork( options, success, failure );\n\n  // JSON is required for StorkJS\n  if (!JSON) throw 'JSON unavailable! Include http://www.json.org/json2.js to fix.';\n\n  /**\n   * The options passed to the constructor and subsequently to the \n   * {@link Stork#init} function.\n   * \n   * @type {Object}\n   * @default  {}\n   */\n  this.options = options = (options || {});\n\n  /**\n   * The name of the property to use as the key for the \n   * {@link Stork#save} and {@link Stork#batch} functions. This should \n   * be specified in the `options` object.\n   * \n   * @type {String}\n   * @default 'id'\n   */\n  this.key = coalesce( options.key, 'id' );\n\n  /**\n   * The name used to group the key-value pairs. This is essentially\n   * a table name. This should be specified in the `options` object.\n   *           \n   * @type {String}\n   * @default ''\n   */\n  this.name = coalesce( options.name, '' );\n\n  /**\n   * If true, key-value pairs will be lazily loaded instead of loaded\n   * all at once on initialization. This should be specified in the \n   * `options` object.\n   *           \n   * @type {Boolean}\n   * @default false\n   */\n  this.lazy = coalesce( options.lazy, false );\n\n  /**\n   * The cache of key-value pairs currently loaded. If \n   * {@link Stork#loaded} is true then all key-value pairs exist in\n   * the cache.\n   *           \n   * @type {FastMap}\n   */\n  this.cache = new FastMap();\n\n  /**\n   * An array of functions called by the user before this instances\n   * was finished initializing. Once this instance successfully finishes \n   * initialization all pending functions are invoked in the order\n   * in which they were originally made and this property is set to\n   * `null`.\n   *           \n   * @type {Object[]}\n   */\n  this.pending = [];\n\n  /**\n   * True if this instance has successfully initialized, otherwise\n   * false if it failed to initialize or has not finished initializing.\n   *           \n   * @type {Boolean}\n   */\n  this.initialized = false;\n\n  /**\n   * True if the entire instance has been loaded into the \n   * {@link Stork#cache}, otherwise false. If lazy is specifed as true\n   * loaded will be false until any of the following methods are\n   * invoked: {@link Stork#each}, {@link Stork#all}, or\n   * {@link Stork#reload}.\n   *           \n   * @type {Boolean}\n   */\n  this.loaded = false;\n\n  /**\n   * The adapter `Object` with `String` name, `Number` priority, and\n   * `Object` definition properties. The adapter can be chosen based\n   * on the `options.adapter` and falls back to the next supported\n   * adapter based on priority.\n   *           \n   * @type {Object}\n   */\n  this.adapter = getAdapter( options.adapter );\n\n  // Copy the chosen adapter methods into this instance.\n  copy( this.adapter.definition, this );\n  \n  // Call each plugin on this instance before initialization starts.\n  for (var i = 0; i < Stork.plugins.length; i++)\n  {\n    Stork.plugins[ i ]( this );\n  }\n\n  // Start initializaing this instance.\n  this.initializing = this.init( this.options, success, failure );\n}\n\nStork.prototype = \n{\n\n  /**\n   * Decodes a key from a string.\n   *\n   * @method decode\n   * @param {String} rawKey\n   *        The string to decode into a key.\n   * @return {Any}\n   */\n  decode: fromJson,\n\n  /**\n   * Encodes a key into a string.\n   *\n   * @method encode\n   * @param {Any} key\n   *        The key to encode to a string.\n   * @return {String}\n   */\n  encode: toJson,\n  \n  /**\n   * Returns true if this Stork is not ready for storage calls and queues\n   * the method and arguments to be called after this Stork is initialized.\n   *\n   * @private\n   * @param  {function} method \n   *         The reference to the calling function\n   * @param  {Arguments} args \n   *         The arguments of the calling function\n   * @param  {Stork.Promise} promise \n   *         The promise to notify when the function is finally called.\n   * @return {Boolean} -\n   *         Returns true if the calling function should return this\n   *         immediately because the implementation isn't initialized yet.\n   */\n  handlePending: function(method, args, promise) \n  {\n    var handled = !this.initialized;\n\n    if (handled) \n    {\n      this.pending.push(\n      {\n        method: method,\n        arguments: Array.prototype.slice.call( args ),\n        promise: promise\n\n      });\n    }\n\n    return handled;\n  },\n\n  /**\n   * Marks the Stork as initialized and executes any pending functions.\n   *\n   * @private\n   * @param  {Stork.Promise} promise\n   *         The promise for {@link Stork#init} or {@link Stork#reload}.\n   * @return {Stork} -\n   *         A reference to this.\n   */\n  finishInitialization: function(promise, args) \n  {\n    if (!this.initialized) \n    {\n      this.initialized = true;\n\n      promise.$success( args );\n\n      for (var i = 0; i < this.pending.length; i++) \n      {\n        var pending = this.pending[ i ];\n        var newPromise = pending.method.apply( this, pending.arguments );\n\n        if ( pending.promise )\n        {\n          pending.promise.$bindTo( newPromise );\n        }\n      }\n\n      this.pending = null;\n    }\n\n    return this;\n  },\n\n  /**\n   * Finishes the reload function passing the now cached values and keys\n   * to the success callbacks.\n   *\n   * @private\n   * @param  {Stock.Promise} promise\n   *         The promise for the {@link Stork#reload} invocation.\n   */\n  finishReload: function(promise)\n  {\n    if ( promise.$pending() )\n    {\n      var cache = this.cache;\n\n      if ( this.initialized )\n      {\n        promise.$success( [cache.values, cache.okeys] );\n      }\n      else\n      {\n        this.finishInitialization( promise, [cache.values, cache.okeys] );\n      }\n    }\n  },\n\n  /**\n   * Determines whether this Stork implementation is available.\n   * \n   * @return {Boolean} True if this Stork is usable, otherwise false.\n   */\n  valid: function() \n  {\n    throw 'Stork.valid is not implemented';\n  },\n  \n  /**\n   * The format of success callback for {@link Stork#init}.\n   * \n   * @callback Stork~initSuccess\n   * @param {Stork} stork\n   *        The reference to this Stork instance.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#init}.\n   * \n   * @callback Stork~initFailure\n   * @param {Any} error\n   *        The error that was thrown.\n   */\n\n  /**\n   * Initializes this Stork instance. If `options.lazy` is passed in as true,\n   * key-value pairs will not be loaded here, otherwise all key-value\n   * pairs will be loaded. This function is automatically called at the end\n   * of the Stork constructor with the options passed to the constructor.\n   * \n   * @param  {Object} options\n   *         The initialization options.\n   * @param  {Stork~initSuccess} [success]\n   *         The function to invoke when the Stork instance successfully \n   *         initializes and is usable.\n   * @param  {Stork~initFailure} [failure]\n   *         The function to invoke if there's a problem initializing.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  init: function(options, success, failure) \n  {\n    throw 'Stork.init is not implemented';\n  },\n  \n  /**\n   * The format of success callback for {@link Stork#reload}.\n   * \n   * @callback Stork~reloadSuccess\n   * @param {Array} values\n   *        An array of all values loaded. This should not be modified.\n   * @param {Array} keys\n   *        An array of all keys loaded. This should not be modified.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#reload}.\n   * \n   * @callback Stork~reloadFailure\n   * @param {Any} error\n   *        The error that was thrown.\n   */\n\n  /**\n   * Loads all key-value pairs into the cache which will increase performance \n   * for fetching operations ({@link Stork#get}, {@link Stork#getMany}, \n   * {@link Stork#each}, {@link Stork#all}).\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(values, keys) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(error) {\n   *   // uh oh!\n   * };\n   * db.reload(); // I don't care about whether it succeeds or fails\n   * db.reload( onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.reload().then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Stork~reloadSuccess} [success]\n   *         The function to invoke when all key-value pairs are loaded.\n   * @param  {Stork~reloadFailure} [failure]\n   *         The function to invoke if there was a problem loading all key-value\n   *         pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  reload: function(success, failure)\n  {\n    throw 'Stork.reload is not implemented';\n  },\n\n  /**\n   * A helper method for creating a consistent look when chaining promised\n   * functions.\n   *\n   * *Usage*\n   * ```javascript\n   * db.then(function() { // <--\n   *     // this === db, how big is it?\n   *     return this.size();\n   *   })\n   *   .then(function(size) {\n   *     // size has been determined, destroy!\n   *     return this.destroy();\n   *   })\n   *   .then(function(){\n   *     // You sunk my battleship! (destroyed db)\n   *   })\n   * ;\n   * ```\n   * \n   * @param  {function} callback\n   *         The callback to invoke with this Stork instance as `this`.\n   * @return {Stork.Promise} -\n   *         The callback should return a Promise to chain additional functions.\n   */\n  then: function(callback)\n  {\n    return callback.apply( this );\n  },\n\n  /**\n   * The format of success callback for {@link Stork#getMany}.\n   * \n   * @callback Stork~getManySuccess\n   * @param {Array} values\n   *        The array of values associated to the given keys. If a key wasn't \n   *        found then the value in the array will be `undefined`.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#getMany}.\n   * \n   * @callback Stork~getManyFailure\n   * @param {Array} keys\n   *        The keys given that resulted in an error.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Gets an array of values given an array of keys and returns it to the\n   * callback. If the key doesn't exist then the corresponding value in the\n   * returned array will be `undefined`.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(values, keys) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(keys, error) {\n   *   // uh oh!\n   * };\n   * db.getMany( arrayOfKeys, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.getMany( arrayOfKeys ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Array} keys\n   *         The keys of the key-value pairs to get.\n   * @param  {Stork~getManySuccess} [success]\n   *         THe function to invoke with the values found.\n   * @param  {Stork~getManyFailure} [failure]\n   *         The function to invoke if there was a problem getting values.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  getMany: function(keys, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.getMany, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var gotten = 0;\n    var values = [];\n\n    var addValue = function(i)\n    {\n      return function(value)\n      {\n        values[ i ] = value;\n\n        if ( ++gotten === keys.length )\n        {\n          promise.$success( [values, keys] );\n        }\n      };\n    };\n    var onFailure = function(e)\n    {\n      promise.$failure( [keys, e] );\n    };\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.get( keys[ i ], addValue( i ), onFailure );\n    }\n\n    return promise;\n  },\n\n  /**\n   * The format of success callback for {@link Stork#get}.\n   * \n   * @callback Stork~getSuccess\n   * @param {Any} value\n   *        The value associated to the given key or `undefined` if one was not\n   *        found.\n   * @param {Any} key\n   *        The key of the key-value pair that was successfully found.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#get}.\n   * \n   * @callback Stork~getFailure\n   * @param {Any} key\n   *        The key of the key-value pair that was unsuccessfully gotten.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Gets the value for the given key and returns it to the callback. If the\n   * key doesn't exist then `undefined` is given to the callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(value, key) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(key, error) {\n   *   // uh oh!\n   * };\n   * db.get( key, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.get( key ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Any} key\n   *         The key of the key-value pair to get.\n   * @param  {Stork~getSuccess} [success]\n   *         The function to invoke if a value is successfully found or not found.\n   * @param  {Stork~getFailure} [failure]\n   *         The function to invoke if there was a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  get: function (key, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.get, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var rawKey;\n\n    try\n    {\n      rawKey = this.encode( key );\n    }\n    catch (e)\n    {\n      promise.$failure( [key, e] );\n    }\n\n    if ( promise.$pending() )\n    {\n      if ( this.cache.has( rawKey ) )\n      {\n        promise.$success( [this.cache.get( rawKey ), key] );\n      }\n      else if ( this.loaded )\n      {\n        promise.$success( [undefined, key] );\n      }\n      else\n      {\n        this._get( key, rawKey, promise );\n      }\n    }\n\n    return promise;\n  },\n\n  _get: function(key, rawKey, promise)\n  {\n    throw 'Stork._get is not implemented';\n  },\n\n  /**\n   * The format of success callback for {@link Stork#destroy}.\n   * \n   * @callback Stork~destroySuccess\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#destroy}.\n   * \n   * @callback Stork~destroyFailure\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Removes all key-value pairs and invokes the callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function() {\n   *   // DESTROYED!\n   * };\n   * var onFailureFunc = function(error) {\n   *   // uh oh!\n   * };\n   * db.destroy(); // I don't care about whether it succeeds or fails\n   * db.destroy( onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.destroy().then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Stork~destroySuccess} [success]\n   *         The function invoked when all key-value pairs are removed.\n   * @param  {Stork~destroyFailure} [failure]\n   *         The function invoked if there was a problem removing all key-value\n   *         pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  destroy: function(success, failure) \n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.destroy, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    this._destroy( promise );\n\n    return promise;\n  },\n\n  _destroy: function(promise)\n  {\n    throw 'Stork._destroy is not implemented';\n  },\n\n  /**\n   * The format of success callback for {@link Stork#save}.\n   * \n   * @callback Stork~saveSuccess\n   * @param {Object} record\n   *        The record that successfully saved.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#save}.\n   * \n   * @callback Stork~saveFailure\n   * @param {Object} record\n   *        The record that failed to save.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Saves an `Object` record and returns the saved record to the callback. The \n   * record is the value in the key-value pair and the key is pulled from the \n   * record based on the options passed into the {@link Stork#init} function. \n   * The property used as the key is `this.key` and by default is `id`. If a key \n   * isn't specified in a record then a UUID is used and placed in the object.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(record) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(record, error) {\n   *   // uh oh!\n   * };\n   * db.save( record ); // I don't care about whether it succeeds or fails\n   * db.save( record, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.save( record ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Object} record\n   *         The record to save.\n   * @param  {Stork~saveSuccess} [success]\n   *         The function to invoke when the record is successfully saved.\n   * @param  {Stork~saveFailure} [failure]\n   *         The function to invoke if the record fails to save.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  save: function(record, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.save, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var keyName = this.key;\n    var key = record[ keyName ];\n\n    if ( undef( key ) ) \n    {\n      key = record[ keyName ] = uuid();\n    }\n\n    var onSuccess = function(key, value)\n    {\n      promise.$success( [value] );\n    };\n    var onFailure = function(key, value, error)\n    {\n      promise.$failure( [value, error] );\n    };\n\n    this.put( key, record, onSuccess, onFailure );\n\n    return promise;\n  },\n\n  /**\n   * The format of success callback for {@link Stork#batch}.\n   * \n   * @callback Stork~batchSuccess\n   * @param {Array} records\n   *        The records successfully saved.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#batch}.\n   * \n   * @callback Stork~batchFailure\n   * @param {Array} records\n   *        The records unsuccessfully saved.\n   * @param {Number} recordsSaved\n   *        The number of records that successfully saved.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Saves an array of `Object` records and returns the records saved to the \n   * callback. The record is the value in the key-value pair and the key is \n   * pulled from the record based on the options passed into the \n   * {@link Stork#init} function. The property used as the key is `this.key` and\n   * by default is `id`. If a key isn't specified in a record then a UUID is \n   * used and placed in the object.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(records) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(records, recordsSaved, error) {\n   *   // uh oh!\n   * };\n   * db.batch( records ); // I don't care about whether it succeeds or fails\n   * db.batch( records, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.batch( records ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Array} records\n   *         The array of objects to save.\n   * @param  {Stork~batchSuccess} [success]\n   *         The function to invoke when all records are successfully saved.\n   * @param  {Stork~batchFailure} [failure]\n   *         The function to invoke if any of the records failed to save.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  batch: function(records, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.batch, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var saves = 0;\n\n    var onSaved = function() \n    {\n      if ( ++saves === records.length ) \n      {\n        promise.$success( [records] );\n      }\n    }\n    var setFailure = function(e) \n    {\n      promise.$failure( [records, saves, e] );\n    };\n\n    for (var i = 0; i < records.length && !promise.state; i++)\n    {\n      this.save( records[ i ], onSaved, setFailure );\n    }\n\n    return promise;\n  },\n\n  /**\n   * The format of success callback for {@link Stork#put}.\n   * \n   * @callback Stork~putSuccess\n   * @param {Any} key\n   *        The key to add or update.\n   * @param {Any} value\n   *        The value to add or update.\n   * @param {Any} previousValue\n   *        The previous value for the key if it exists in the cache.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#put}.\n   * \n   * @callback Stork~putFailure\n   * @param {Any} key\n   *        The key that failed to be added or updated.\n   * @param {Any} value\n   *        The value that failed to be added or updated.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Adds or updates the value mapped by the given key and returns the key\n   * and value placed to the callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(key, value, previousValue) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(key, value, error) {\n   *   // uh oh!\n   * };\n   * db.put( key, value ); // I don't care about whether it succeeds or fails\n   * db.put( key, value, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.put( key, value ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Any} key\n   *         The key to add or update.\n   * @param  {Any} value\n   *         The value to add or update.\n   * @param  {Stork~putSuccess} [success]\n   *         The function to invoke when the key-value pair is successfully \n   *         added or updated.\n   * @param  {Stork~putFailure} [failure]\n   *         The function to invoke if there was a problem putting the key-value\n   *         pair.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  put: function(key, value, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.put, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var rawKey, rawValue;\n\n    try\n    {\n      rawKey = this.encode( key );\n      rawValue = toJson( value );   \n    }\n    catch (e)\n    {\n      promise.$failure( [key, value, e] );\n    }\n\n    if ( promise.$pending() )\n    {\n      this._put( key, value, rawKey, rawValue, promise );\n    }\n\n    return promise;\n  },\n\n  _put: function(key, value, rawKey, rawValue, promise)\n  {\n    throw 'Stork._put is not implemented';\n  },\n\n  /**\n   * The format of success callback for {@link Stork#remove}.\n   * \n   * @callback Stork~removeSuccess\n   * @param {Any} value\n   *        The value removed or `undefined` if the key didn't exist.\n   * @param {Any} key\n   *        The key of the key-value pair that was removed.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#remove}.\n   * \n   * @callback Stork~removeFailure\n   * @param {Any} key\n   *        The key of the key-value pair that failed to be removed.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Removes the key-value pair for the given key and returns the removed value\n   * to the callback if on existed.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(value, key) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(key, error) {\n   *   // uh oh!\n   * };\n   * db.remove( key ); // I don't care about whether it succeeds or fails\n   * db.remove( key, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.remove( key ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Any} key\n   *         The key of the key-value pair to remove.\n   * @param  {Stork~removeSuccess} [success]\n   *         The function to invoke then the key is removed or doesn't exist.\n   * @param  {Stork~removeFailure} [failure]\n   *         The function to invoke if there was a problem removing the key.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  remove: function(key, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.remove, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var rawKey;\n\n    try\n    {\n      rawKey = this.encode( key );\n    }\n    catch (e)\n    {\n      promise.$failure( [key, e] );\n    }\n\n    if ( promise.$pending() )\n    {\n      if ( this.loaded && !this.cache.has( rawKey ) )\n      {\n        promise.$success( [undefined, key] );\n      }\n      else\n      {\n        var value = this.cache.get( rawKey );\n\n        this._remove( key, rawKey, value, promise );      \n      }\n    }\n\n    return promise;\n  },\n\n  _remove: function(key, rawKey, value, promise)\n  {\n    throw 'Stork._remove is not implemented';\n  },\n\n  /**\n   * The format of success callback for {@link Stork#removeMany}.\n   * \n   * @callback Stork~removeManySuccess\n   * @param {Array} values\n   *        The values removed in the same order of the keys. If a key didn't\n   *        exist then the corresponding value in the array will be `undefined`.\n   * @param {Array} keys\n   *        The corresponding removed keys.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#removeMany}.\n   * \n   * @callback Stork~removeManyFailure\n   * @param {Array} values\n   *        The values removed in the same order of the given keys.\n   * @param {Number} removed\n   *        The number of records removed before the error occurred.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Removes multiple key-value pairs and returns the values removed to the \n   * given callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(values, keys) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(values, removed, error) {\n   *   // uh oh!\n   * };\n   * db.removeMany( keys ); // I don't care about whether it succeeds or fails\n   * db.removeMany( keys, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.removeMany( keys ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Array} keys\n   *         The array of keys to remove.\n   * @param  {Stork~removeManySuccess} [success]\n   *         The function to invoke once all matching key-value pairs are \n   *         removed, with the values removed.\n   * @param  {Stork~removeManyFailure} [failure]\n   *         The function to invoke if there was a problem removing any of the\n   *         key-value pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  removeMany: function(keys, success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.removeMany, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var values = [];\n    var removed = 0;\n\n    var addValue = function(i)\n    {\n      return function(value) \n      {\n        values[ i ] = value;\n\n        if ( ++removed === keys.length ) \n        {\n          promise.$success( [values, keys] );\n        }\n      }\n    };\n    var setFailure = function(e) \n    {\n      promise.$failure( [values, removed, e] );\n    };\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      this.remove( keys[ i ], addValue( i ), setFailure )\n    }\n\n    return promise;\n  },\n\n  /**\n   * The format of success callback for {@link Stork#each}.\n   * \n   * @callback Stork~eachSuccess\n   * @param {Any} value\n   *        The value of the current key-value pair.\n   * @param {Any} key\n   *        The key of the current key-value pair.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#each}.\n   * \n   * @callback Stork~eachFailure\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Returns every key-value pair individually to the given callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onPairFunc = function(value, key) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(error) {\n   *   // uh oh!\n   * };\n   * db.each( onPairFunc ); // I don't care about whether it fails\n   * db.each( onPairFunc, onFailureFunc ); // listen for success & failure\n   * ```\n   * \n   * @param  {Stork~eachSuccess} callback\n   *         The function to invoke for each key-value pair.\n   * @param  {Stork~eachFailure} [failure]\n   *         The function to invoke if there was a problem iterating the \n   *         key-value pairs.\n   * @return {Stork} -\n   *         The reference to this Stork instance.\n   */\n  each: function(callback, failure)\n  {\n    if ( !isFunc( callback ) || this.handlePending( this.each, arguments ) ) \n    {\n      return this;\n    }\n\n    var stork = this;\n    var iterate = function(values, keys)\n    {\n      for (var i = 0; i < values.length; i++)\n      {\n        callback.call( stork, values[ i ], keys[ i ] );\n      }\n    };\n\n    if ( this.loaded )\n    {\n      var keys = this.cache.okeys;\n      var values = this.cache.values;\n\n      iterate( values, keys );\n    }\n    else\n    {\n      this.reload( iterate, failure );\n    }\n\n    return this;\n  },\n\n  /**\n   * The format of success callback for {@link Stork#size}.\n   * \n   * @callback Stork~sizeSuccess\n   * @param {Number} count\n   *        The total number of key-value pairs.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#size}.\n   * \n   * @callback Stork~sizeFailure\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Returns the number of key-value pairs to the success callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(count) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(error) {\n   *   // uh oh!\n   * };\n   * db.size( onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.size().then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Stork~sizeSuccess} [success]\n   *         The function to invoke with the number of key-value pairs.\n   * @param  {Stork~sizeFailure} [failure]\n   *         The function to invoke if there was a problem determining the\n   *         number of key-value pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  size: function(success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.size, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    if ( this.loaded )\n    {\n      promise.$success( [this.cache.size()] );\n    }\n    else\n    {\n      this._size( promise );\n    }\n\n    return promise;\n  },\n\n  _size: function(promise)\n  {\n    throw 'Stork._size is not implemented';\n  },\n  \n  /**\n   * The format of success callback for {@link Stork#all}.\n   * \n   * @callback Stork~allSuccess\n   * @param {Array} values\n   *        An array of all values stored. This should not be modified.\n   * @param {Array} keys\n   *        An array of all keys stored. This should not be modified.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#all}.\n   * \n   * @callback Stork~allFailure\n   * @param {Any} error\n   *        The error that was thrown.\n   */\n\n  /**\n   * Returns all key-value pairs to the success callback.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(values, keys) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(error) {\n   *   // uh oh!\n   * };\n   * db.all( onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.all().then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   * \n   * @param  {Stork~allSuccess} [success]\n   *         The function to invoke with all the key-value pairs.\n   * @param  {Stork~allFailure} [failure]\n   *         The function to invoke if this Stork was unable to return all of the key-value pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  all: function(success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    if ( this.handlePending( this.all, arguments, promise ) ) \n    {\n      return promise;\n    }\n\n    var returnAll = function(values, keys)\n    {\n      promise.$success( [values, keys] );\n    };\n    var onFailure = function(error)\n    {\n      promise.$failure( [error] );\n    };\n\n    if ( this.loaded )\n    {\n      var keys = this.cache.okeys;\n      var values = this.cache.values;\n\n      returnAll( values, keys );\n    }\n    else\n    {\n      this.reload( returnAll, onFailure );\n    }\n\n    return promise;\n  }\n\n};\n\n","\n/**\n * Instantiates a new Promise. \n *\n * @constructor\n * @memberOf Stork\n * @param {Object} context\n *        The `this` to apply to the success, failure, and error callbacks.\n * @param {function} [success]\n *        A success callback to add to be invoked.\n * @param {function} [failure]\n *        A failure callback to add to be invoked.\n * @param {Stork.Promise} [root]\n *        The root promise, if one exists.\n */\nfunction Promise(context, success, failure, root)\n{\n  /**\n   * The `this` to apply to the callbacks.\n   * \n   * @type {Object}\n   */\n  this.context = context;\n\n  /**\n   * The root promise in the chain of promises.\n   * \n   * @type {Promise}\n   */\n  this.root = root || this;\n\n  /**\n   * The next promise in the chain of promises.\n   * \n   * @type {Promise}\n   */\n  this.next = null;\n\n  /**\n   * The first valid promise returned from a success callback.\n   * @private\n   * \n   * @type {Promise}\n   */\n  this.nextFromSuccess = null;\n\n  /**\n   * The current state of this promise.\n   * \n   * @type {Number}\n   * @default Promise.PENDING\n   */\n  this.state = Promise.PENDING;\n\n  /**\n   * An array of success callbacks to invoke when the promise is marked as\n   * successful.\n   * \n   * @type {function[]}\n   */\n  this.successes = [];\n\n  /**\n   * An array of failure callbacks to invoke when the promise is marked as\n   * failed.\n   * \n   * @type {function[]}\n   */\n  this.failures = [];\n\n  /**\n   * An array of error callbacks stored at the root promise.\n   * \n   * @type {function[]}\n   */\n  this.errors = [];\n\n  /**\n   * An array of arguments that are to be passed to the success or failure \n   * callbacks.\n   * \n   * @type {Array}\n   */\n  this.args = null;\n\n  // Queue the passed in success & failure callbacks.\n  this.$queue( success, failure );\n}\n\n/**\n * Promise is awaiting for a success or failure notification.\n * @type {Number}\n */\nPromise.PENDING = 0;\n\n/**\n * Promise has been marked as a failure.\n * @type {Number}\n */\nPromise.FAILURE = 1;\n\n/**\n * Promise has been marked as a success.\n * @type {Number}\n */\nPromise.SUCCESS = 2;\n\n/**\n * Promise has been marked as a success and the next promise has been notified.\n * @type {Number}\n */\nPromise.CHAINED = 3;\n\nPromise.prototype = \n{\n  /**\n   * Adds success and optionally a failure callback to be invoked when the \n   * promised operation completes. The success callback can return a promise \n   * to chain promises.\n   * \n   * @param  {function} success\n   *         The function to invoke with the success arguments.\n   * @param  {function} [failure]\n   *         The function to invoke with the failure arguments.\n   * @return {Stork.Promise} -\n   *         The next promise to invoke when the returned promise from the \n   *         success callback finishes.\n   */\n  then: function(success, failure)\n  {\n    this.$queue( success, failure );  \n\n    if ( !this.next )\n    {\n      this.next = new Promise( this.context, undefined, undefined, this );\n    }\n   \n    if ( this.state & Promise.SUCCESS ) \n    {\n      this.$handleSuccesses();\n    } \n    else if ( this.state === Promise.FAILURE ) \n    {\n      this.$handleFailures();\n    }\n\n    return this.next;\n  },\n\n  /**\n   * Adds a generic error to be called if any of the promises in the chain have\n   * failed.\n   * \n   * @param  {function} error\n   *         A function to invoke if any of the promises fail.\n   * @return {Stork.Promise} -\n   *         A reference to this promise.\n   */\n  error: function(error)\n  {\n    if ( isFunc( error ) )\n    {\n      this.root.errors.push( error );\n\n      if ( this.state === Promise.FAILURE )\n      {\n        this.$handleFailures();\n      }  \n    }\n\n    return this;\n  },\n\n  // When the given promise finishes it will finish this promise as well.\n  $bindTo: function(to, replacementArguments)\n  {\n    var from = this;\n\n    to.then(\n      function() {\n        from.context = to.context;\n        from.$success( coalesce( replacementArguments, to.args ) );\n      },\n      function() {\n        from.context = to.context;\n        from.$failure( coalesce( replacementArguments, to.args ) );\n      })\n    ;\n  },\n\n  // Returns true if the promise has yet to finish.\n  $pending: function()\n  {\n    return this.state === Promise.PENDING;\n  },\n\n  // Adds a success and/or failure callback to this promise.\n  $queue: function(success, failure)\n  {\n    if ( isFunc( success ) ) this.successes.push( success );\n    if ( isFunc( failure ) ) this.failures.push( failure );\n  },\n\n  // Executes all successes currently on the promise.\n  $handleSuccesses: function()\n  {\n    var succs = this.successes;\n    for (var i = 0; i < succs.length; i++) \n    {\n      var s = succs[ i ];\n      var result = s.apply( this.context, this.args );\n\n      if ( result instanceof Promise && !this.nextFromSuccess ) \n      {\n        this.nextFromSuccess = result;\n      }\n    }\n\n    succs.length = 0;\n\n    this.$handleNext();\n  },\n\n  // If a next promise is given and one of the success callbacks return a \n  // promise, this promise is bound to the returned promise to complete the \n  // link in the chain.\n  $handleNext: function()\n  {\n    var next = this.next;\n    var returned = this.nextFromSuccess;\n\n    if (next && returned && this.state === Promise.SUCCESS)\n    {\n      next.$bindTo( returned );\n      this.state = Promise.CHAINED;\n    }\n  },\n\n  // Marks this promise as a success if the promise hasn't finished yet.\n  $success: function(args)\n  {\n    if ( this.state === Promise.PENDING ) \n    {\n      this.args = args || [];\n      this.state = Promise.SUCCESS;\n      this.$handleSuccesses();\n    }\n  },\n\n  // Executes all failures currently on the promise.\n  $handleFailures: function()\n  {\n    var fails = this.failures;\n    for (var i = 0; i < fails.length; i++) \n    {\n      fails[ i ].apply( this.context, this.args );\n    }\n    fails.length = 0;\n\n    var errors = this.root.errors;\n    var errorArgument = [ this.args[ this.args.length - 1 ] ];\n    for (var i = 0; i < errors.length; i++)\n    {\n      errors[ i ].apply( this.context, errorArgument );\n    }\n    errors.length = 0;\n  },\n\n  // Marks this promise as a failure if the promise hasn't finished yet.\n  $failure: function(args)\n  {\n    if ( this.state === Promise.PENDING ) \n    {\n      this.args = args || [];\n      this.state = Promise.FAILURE;\n      this.$handleFailures();\n    }\n  },\n\n  // Resets this promise removing all listeners\n  $reset: function() \n  {\n    this.state = Promise.PENDING;\n    this.successes.length = 0;\n    this.failures.length = 0;\n    this.errors.length = 0;\n  },\n\n};","\n/**\n * A FastMap has the key-to-value benefits of a map and iteration benefits of an\n * array. This is especially beneficial when most of the time the contents of \n * the structure need to be iterated and order doesn't matter (since removal \n * performs a swap which breaks insertion order).\n *\n * @constructor\n * @memberOf Stork\n * @param {Stork.FastMap|object} [map]\n */\nfunction FastMap(map)\n{\n  /**\n   * An array of the values in this map.\n   * @member {Array}\n   */\n  this.values = [];\n\n  /**\n   * An array of the keys in this map.\n   * @type {Array}\n   */\n  this.keys = [];\n\n  /**\n   * An array of the original keys in this map.\n   * @type {Array}\n   */\n  this.okeys = [];\n\n  /**\n   * An object of key to index mappings.\n   * @type {Object}\n   */\n  this.indices = {};\n\n  // If another map is given to populate this map, do it!\n  this.putMap( map );\n}\n\nFastMap.prototype =\n{\n\n  /**\n   * Resets the map by initializing the values, keys, and indexes.\n   * \n   * @return {Stork.FastMap}\n   */\n  reset: function()\n  {\n    this.values.length = 0;\n    this.keys.length = 0;\n    this.okeys.length = 0;\n    this.indices = {};\n\n    return this;\n  },\n\n  /**\n   * Puts the value in the map by the given key.\n   *\n   * @param {String} key\n   * @param {V} value\n   * @param {K} originalKey\n   * @return {Stork.FastMap}\n   */\n  put: function(key, value, originalKey)\n  {\n    if ( key in this.indices )\n    {\n      this.values[ this.indices[ key ] ] = value;\n    }\n    else\n    {\n      this.indices[ key ] = this.values.length;\n      this.values.push( value );\n      this.keys.push( key );\n      this.okeys.push( originalKey );\n    }\n\n    return this;\n  },\n\n  /**\n   * Puts all keys & values on the given map into this map overwriting any existing values mapped by similar keys.\n   *\n   * @param {FastMap|Object} map\n   * @return {Stork.FastMap}\n   */\n  putMap: function(map)\n  {\n    if (map instanceof FastMap)\n    {\n      var keys = map.keys;\n      var values = map.values;\n      var okeys = map.okeys;\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        this.put( keys[ i ], values[ i ], okeys[ i ] );\n      }\n    }\n    else if ( isObject( map ) )\n    {\n      for (var key in map)\n      {\n        this.put( key, map[ key ], key );\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Returns the value mapped by the given key.\n   *\n   * @param {String} key\n   * @return {V}\n   */\n  get: function(key)\n  {\n    return this.values[ this.indices[ key ] ];\n  },\n\n  /**\n   * Removes the value by a given key\n   *\n   * @param {String} key\n   * @return {Stork.FastMap}\n   */\n  remove: function(key)\n  {\n    var index = this.indices[ key ];\n\n    if ( isNumber( index ) )\n    {\n      this.removeAt( index );\n    }\n\n    return this;\n  },\n\n  /**\n   * Overwrites this map with another map.\n   * \n   * @param  {Stork.FastMap} map\n   * @return {Stork.FastMap}\n   */\n  overwrite: function(map)\n  {\n    replaceArray( this.values, map.values );\n    replaceArray( this.keys, map.keys );\n    replaceArray( this.okeys, map.okeys );\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * Removes the value & key at the given index.\n   *\n   * @param {Number} index\n   * @return {Stork.FastMap}\n   */\n  removeAt: function(index)\n  {\n    var key = this.keys[ index ];\n    var lastValue = this.values.pop();\n    var lastKey = this.keys.pop();\n    var lastOkey = this.okeys.pop();\n\n    if ( index < this.values.length )\n    {\n      this.values[ index ] = lastValue;\n      this.keys[ index ] = lastKey;\n      this.okeys[ index ] = lastOkey; \n      this.indices[ lastKey ] = index;\n    }\n\n    delete this.indices[ key ];\n\n    return this;\n  },\n\n  /**\n   * Returns the index of the value in the array given a key.\n   *\n   * @param {String} key\n   * @return {Number}\n   */\n  indexOf: function(key)\n  {\n    return coalesce( this.indices[ key ], -1 );\n  },\n\n  /**\n   * Returns whether this map has a value for the given key.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n  has: function(key)\n  {\n    return key in this.indices;\n  },\n\n  /**\n   * Returns whether the given input has overlap with keys in this map.\n   *\n   * @param {FastMap|Object} map\n   * @return {Boolean}\n   */\n  hasOverlap: function(map)\n  {\n    var keys = this.keys;\n    var indices = map.indices;\n\n    for (var i = 0; i < keys.length; i++)\n    {\n      if ( keys[i] in indices )\n      {\n        return true;\n      }\n    }\n   \n    return false;\n  },\n\n  /**\n   * Returns the number of elements in the map.\n   *\n   * @return {Number}\n   */\n  size: function()\n  {\n    return this.values.length;\n  },\n\n  /**\n   * Reverses the order of the underlying values & keys.\n   * \n   * @return {Stork.FastMap} -\n   *         The referense to this map.\n   */\n  reverse: function()\n  {\n    var max = this.size() - 1;\n    var half = Math.ceil( max / 2 );\n\n    for (var i = 0; i < half; i++)\n    {\n      swap( this.values, i, max - i );\n      swap( this.keys, i, max - i );\n      swap( this.okeys, i, max - i );\n    }\n\n    this.rebuildIndex();\n\n    return this;\n  },\n\n  /**\n   * Sorts the underlying values & keys given a value compare function.\n   * \n   * @param  {function} comparator\n   *         A function which accepts two values and returns a number used for\n   *         sorting. If the first argument is less than the second argument, a\n   *         negative number should be returned. If the arguments are equivalent\n   *         then 0 should be returned, otherwise a positive number should be\n   *         returned.\n   * @return {Stork.FastMap} -\n   *         The reference to this map.\n   */\n  sort: function(comparator)\n  {\n    var map = this;\n\n    // Sort this partition!\n    function partition(left, right)\n    {\n      var pivot = map.values[ Math.floor((right + left) / 2) ];\n      var i = left;\n      var j = right;\n\n      while (i <= j) \n      {\n        while (comparator( map.values[i], pivot ) < 0) i++\n        while (comparator( map.values[j], pivot ) > 0) j--;\n\n        if (i <= j) {\n          swap( map.values, i, j );\n          swap( map.keys, i, j );\n          swap( map.okeys, i, j );\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    }\n\n    // Quicksort\n    function qsort(left, right)\n    {\n      var index = partition( left, right );\n\n      if (left < index - 1) \n      {\n        qsort( left, index - 1 );\n      }\n\n      if (index < right) \n      {\n        qsort( index, right );\n      }\n    }\n\n    var right = this.size() - 1;\n\n    // Are there elements to sort?\n    if ( right > 0 )\n    {\n      qsort( 0, right );\n\n      this.rebuildIndex();\n    }\n\n    return this;\n  },\n\n  /**\n   * Rebuilds the index based on the keys.\n   * \n   * @return {Stork.FastMap} -\n   *         The reference to this map.\n   */\n  rebuildIndex: function()\n  {\n    this.indices = {};\n\n    for (var i = 0, l = this.keys.length; i < l; i++)\n    {\n      this.indices[ this.keys[ i ] ] = i;\n    }\n\n    return this;\n  }\n\n};","\n/**\n * An array of all plugin `function`s invoked on a Stork instance when it's created.\n * \n * @type {Array}\n * @see {@link Stork.plugin}\n */\nStork.plugins = [];\n\n/**\n * Adds a plugin function to be invoked on every Stork instance that's created.\n * Each plugin function is invoked after an adapter is chosen and integrated,\n * but before the {@link Stork#init} function is called.\n *\n * *Example*\n * ```javascript\n * Stork.plugin(function(stork) {\n *   var oldPut = stork.put;\n *   stork.put = function(key, value, success, failure) {\n *     // before put\n *     var promise = oldPut.apply( this, arguments );\n *     // after put, listen to promise?\n *     return promise;\n *   };\n * });\n * ```\n * \n * @param  {Stork~plugin} definition \n *         The function invoked on every Stork instance.\n * @return {Stork} -\n *         The Stork namespace.\n */\nStork.plugin = function(definition)\n{\n  if ( isFunc( definition ) ) \n  {\n    Stork.plugins.push( definition ); \n  }\n\n  return Stork;\n};\n\n/**\n * @callback Stork~plugin\n * @param {Stork} stork The Stork instance to run the plugin on.\n */\n\n/**\n * An array of adapters available for implementing a Stork instance. Each item\n * in the array is an object with three properties: `String` name, `Number` \n * priority, and `Object` definition.\n * \n * @type {Array}\n * @see {@link Stork.adapter}\n */\nStork.adapters = [];\n\n/**\n * Adds an adapter available for Stork to use if it's supported.\n *\n * *Example*\n * ```javascript\n * Stork.adapter('myadapter', 7, {\n *   valid: function() { ... },\n *   init: function(options, success, failure) { ... },\n *   reload: function(success, failure) { ... },\n *   _get: function(key, rawKey, promise) { ... },\n *   _destroy: function(promise) { ... },\n *   _put: function(key, value, rawKey, rawValue, promise) { ... },\n *   _remove: function(key, rawKey, value, promise) { ... },\n *   _size: function(promise) { ... }\n * });\n * ```\n * \n * @param  {String} name       \n *         The name of the adapter. Must be unique.\n * @param  {Number} priority\n *         The priority of this adapter. The higher the value the earlier\n *         it's checked for support and is used by Stork instances.\n * @param  {function|Object} definition \n *         The definition of the adapter which is either an object of methods \n *         to overwrite for the Stork instance, or a function which returns a \n *         similar object.\n * @return {Stork} - \n *         The Stork namespace.\n */\nStork.adapter = function(name, priority, definition)\n{\n  Stork.adapters.push(\n  {\n    name: name,\n    priority: priority,\n    definition: isFunc( definition ) ? definition() : definition\n  });\n\n  return Stork;\n};","Stork.plugin((function()\n{\n\n  /**\n   * The format of success callback for aggregation functions.\n   * \n   * @callback Stork~aggregateSuccess\n   * @param {Number} aggregatedValue\n   *        The result of the aggregation function.\n   */\n\n  /**\n   * The format of failure callback for aggregation functions.\n   * \n   * @callback Stork~aggregateFailure\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n  \n  /**\n   * The format of an accumulation callback for aggregation functions.\n   *\n   * @callback Stork~aggregateAccumulate\n   * @param {Any} value\n   *        The value to process for accumulation.\n   */\n  \n  /**\n   * The format of an accumulation callback for aggregation functions.\n   *\n   * @callback Stork~aggregateResult\n   * @return {Any}\n   *         The result of the accumulated values.\n   */\n\n  /**\n   * Performs an aggregation on key-value pairs where the value is an `Object` \n   * which may have a specific property to aggregate. The result of the \n   * aggregation is returned to the callback.\n   *\n   * This is part of the aggregation plugin.\n   * \n   * @memberOf Stork#\n   * @param  {String} property\n   *         The property on the object to pass to the accumulation function.\n   * @param  {Stork~aggregateAccumulate} accumulate\n   *         The function to invoke with the value of the property.\n   * @param  {Stork~aggregateResult} getResult\n   *         The function to call at the end to returned the aggregated value.\n   * @param  {Stork~aggregateSuccess} [success]\n   *         The function to invoke when a value is successfully aggregated.\n   * @param  {Stork~aggregateSuccess} [failure]\n   *         The function to invoke if there's a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function aggregate(property, accumulate, getResult, promise)\n  {\n    var onSuccess = function(values, keys)\n    {\n      var returnedValue = undefined;\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var v = values[ i ];\n\n        if (isObject( v ) && property in v)\n        {\n          accumulate( v[ property ] );\n        }\n      }\n\n      promise.$success( [ getResult() ] )\n    };\n    var onFailure = function(e)\n    {\n      promise.$failure( [e] );\n    };\n\n    this.all( onSuccess, onFailure );\n  }\n\n  /**\n   * Returns the number of values that are objects and have the specified \n   * property to the callback.\n   *\n   * This is part of the aggregation plugin.\n   *\n   * *Usage*\n   * ```javascript\n   * db.count('name', function(count) {\n   *   // count = the number of objects with the property 'name'\n   * });\n   * ```\n   * \n   * @memberOf Stork#\n   * @param  {String} property\n   *         The property on the object to look for.\n   * @param  {Stork~aggregateSuccess} [success]\n   *         The function to invoke with the number of values with the property.\n   * @param  {Stork~aggregateSuccess} [failure]\n   *         The function to invoke if there's a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function count(property, promise)\n  {\n    var total = 0;\n\n    var accumulate = function(v)\n    {\n      total++;\n    };\n    var getResult = function()\n    {\n      return total;\n    };\n\n    aggregate( property, accumulate, getResult, promise );\n  }\n\n  /**\n   * Returns the sum of a set of values taken from a property on all `Object` \n   * values to the callback.\n   *\n   * This is part of the aggregation plugin.\n   * \n   * *Usage*\n   * ```javascript\n   * db.sum('kills', function(sum) {\n   *   // sum = total of all kills\n   * });\n   * ```\n   * \n   * @memberOf Stork#\n   * @param  {String} property\n   *         The property on the object to sum.\n   * @param  {Stork~aggregateSuccess} [success]\n   *         The function to invoke with the sum.\n   * @param  {Stork~aggregateSuccess} [failure]\n   *         The function to invoke if there's a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function sum(property, promise)\n  {\n    var summing = 0;\n\n    var accumulate = function(v)\n    {\n      if (isNumber(v))\n      {\n        summing += v;\n      }\n    };\n    var getResult = function()\n    {\n      return summing;\n    };\n\n    aggregate( property, accumulate, getResult, promise );\n  }\n\n\n  /**\n   * Returns the average of a set of values taken from a property on all `Object` \n   * values to the callback.\n   *\n   * This is part of the aggregation plugin.\n   * \n   * *Usage*\n   * ```javascript\n   * db.avg('age', function(avg) {\n   *   // avg = the average age\n   * });\n   * ```\n   * \n   * @memberOf Stork#\n   * @param  {String} property\n   *         The property on the object to average.\n   * @param  {Stork~aggregateSuccess} [success]\n   *         The function to invoke with the average.\n   * @param  {Stork~aggregateSuccess} [failure]\n   *         The function to invoke if there's a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function avg(property, promise)\n  {\n    var summing = 0;\n    var total = 0;\n\n    var accumulate = function(v)\n    {\n      if (isNumber(v))\n      {\n        summing += v;\n        total++;\n      }\n    };\n    var getResult = function()\n    {\n      return summing / total;\n    };\n\n    aggregate( property, accumulate, getResult, promise );\n  }\n\n  /**\n   * Returns the minimum value of a set of values taken from a property on all \n   * `Object` values to the callback.\n   *\n   * This is part of the aggregation plugin.\n   * \n   * *Usage*\n   * ```javascript\n   * db.min('age', function(min) {\n   *   // min = the minimum age\n   * });\n   * ```\n   * \n   * @memberOf Stork#\n   * @param  {String} property\n   *         The property on the object to find the minimum value of.\n   * @param  {Stork~aggregateSuccess} [success]\n   *         The function to invoke with the minimum value.\n   * @param  {Stork~aggregateSuccess} [failure]\n   *         The function to invoke if there's a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function min(property, promise)\n  {\n    var minValue = Number.MAX_VALUE;\n\n    var accumulate = function(v)\n    {\n      if (isNumber(v))\n      {\n        minValue = Math.min( minValue, v );\n      }\n    };\n    var getResult = function()\n    {\n      return minValue;\n    };\n\n    aggregate( property, accumulate, getResult, promise );\n  }\n\n  /**\n   * Returns the maximum value of a set of values taken from a property on all \n   * `Object` values to the callback.\n   *\n   * This is part of the aggregation plugin.\n   * \n   * *Usage*\n   * ```javascript\n   * db.max('age', function(max) {\n   *   // max = the maximum age\n   * });\n   * ```\n   * \n   * @memberOf Stork#\n   * @param  {String} property\n   *         The property on the object to find the maximum value of.\n   * @param  {Stork~aggregateSuccess} [success]\n   *         The function to invoke with the maximum value.\n   * @param  {Stork~aggregateSuccess} [failure]\n   *         The function to invoke if there's a problem.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function max(property, promise)\n  {\n    var maxValue = Number.MAX_VALUE;\n\n    var accumulate = function(v)\n    {\n      if (isNumber(v))\n      {\n        maxValue = Math.min( maxValue, v );\n      }\n    };\n    var getResult = function()\n    {\n      return maxValue;\n    };\n\n    aggregate( property, accumulate, getResult, promise );\n  }\n\n  var METHODS = \n  {\n    aggregate:  $promise( 'aggregate', aggregate ),\n    count:      $promise( 'count', count ),\n    sum:        $promise( 'sum', sum ),\n    avg:        $promise( 'avg', avg ),\n    min:        $promise( 'min', min ),\n    max:        $promise( 'max', max )\n  }; \n\n  return function(stork)\n  {\n    copy( METHODS, stork );\n  };\n\n})());\n\n\n  ","Stork.plugin((function()\n{\n\n  /**\n   * The format of the condition callback for {@link Stork#where}.\n   * \n   * @callback Stork~where\n   * @param {Any} value\n   *        The value to inspect and return true if you want it returned.\n   * @param {Any} key\n   *        The key to inspect and return true if you want it returned.\n   */\n  \n  /**\n   * The format of success callback for {@link Stork#where}.\n   * \n   * @callback Stork~whereSuccess\n   * @param {Array} values\n   *        The values matching the given condition.\n   * @param {Array} keys\n   *        The keys matching the given condition.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#where}.\n   * \n   * @callback Stork~whereFailure\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n\n  /**\n   * Returns a subset of key-value pairs that match a condition function to the \n   * callback.\n   *\n   * This is part of the query plugin.\n   *\n   * *Usage*\n   * ```javascript\n   * var condition = function(value, key) {\n   *   // return true if key-value matches some condition\n   * };\n   * var onSuccessFunc = function(value, key) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(key, error) {\n   *   // uh oh!\n   * };\n   * db.where( condition, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.where( condition ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   *\n   * @memberOf Stork#\n   * @param  {Stork~where} condition\n   *         The function to invoke on each key-value pair to determine whether\n   *         that pair is included in the results.\n   * @param  {Stork~whereSuccess} [success]\n   *         The function to invoke with the matched key-value pairs.\n   * @param  {Stork~whereFailure} [failure]\n   *         The function to invoke if there was a problem retrieving the\n   *         key-value pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function where(condition, promise)\n  {\n    var onSuccess = function(values, keys)\n    {\n      var matchedKeys = [];\n      var matchedValues = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var v = values[ i ];\n        var k = keys[ i ];\n\n        if ( condition( v, k ) )\n        {\n          matchedValues.push( v );\n          matchedKeys.push( k );\n        }\n      }\n\n      promise.$success( [matchedValues, matchedKeys] );\n    };\n    var onFailure = function(e)\n    {\n      promise.$failure( [e] );\n    };\n\n    this.all( onSuccess, onFailure );\n  }\n\n  /**\n   * The format of success callback for {@link Stork#select}.\n   * \n   * @callback Stork~selectSuccess\n   * @param {Array} values\n   *        If columns is a string this is an array of values pulled from the\n   *        same property on all values that are objects. If columns is an array\n   *        this is an array of objects containing the properties that exist\n   *        in the columns array.\n   * @param {Array} keys\n   *        An array of the keys for pointing to the original values.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#select}.\n   * \n   * @callback Stork~selectFailure\n   * @param {String|Array} columns\n   *        The property you wanted to return or an array of properties to return.\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n  \n  /**\n   * Returns column values (if columns is a string) or an array of objects of \n   * column values (if columns is an array) to the callback.\n   *\n   * This is part of the query plugin.\n   *\n   * *Usage*\n   * ```javascript\n   * var onSuccessFunc = function(values, keys) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(columns, error) {\n   *   // uh oh!\n   * };\n   * db.select( 'name', onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.select( ['name', 'id'] ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   *\n   * @memberOf Stork#\n   * @param  {String|Array} columns\n   *         The property you want to return or an array of properties to return.\n   * @param  {Stork~selectSuccess} [success]\n   *         The function to invoke with the selected properties.\n   * @param  {Stork~selectFailure} [failure]\n   *         The function to invoke if there was a problem selecting the columns.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function select(columns, promise)\n  {\n    var onSuccess = function(values, keys)\n    {\n      var results = [];\n      var resultKeys = [];\n\n      for (var i = 0; i < values.length; i++)\n      {\n        var v = values[ i ];\n\n        if ( isObject( v ) )\n        {\n          if ( isString( columns ) )\n          {\n            if ( columns in v )\n            {\n              results.push( v[ columns ] );\n              resultKeys.push( keys[ i ] );\n            }\n          }\n          else if ( isArray( columns ) )\n          {\n            var resultObject = {};\n            var resultColumns = 0;\n\n            for (var k = 0; k < columns.length; k++)\n            {\n              var c = columns[ k ];\n\n              if ( c in v )\n              {\n                resultObject[ c ] = v[ c ];\n                resultColumns++;\n              }\n            }\n\n            if ( resultColumns > 0 )\n            {\n              results.push( resultObject );\n              resultKeys.push( keys[ i ] );\n            }\n          }\n        }\n      }\n\n      promise.$success( [results, resultKeys] );\n    };\n    var onFailure = function(e)\n    {\n      promise.$failure( [columns, e] );\n    };\n\n    this.all( onSuccess, onFailure );\n  }\n\n  /**\n   * The format of the comparater for {@link Stork#sort}.\n   *\n   * @callback Stork~sortComparator\n   * @param {Any} a\n   *        The first value to compare.\n   * @param {Any} b\n   *        The second value to compare.\n   * @return {Number} -\n   *         A negative number if `a < b`, a positive number of `a > b` and 0\n   *         if `a == b`.\n   */\n\n  /**\n   * The format of success callback for {@link Stork#sort}.\n   * \n   * @callback Stork~sortSuccess\n   * @param {Array} values\n   *        The array of sorted values.\n   * @param {Array} keys\n   *        The array of sorted keys.\n   */\n\n  /**\n   * The format of failure callback for {@link Stork#sort}.\n   * \n   * @callback Stork~sortFailure\n   * @param {Any} error \n   *        The error that was thrown.\n   */\n  \n  /**\n   * Sorts all key-value pairs and returns them to the callback. Next time the\n   * key-value pairs are iterated over they will be returned in the same order.\n   * The underlying structure should be considered unsorted anytime key-value\n   * pairs are updated, added, or removed.\n   *\n   * This is part of the query plugin.\n   *\n   * *Usage*\n   * ```javascript\n   * var compareFunc = function(a, b) {\n   *   // compare a & b and return a number\n   * };\n   * var onSuccessFunc = function(values, keys) {\n   *   // handle success\n   * };\n   * var onFailureFunc = function(error) {\n   *   // uh oh!\n   * };\n   * db.sort( compareFunc, false, onSucessFunc, onFailureFunc ); // listen for success/failure\n   * db.sort( compareFunc ).then( onSuccessFunc, onFailureFunc ); // listen to promise\n   * ```\n   *\n   * @memberOf Stork#\n   * @param  {Stork~sortComparator} comparator\n   *         The function used to compare two values.\n   * @param  {Boolean} desc\n   *         If the key-value pairs should be in descending (reversed) order.\n   * @param  {Stork~sortSuccess} [success]\n   *         The function to invoke with the sorted values & keys.\n   * @param  {Stork~sortFailure} [failure]\n   *         The function to invoke if there was a problem sorting the pairs.\n   * @return {Stork.Promise} -\n   *         The promise that can be used to listen for success or failure, as\n   *         well as chaining additional calls.\n   */\n  function sort(comparator, desc, promise)\n  {\n    var onSuccess = function()\n    {\n      var cache = this.cache;\n\n      cache.sort( comparator );\n\n      if ( desc )\n      {\n        cache.reverse();\n      }\n\n      promise.$success( [cache.values, cache.okeys] );\n    };\n    var onFailure = function(e)\n    {\n      promise.$failure( [e] );\n    };\n\n    this.all( onSuccess, onFailure );\n  }\n\n  var METHODS = \n  {\n    where:  $promise( 'where', where ),\n    select: $promise( 'select', select ),\n    sort:   $promise( 'sort', sort )\n  }; \n\n  return function(stork)\n  {\n    copy( METHODS, stork );\n  };\n\n})());\n\n\n  ","\nStork.adapter('chrome-storage-local', 4, function()\n{\n  var store = window.chrome && chrome.storage ? chrome.storage.local : false;\n\n  function isError() \n  {\n    return chrome && chrome.runtime && chrome.runtime.lastError;\n  };\n\n  return {\n\n    encode: function(key)\n    {\n      return this.prefix + toJson( key );\n    },\n\n    decode: function(rawKey)\n    {\n      return fromJson( rawKey.substring( this.prefix.length ) );\n    },\n\n    valid: function() \n    {\n      if (!store) \n      {\n        return false;\n      }\n\n      try \n      {\n        var temp = Math.random();\n        var map = {};\n\n        map[ temp ] = temp;\n        store.set( map );\n        store.remove( temp );\n\n        return true;\n      } \n      catch (e) \n      {\n        return false;\n      }\n    },\n\n    init: function(options, success, failure) \n    {\n      var promise = new Promise( this, success, failure );\n      \n      this.prefix = coalesce( options.prefix, this.name + '-' );\n\n      if ( this.lazy )\n      {\n        this._finishInitialization( promise, [this] );\n      }\n      else\n      {\n        promise.$bindTo( this.reload(), [this] );\n      }\n\n      return promise;\n    },\n\n    reload: function(success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n      var stork = this;\n      var prefix = this.prefix;\n      var cache = new FastMap();\n\n      store.get( null, function(items)\n      {\n        if ( isError() )\n        {\n          promise.$failure( [isError()] );\n        }\n        else\n        {\n          for (var rawKey in items)\n          {\n            if ( rawKey.substring( 0, prefix.length ) === prefix )\n            {\n              cache.put( rawKey, items[ rawKey ], stork.decode( rawKey ) );\n            }\n          }\n\n          stork.cache.overwrite( cache );\n          stork.loaded = true;\n\n          stork.finishReload( promise );\n        }\n\n      });\n\n      return promise;\n    },\n\n    _get: function(key, rawKey, promise)\n    {\n      var stork = this;\n\n      store.get( rawKey, function(items)\n      {\n        if ( isError() )\n        {\n          promise.$failure( [key, isError()] );\n        }\n        else\n        {\n          if ( items.length )\n          {\n            var value = fromJson( items[0] );\n\n            stork.cache.put( rawKey, value, key );\n\n            promise.$success( [value, key] );\n          }\n          else\n          {\n            promise.$success( [undefined, key] );\n          }\n        }\n      });\n    },\n\n    _destroy: function(promise)\n    {\n      var stork = this;\n      var removeByKeys = function()\n      {\n        store.remove( this.cache.keys, function()\n        {\n          if ( isError() ) \n          {\n            promise.$failure( [isError()] );\n          }\n          else \n          {\n            stork.cache.reset();\n\n            promise.$success();\n          }\n        });\n      };\n      var onFailure = function(e)\n      {\n        promise.$failure( [e] );\n      };\n\n      if ( this.loaded )\n      {\n        removeByKeys();\n      }\n      else\n      {\n        this.reload( removeByKeys, onFailure );\n      }\n    },\n\n    _put: function(key, value, rawKey, rawValue, promise)\n    {\n      var stork = this;\n      var obj = {};\n\n      obj[ rawKey ] = value;\n\n      store.set( obj, function() \n      {\n        if ( isError() ) \n        {\n          promise.$failure( [key, value, isError()] );\n        } \n        else \n        {\n          var previousValue = stork.cache.get( rawKey );\n\n          stork.cache.put( rawKey, value, key );\n\n          promise.$success( [key, value, previousValue] );\n        }\n      });\n    },\n\n    _remove: function(key, rawKey, value, promise)\n    {  \n      var stork = this;\n\n      store.remove( rawKey, function()\n      {\n        if ( isError() )\n        {\n          promise.$failure( [key, isError()] );\n        }\n        else\n        {\n          stork.cache.remove( rawKey );\n\n          promise.$success( [value, key] );\n        }\n      });\n    },\n\n    _size: function(promise)\n    {\n      var onSuccess = function(keys, values)\n      {\n        promise.$success( [keys.length] );\n      };\n      var onFailure = function(e)\n      {\n        promise.$failure( [e] );\n      };\n\n      this.reload( onSuccess, onFailure );\n    }\n\n  }\n});","\nStork.adapter('ie-userdata', 1.5, \n{\n  valid: function() \n  {\n    return def( document.body.addBehavior );\n  },\n\n  init: function(options, success, failure) \n  {\n    var promise = new Promise( this, success, failure );\n\n    var s = document.createElement('span');\n    s.style.behavior = \"url('#default#userData')\";\n    s.style.position = 'absolute';\n    s.style.left = 10000;\n    document.body.appendChild(s);\n\n    this.store = s;\n    this.store.load( this.name );\n\n    if ( this.lazy )\n    {\n      this.finishInitialization( promise, [this] );\n    }\n    else\n    {\n      promise.$bindTo( this.reload(), [this] );\n    }\n    \n    return promise;\n  },\n\n  reload: function(success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    var attributes = this.store.XMLDocument.firstChild.attributes;\n    var cache = new FastMap();\n\n    for (var i = 0; i < attributes.length; i++) \n    {\n      try\n      {\n        var v = attributes[ i ];\n        var rawKey = v.nodeName;\n        var rawValue = v.nodeValue;\n        var key = this.decode( rawKey );\n        var value = fromJson( rawValue );\n\n        cache.put( rawKey, value, key ); \n      }\n      catch (e) \n      {\n        // ignore\n      }\n    }\n\n    this.cache.overwrite( cache );\n    this.loaded = true;\n    this.finishReload( promise );\n\n    return promise;\n  },\n\n  _get: function(key, rawKey, promise)\n  {\n    var rawValue = this.store.getAttribute( rawKey );\n\n    if ( rawValue === null )\n    {\n      promise.$success( [undefined, key] );\n    }\n    else\n    {\n      var value = null;\n\n      try\n      {\n        value = fromJson( rawValue );\n      }\n      catch (e)\n      {\n        promise.$failure( [e] );\n      }\n\n      if ( promise.$pending() )\n      {\n        this.cache.put( rawKey, value, key );\n\n        promise.$success( [value, key] );\n      }\n    }\n  },\n\n  _destroy: function(promise)\n  {\n    var attributes = this.store.XMLDocument.firstChild.attributes;\n\n    for (var i = 0; i < attributes.length; i++) \n    {\n      this.store.removeAttribute( attributes[ i ].nodeName );\n    }\n\n    this.cache.reset();\n\n    promise.$success();\n  },\n\n  _put: function(key, value, rawKey, rawValue, promise)\n  {\n    var previousValue = this.cache.get( rawKey );\n\n    try\n    {\n      this.store.setAttribute( rawKey, rawValue );\n    }\n    catch (e)\n    {\n      promise.$failure( [key, value, e] );\n    }\n\n    if ( promise.$pending() )\n    {\n      this.cache.put( rawKey, value, key );\n\n      promise.$success( [key, value, previousValue] );\n    }\n  },\n\n  _remove: function(key, rawKey, value, promise)\n  {\n    this.store.removeAttribute( rawKey );\n    this.cache.remove( rawKey );\n\n    promise.$success( [value, key] );\n  }\n\n});","Stork.adapter('indexed-db', 5, function()\n{\n\n  var getIDB = function() \n  {\n    return window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.oIndexedDB || window.msIndexedDB;\n  };\n\n  var getIDBTransaction = function() \n  {\n    return window.IDBTransaction || window.webkitIDBTransaction || window.mozIDBTransaction || window.oIDBTransaction || window.msIDBTransaction;\n  };\n\n  var getIDBKeyRange = function() \n  {\n    return window.IDBKeyRange || window.webkitIDBKeyRange || window.mozIDBKeyRange || window.oIDBKeyRange || window.msIDBKeyRange;\n  };\n\n  var DATABASE_NAME = 'stork';\n  var DATABASE_VERSION = 3;\n  var READ_WRITE = (getIDBTransaction() && 'READ_WRITE' in getIDBTransaction()) ? getIDBTransaction().READ_WRITE : 'readwrite';\n\n  return {\n\n    valid: function() \n    {\n      return !!getIDB();\n    },\n\n    init: function(options, success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n\n      var stork = this;\n      var factory = getIDB();\n      var request = factory.open( this.name, DATABASE_VERSION );\n\n      request.onerror = function(e)\n      {\n        promise.$failure( [e] );\n      };\n\n      // First started or it needs a version upgrade\n      request.onupgradeneeded = function()\n      {\n        stork.db = request.result;\n        stork.db.createObjectStore( stork.name, { keyPath: this.key } );\n      };\n\n      // Database is ready for use\n      request.onsuccess = function(event)\n      {\n        stork.db = request.result;\n\n        if ( stork.lazy )\n        {\n          stork.finishInitialization( promise, [stork] );\n        }\n        else\n        {\n          promise.$bindTo( stork.reload(), [stork] );\n        }\n      };\n\n      return promise;\n    },\n\n    reload: function(success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n\n      var stork = this;\n      var objectStore = this.db.transaction( this.name ).objectStore( this.name );\n      var cursor = objectStore.openCursor();\n      var cache = new FastMap();\n\n      cursor.onsuccess = function(e)\n      {\n        var result = cursor.result;\n\n        if (result)\n        {\n          var rawKey = result.key;\n          var value = result.value;\n          var key = stork.decode( rawKey );\n\n          cache.put( rawKey, value, key );\n\n          result['continue']();\n        }\n        else\n        {\n          stork.cache.overwrite( cache );\n          stork.loaded = true;\n          stork.finishReload( promise, [stork.cache.values, stork.cache.okeys] );\n        }\n      };\n\n      cursor.onerror = function(e)\n      {\n        promise.$failure( [keys, e] );\n      };\n\n      return promise;\n    },\n\n    _destroy: function(promise)\n    {\n      var stork = this;\n      var objectStore = this.db.transaction( this.name, READ_WRITE ).objectStore( this.name );\n\n      objectStore.transaction.oncomplete = function()\n      {\n        stork.cache.reset();\n\n        promise.$success();\n      };\n\n      objectStore.transaction.onabort = function(e)\n      {\n        promise.$failure( [e] );\n      };\n\n      objectStore.clear();\n    },\n\n    _get: function(key, rawKey, promise)\n    {\n      var stork = this;\n      var objectStore = this.db.transaction( this.name ).objectStore( this.name );\n      var request = objectStore.get( rawKey );\n\n      request.onsuccess = function(e)\n      {\n        if ( request.result === undefined )\n        {\n          promise.$success( [undefined, key] );\n        }\n        else\n        {\n          var value = request.result;\n\n          stork.cache.put( rawKey, value, key );\n\n          promise.$success( [value, key] );          \n        }\n      };\n\n      request.onerror = function()\n      {\n        promise.$failure( [key, request.error] );\n      };\n    },\n\n    _put: function(key, value, rawKey, rawValue, promise)\n    {\n      var stork = this;\n      var objectStore = this.db.transaction( this.name, READ_WRITE ).objectStore( this.name );\n\n      objectStore.transaction.oncomplete = function()\n      {\n        var previousValue = stork.cache.get( rawKey );\n\n        stork.cache.put( rawKey, value, key );\n\n        promise.$success( [key, value, previousValue] );\n      }; \n\n      objectStore.transaction.onabort = function(e)\n      {\n        promise.$failure( [key, value, e] );\n      };\n\n      objectStore.put( value, rawKey );\n    },\n\n    _remove: function(key, rawKey, value, promise)\n    {  \n      var stork = this;\n      var objectStore = this.db.transaction( this.name, READ_WRITE ).objectStore( this.name );\n\n      objectStore.transaction.oncomplete = function()\n      {\n        stork.cache.remove( rawKey );\n\n        promise.$success( [value, key] );\n      }; \n\n      objectStore.transaction.onabort = function(e)\n      {\n        promise.$failure( [key, e] );\n      };\n\n      objectStore['delete']( rawKey );\n    },\n\n    _size: function(promise)\n    {\n      var stork = this;\n      var objectStore = this.db.transaction( this.name, READ_WRITE ).objectStore( this.name );\n      var request = objectStore.count();\n\n      request.onsuccess = function()\n      {\n        promise.$success( [request.result] );\n      };\n\n      request.onerror = function(e)\n      {\n        promise.$failure( [request.error] );\n      };\n    }\n\n    // TODO getMany, removeMany\n\n  };\n\n});","\nStork.adapter('local-storage', 3, function()\n{\n  var store = window.localStorage;\n\n  return {\n\n    encode: function(key)\n    {\n      return this.prefix + toJson( key );\n    },\n\n    decode: function(rawKey)\n    {\n      return fromJson( rawKey.substring( this.prefix.length ) );\n    },\n\n    valid: function()\n    {\n      if (!store) \n      {\n        return false;\n      }\n      try \n      {\n        var temp = Math.random();\n        store.setItem( temp, temp );\n        store.removeItem( temp );\n\n        return true;\n      } \n      catch (e) \n      {\n        return false;\n      }\n    },\n\n    init: function(options, success, failure) \n    {\n      var promise = new Promise( this, success, failure );\n\n      this.prefix = coalesce( options.prefix, this.name + '-' );\n\n      if ( this.lazy )\n      {\n        this.finishInitialization( promise, [this] );\n      }\n      else\n      {\n        promise.$bindTo( this.reload(), [this] );\n      }\n\n      return promise;\n    },\n\n    reload: function(success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n      var prefix = this.prefix;\n      var cache = new FastMap();\n\n      try\n      {\n        for (var i = 0; i < store.length; i++)\n        {\n          var rawKey = store.key( i );\n\n          if ( rawKey.substring( 0, prefix.length ) === prefix )\n          {\n            var rawValue = store.getItem( rawKey );\n            var value = fromJson( rawValue );\n            var key = this.decode( rawKey );\n\n            cache.put( rawKey, value, key );\n          }  \n        }\n\n        this.cache.overwrite( cache );\n        this.loaded = true;\n      }\n      catch (e)\n      {\n        promise.$failure( [e] );\n      }\n\n      this.finishReload( promise );\n\n      return promise;\n    },\n\n    _destroy: function(promise)\n    {\n      var stork = this;\n      var prefix = this.prefix;\n      var removeByKeys = function( keys )\n      {\n        try\n        {\n          for (var i = 0; i < keys.length; i++)\n          {\n            store.removeItem( keys[ i ] );\n          }\n        }\n        catch (e)\n        {\n          promise.$failure( [e] );\n        }\n\n        if ( promise.$pending() )\n        {\n          stork.cache.reset();\n\n          promise.$success();\n        }\n      };\n      \n      if ( this.loaded )\n      {\n        removeByKeys( this.cache.keys );\n      }\n      else\n      {\n        var keys = [];\n\n        try\n        {\n          for (var i = 0; i < store.length; i++)\n          {\n            var rawKey = store.key( i );\n\n            if ( rawKey.substring( 0, prefix.length ) === prefix )\n            {\n              keys.push( rawKey );\n            }\n          }  \n        }\n        catch (e)\n        {\n          promise.$failure( [e] );\n        }\n\n        if ( promise.$pending() )\n        {\n          removeByKeys( keys );          \n        }\n      }\n    },\n\n    _get: function(key, rawKey, promise)\n    {\n      try\n      { \n        var rawValue = store.getItem( rawKey );\n\n        if ( rawValue === null )\n        {\n          promise.$success( [undefined, key] );\n        }\n        else\n        {\n          var value = fromJson( rawValue );\n\n          this.cache.put( rawKey, value, key );\n\n          promise.$success( [value, key] ); \n        }\n      }\n      catch (e)\n      {\n        promise.$failure( [key, e] );\n      }\n    },\n\n    _put: function(key, value, rawKey, rawValue, promise)\n    {\n      try\n      {\n        store.setItem( rawKey, rawValue );        \n      }\n      catch (e)\n      {\n        promise.$failure( [key, value, e] );\n      }\n\n      if ( promise.$pending() )\n      {\n        var previousValue = this.cache.get( rawKey );\n\n        this.cache.put( rawKey, value, key );\n\n        promise.$success( [key, value, previousValue] );\n      }\n    },\n\n    _remove: function(key, rawKey, value, promise)\n    {\n      try\n      {\n        store.removeItem( rawKey );\n      }\n      catch (e)\n      {\n        promise.$failure( [key, e] );\n      }\n\n      if ( promise.$pending() )\n      {\n        this.cache.remove( rawKey );\n\n        promise.$success( [value, key] );\n      }\n    },\n\n    _size: function(promise)\n    {\n      var onSuccess = function(keys, values)\n      {\n        promise.$success( [keys.length] );\n      };\n      var onFailure = function(e)\n      {\n        promise.$failure( [e] );\n      };\n\n      this.reload( onSuccess, onFailure );\n    }\n\n  }\n});","\nStork.adapter('memory', 1, \n{\n  valid: function() \n  {\n    return true;\n  },\n\n  init: function(options, success, failure) \n  {\n    var promise = new Promise( this, success, failure );\n\n    this.loaded = true;\n    this.finishInitialization( promise, [this] );\n    \n    return promise;\n  },\n\n  reload: function(success, failure)\n  {\n    var promise = new Promise( this, success, failure );\n\n    this.finishReload( promise );\n\n    return promise;\n  },\n\n  _destroy: function(promise)\n  {\n    this.cache.reset();\n\n    promise.$success();\n  },\n\n  _put: function(key, value, rawKey, rawValue, promise)\n  {\n    var previousValue = this.cache.get( rawKey );\n\n    this.cache.put( rawKey, value, key );\n\n    promise.$success( [key, value, previousValue] );\n  },\n\n  _remove: function(key, rawKey, value, promise)\n  {\n    this.cache.remove( rawKey );\n\n    promise.$success( [value, key] );\n  }\n\n});","\nStork.adapter('webkit-sqlite', 6, function()\n{\n  var DATABASE_NAME = 'stork';\n\n  var SQL_CREATE = 'CREATE TABLE IF NOT EXISTS {0} (id TEXT PRIMARY KEY, value TEXT)';\n  var SQL_SELECT  = 'SELECT value FROM {0} WHERE id = ?';\n  var SQL_SELECT_ALL = 'SELECT id, value FROM {0}';\n  var SQL_SELECT_MANY = 'SELECT id, value FROM {0} WHERE id IN ({1})';\n  var SQL_INSERT = 'INSERT OR REPLACE INTO {0} (id, value) VALUES (?, ?)';\n  var SQL_DELETE = 'DELETE FROM {0} WHERE id = ?';\n  var SQL_COUNT = 'SELECT COUNT(*) as count FROM {0}';\n  var SQL_DESTROY = 'DELETE FROM {0}';\n  var SQL_DELETE_MANY = 'DELETE FROM {0} WHERE id IN ({1})';\n\n  function streplace(str, arr)\n  {\n    return str.replace(/\\{(\\d+)\\}/g, function(match, index)\n    {\n      index = parseInt( index );\n\n      if ( isNaN( index ) || index < 0 || index >= arr.length ) \n      {\n        return match;\n      }\n\n      return arr[ index ];\n    });\n  }\n\n  return {\n\n    valid: function() \n    {\n      return !!window.openDatabase;\n    },\n\n    init: function(options, success, failure) \n    {\n      var promise = new Promise( this, success, failure );\n\n      var databaseName = coalesce( options.database, DATABASE_NAME );\n      var databaseSize = coalesce( options.size, 65536 );\n      var databaseVersion = coalesce( options.version, '1.0' );\n\n      var stork = this;\n\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [error] );\n      };\n      var onTransactionForCreate = function(tx) \n      {\n        tx.executeSql( stork.SQL_CREATE, [], onCreate, onFailure );\n      };\n      var onCreate = function(tx, results) \n      {\n        if ( stork.lazy )\n        {\n          stork.finishInitialization( promise, [stork] );\n        }\n        else\n        {\n          promise.$bindTo( stork.reload(), [stork] );\n        }\n      };\n\n      this.SQL_CREATE     = streplace( SQL_CREATE, [this.name] );\n      this.SQL_SELECT     = streplace( SQL_SELECT, [this.name] );\n      this.SQL_SELECT_ALL = streplace( SQL_SELECT_ALL, [this.name] );\n      this.SQL_INSERT     = streplace( SQL_INSERT, [this.name] );\n      this.SQL_DELETE     = streplace( SQL_DELETE, [this.name] );\n      this.SQL_DESTROY    = streplace( SQL_DESTROY, [this.name] );\n      this.SQL_COUNT      = streplace( SQL_COUNT, [this.name] );\n\n      this.db = openDatabase( databaseName, databaseVersion, databaseName, databaseSize );\n      this.db.transaction( onTransactionForCreate, onFailure );\n      \n      return promise;\n    },\n\n    reload: function(success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n      var stork = this;\n\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [error] );\n      };\n      var onTransactionForSelect = function(tx) \n      {\n        tx.executeSql( stork.SQL_SELECT_ALL, [], onResults, onFailure );\n      };\n      var onResults = function(tx, results) \n      {\n        var cache = new FastMap();\n        try \n        {\n          for (var i = 0; i < results.rows.length; i++) \n          {\n            var record = results.rows[ i ];\n            var value = fromJson( record.value );\n            var key = fromJson( record.id );\n\n            cache.put( record.id, value, key );\n          }\n\n          stork.cache.overwrite( cache );\n          stork.loaded = true;\n        }\n        catch (e) \n        {\n          promise.$failure( [e] );\n        }\n\n        stork.finishReload( promise );\n      };\n\n      this.db.readTransaction( onTransactionForSelect, onFailure );\n\n      return promise;\n    },\n\n    _get: function(key, rawKey, promise)\n    {\n      var stork = this;\n\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [key, error] );\n      };\n      var onTransaction = function(tx)\n      {\n        tx.executeSql( stork.SQL_SELECT, [rawKey], onResult, onFailure );\n      };\n      var onResult = function(tx, results)\n      {\n        var value = undefined;\n        try\n        {\n          var first = results.rows[ 0 ];\n\n          if ( first && first.value !== undefined )\n          {\n            value = fromJson( first.value );\n          }\n        }\n        catch (e)\n        {\n          promise.$failure( [key, e] );\n        }\n\n        if ( promise.$pending() )\n        {\n          if ( value !== undefined )\n          {\n            stork.cache.put( rawKey, value, key );\n\n            promise.$success( [value, key] );\n          }\n          else\n          {\n            promise.$success( [undefined, key] );\n          }\n        }\n      };\n\n      this.db.readTransaction( onTransaction, onFailure );\n    },\n\n    _destroy: function(promise)\n    {\n      var stork = this;\n\n      var onTransaction = function(tx) \n      {\n        tx.executeSql( stork.SQL_DESTROY, [], onSuccess, onFailure );\n      };\n      var onSuccess = function(tx, results) \n      {\n        stork.cache.reset();\n\n        promise.$success();\n      };\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [error] );\n      };\n\n      this.db.transaction( onTransaction, onFailure );\n    },\n\n    _put: function(key, value, rawKey, rawValue, promise)\n    {\n      var stork = this;\n      \n      var onTransaction = function(tx) \n      {\n        tx.executeSql( stork.SQL_INSERT, [rawKey, rawValue], onSuccess, onFailure );\n      };\n      var onSuccess = function(tx, results) \n      {\n        var previousValue = stork.cache.get( rawKey );\n\n        stork.cache.put( rawKey, value, key );\n\n        promise.$success( [key, value, previousValue] );\n      };\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [key, value, error] );\n      };\n\n      this.db.transaction( onTransaction, onFailure );\n    },\n\n    _remove: function(key, rawKey, value, promise)\n    {\n      var stork = this;\n      \n      var onTransaction = function(tx) \n      {\n        tx.executeSql( stork.SQL_DELETE, [rawKey], onSuccess, onFailure );\n      };\n      var onSuccess = function(tx, results) \n      {\n        stork.cache.remove( rawKey );\n\n        promise.$success( [value, key] );\n      };\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [key, error] );\n      };\n\n      this.db.transaction( onTransaction, onFailure );\n    },\n\n    _size: function(promise)\n    {\n      var stork = this;\n\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [error] );\n      };\n      var onTransaction = function(tx)\n      {\n        tx.executeSql( stork.SQL_COUNT, [], onCount, onFailure );\n      };\n      var onCount = function(tx, results)\n      {\n        promise.$success( [results.rows[0].count] );\n      };\n\n      this.db.readTransaction( onTransaction, onFailure );\n    },\n\n    batch: function(records, success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n\n      if ( this.handlePending( this.batch, arguments, promise ) )\n      {\n        return promise;\n      }\n\n      var stork = this;\n      var keyName = this.key;\n      var successful = 0;\n      var converted = [];\n\n      try\n      {\n        for (var i = 0; i < records.length; i++)\n        {\n          var value = records[ i ];\n          var key = value[ keyName ];\n\n          if ( undef(key) ) \n          {\n            key = value[ keyName ] = uuid();\n          }\n\n          converted.push(\n          {\n            value: value,\n            key: key,\n            rawKey: toJson( key ), \n            rawValue: toJson( value )\n          });\n        }  \n      }\n      catch (e)\n      {\n        promise.$failure( [records, successful, e] );\n\n        return promise;\n      }\n\n      var onTransaction = function(tx) \n      { \n        for (var i = 0; i < converted.length; i++)\n        {\n          var record = converted[ i ];\n\n          tx.executeSql( stork.SQL_INSERT, [record.rawKey, record.rawValue], onSuccess, onFailure );\n        }\n      };\n      var onSuccess = function(tx, results) \n      {\n        if ( ++successful === records.length && promise.$pending() )\n        {\n          for (var i = 0; i < converted.length; i++)\n          {\n            var record = converted[ i ];\n\n            stork.cache.put( record.rawKey, record.value, record.key );\n          }\n\n          promise.$success( [records] );\n        }\n      };\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [records, successful, error] );\n      };\n\n      this.db.transaction( onTransaction, onFailure );\n\n      return promise;\n    },\n\n    removeMany: function(keys, success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n\n      if ( this.handlePending( this.removeMany, arguments, promise ) )\n      {\n        return promise;\n      }\n\n      var stork = this;\n      var rawKeys = [];\n      var values = []; \n      var binder = [];\n      var query = '';\n\n      var onTransaction = function(tx) \n      {\n        tx.executeSql( query, rawKeys, onSuccess, onFailure );\n      };\n      var onSuccess = function(tx, results) \n      {\n        for (var i = 0; i < rawKeys.length; i++) \n        {\n          stork.cache.remove( rawKeys[ i ] );\n        }\n\n        promise.$success( [values, keys] );\n      };\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [values, 0, error] );\n      };\n\n      try\n      {\n        for (var i = 0; i < keys.length; i++) \n        {\n          var key = toJson( keys[ i ] );\n\n          if ( this.cache.has( key ) )\n          {\n            rawKeys[ i ] = key;\n            values[ i ] = this.cache.get( key );\n            binder[ i ] = '?';\n          }\n        }\n\n        query = streplace( SQL_DELETE_MANY, [this.name, binder.join(',')] );\n      }\n      catch (e)\n      {\n        promise.$failure( [values, e] );\n      }\n\n      if ( promise.$pending() )\n      {\n        this.db.transaction( onTransaction, onFailure );\n      }\n\n      return promise;\n    },\n\n    getMany: function(keys, success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n\n      if ( this.handlePending( this.removeMany, arguments, promise ) )\n      {\n        return promise;\n      }\n\n      var stork = this;\n      var rawKeys = [];\n      var keyToValueIndex = [];\n      var values = [];\n      var binder = [];\n      var query = '';\n\n      var onTransaction = function(tx) \n      {\n        tx.executeSql( query, rawKeys, onSuccess, onFailure );\n      };\n      var onSuccess = function(tx, results) \n      {\n        for (var i = 0; i < results.rows.length; i++)\n        {\n          var r = results.rows[ i ];\n\n          for (var k = 0; k < rawKeys.length; k++)\n          {\n            if ( rawKeys[ k ] === r.id )\n            {\n              var value = fromJson( r.value );\n              var index = keyToValueIndex[ k ];\n\n              values[ index ] = value;\n              stork.cache.put( r.id, value, keys[ index ] );\n            }\n          }\n        }\n\n        promise.$success( [values, keys] );\n      };\n      var onFailure = function(tx, error) \n      {\n        promise.$failure( [keys, error] );\n      };\n\n      try\n      {\n        for (var i = 0; i < keys.length; i++) \n        {\n          var key = toJson( keys[ i ] );\n\n          if ( this.cache.has( key ) )\n          {\n            values[ i ] = this.cache.get( key );\n          }\n          else\n          {\n            rawKeys.push( key );\n            keyToValueIndex.push( i );\n            binder.push( '?' );\n          }\n        }\n\n        query = streplace( SQL_SELECT_MANY, [this.name, binder.join(',')] );          \n      }\n      catch (e)\n      {\n        promise.$failure( [values, e] );\n      }\n\n      if ( promise.$pending() )\n      {\n        if ( rawKeys.length )\n        {\n          this.db.transaction( onTransaction, onFailure );\n        }\n        else\n        {\n          promise.$success( [values, keys] );\n        }\n      }\n\n      return promise;\n    }\n\n  }\n});","\nStork.adapter('window-name', 2, function()\n{\n\n  function loadData()\n  {\n    if ( !loadData.cache )\n    {\n      try\n      {\n        loadData.cache = fromJson( window.top.name );\n      }\n      catch (e)\n      {\n        loadData.cache = {};\n      }\n    }\n    \n    return loadData.cache;\n  }\n\n  function saveData()\n  {\n    try\n    {\n      window.top.name = toJson( loadData() );\n    }\n    catch (e)\n    {\n\n    }\n  }\n\n  return {\n\n    encode: function(key)\n    {\n      return this.prefix + toJson( key );\n    },\n\n    decode: function(rawKey)\n    {\n      return fromJson( rawKey.substring( this.prefix.length ) );\n    },\n\n    valid: function() \n    {\n      return window.top && typeof window.top.name !== 'undefined';\n    },\n\n    init: function(options, success, failure) \n    {\n      var promise = new Promise( this, success, failure );\n\n      this.prefix = coalesce( options.prefix, this.name + '-' );\n\n      promise.$bindTo( this.reload(), [this] );\n      \n      return promise;\n    },\n\n    reload: function(success, failure)\n    {\n      var promise = new Promise( this, success, failure );\n      var prefix = this.prefix;\n      var cache = new FastMap();\n      var data = loadData();\n\n      try\n      {\n        for (var rawKey in data)\n        {\n          if ( rawKey.substring( 0, prefix.length ) === prefix )\n          {\n            var rawValue = data[ rawKey ];\n            var value = fromJson( rawValue );\n            var key = this.decode( rawKey );\n\n            cache.put( rawKey, value, key );\n          }  \n        }\n\n        this.cache.overwrite( cache );\n        this.loaded = true;\n      }\n      catch (e)\n      {\n        promise.$failure( [e] );\n      }\n\n      this.finishReload( promise );\n\n      return promise;\n    },\n\n    _destroy: function(promise)\n    {\n      var keys = this.cache.keys;\n      var data = loadData();\n\n      for (var i = 0; i < keys.length; i++)\n      {\n        delete data[ keys[i] ];\n      }\n\n      this.cache.reset();\n\n      saveData();\n\n      promise.$success();\n    },\n\n    _put: function(key, value, rawKey, rawValue, promise)\n    {\n      var data = loadData();\n      var previousValue = this.cache.get( rawKey );\n\n      data[ rawKey ] = value;\n\n      this.cache.put( rawKey, value, key );\n\n      saveData();\n\n      promise.$success( [key, value, previousValue] );\n    },\n\n    _remove: function(key, rawKey, value, promise)\n    {\n      var data = loadData();\n\n      delete data[ rawKey ];\n\n      this.cache.remove( rawKey );\n\n      saveData();\n\n      promise.$success( [value, key] );\n    }\n\n  }\n});","\n  \n  global.Stork = Stork;\n  global.Stork.getAdapter = getAdapter;\n  global.Stork.Promise = Promise;\n  global.Stork.FastMap = FastMap;\n\n})(window);"],"sourceRoot":"/source/"}